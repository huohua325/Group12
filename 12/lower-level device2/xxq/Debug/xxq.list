
xxq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b628  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001148  0800b7f8  0800b7f8  0000c7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c940  0800c940  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c948  0800c948  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c948  0800c948  0000d948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c94c  0800c94c  0000d94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c950  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007074  200001e0  0800cb30  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007254  0800cb30  0000e254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152f8  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003848  00000000  00000000  00023508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00026d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001047  00000000  00000000  00028230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002519e  00000000  00000000  00029277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a91b  00000000  00000000  0004e415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7516  00000000  00000000  00068d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006914  00000000  00000000  0014028c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00146ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7e0 	.word	0x0800b7e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b7e0 	.word	0x0800b7e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a28      	ldr	r2, [pc, #160]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_GPIO_Init+0xc0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000fa0:	f004 fcbe 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	480b      	ldr	r0, [pc, #44]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000faa:	f004 fcb9 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = cs_Pin;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000fc6:	f004 fb17 	bl	80055f8 <HAL_GPIO_Init>

  /* PA9 PA11 已改为TIM1的PWM通道，不再作为普通GPIO */

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800

08000fdc <MX_I2C1_Init>:
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_I2C1_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <MX_I2C1_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_I2C1_Init+0x58>)
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <MX_I2C1_Init+0x60>)
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_I2C1_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_I2C1_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_I2C1_Init+0x58>)
 8000ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_I2C1_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_I2C1_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_I2C1_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_I2C1_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
 8001018:	4806      	ldr	r0, [pc, #24]	@ (8001034 <MX_I2C1_Init+0x58>)
 800101a:	f004 fc9b 	bl	8005954 <HAL_I2C_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C1_Init+0x4c>
 8001024:	f001 f806 	bl	8002034 <Error_Handler>
 8001028:	200a      	movs	r0, #10
 800102a:	f003 fdad 	bl	8004b88 <HAL_Delay>
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000450 	.word	0x20000450
 8001038:	40005400 	.word	0x40005400
 800103c:	000186a0 	.word	0x000186a0

08001040 <MX_I2C2_Init>:
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <MX_I2C2_Init+0x50>)
 8001046:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <MX_I2C2_Init+0x54>)
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_I2C2_Init+0x50>)
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <MX_I2C2_Init+0x58>)
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_I2C2_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_I2C2_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_I2C2_Init+0x50>)
 800105e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <MX_I2C2_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_I2C2_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <MX_I2C2_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_I2C2_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <MX_I2C2_Init+0x50>)
 800107e:	f004 fc69 	bl	8005954 <HAL_I2C_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C2_Init+0x4c>
 8001088:	f000 ffd4 	bl	8002034 <Error_Handler>
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200001fc 	.word	0x200001fc
 8001094:	40005800 	.word	0x40005800
 8001098:	000186a0 	.word	0x000186a0

0800109c <HAL_I2C_MspInit>:
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	@ 0x30
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a42      	ldr	r2, [pc, #264]	@ (80011c4 <HAL_I2C_MspInit+0x128>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12d      	bne.n	800111a <HAL_I2C_MspInit+0x7e>
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a40      	ldr	r2, [pc, #256]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	2312      	movs	r3, #18
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e8:	2303      	movs	r3, #3
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ec:	2304      	movs	r3, #4
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4835      	ldr	r0, [pc, #212]	@ (80011cc <HAL_I2C_MspInit+0x130>)
 80010f8:	f004 fa7e 	bl	80055f8 <HAL_GPIO_Init>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a30      	ldr	r2, [pc, #192]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 8001106:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	e050      	b.n	80011bc <HAL_I2C_MspInit+0x120>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a2c      	ldr	r2, [pc, #176]	@ (80011d0 <HAL_I2C_MspInit+0x134>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d14b      	bne.n	80011bc <HAL_I2C_MspInit+0x120>
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	4a26      	ldr	r2, [pc, #152]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	6313      	str	r3, [r2, #48]	@ 0x30
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a1f      	ldr	r2, [pc, #124]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	2312      	movs	r3, #18
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	2301      	movs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800116e:	2304      	movs	r3, #4
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4814      	ldr	r0, [pc, #80]	@ (80011cc <HAL_I2C_MspInit+0x130>)
 800117a:	f004 fa3d 	bl	80055f8 <HAL_GPIO_Init>
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	2312      	movs	r3, #18
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
 800118c:	2303      	movs	r3, #3
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001190:	2304      	movs	r3, #4
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <HAL_I2C_MspInit+0x138>)
 800119c:	f004 fa2c 	bl	80055f8 <HAL_GPIO_Init>
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 80011aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_I2C_MspInit+0x12c>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	@ 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40005800 	.word	0x40005800
 80011d4:	40020800 	.word	0x40020800

080011d8 <main>:
  * 4. 功能模块初始化
  * 5. 进入主循环
  ******************************************************************************
  */
int main(void)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0cd      	sub	sp, #308	@ 0x134
 80011dc:	af02      	add	r7, sp, #8
  /* ========================================================================== */
  /*                          SYSTEM INITIALIZATION                            */
  /* ========================================================================== */
  
  // Step 1: Initialize the HAL Library
  HAL_Init();
 80011de:	f003 fc61 	bl	8004aa4 <HAL_Init>

  // Step 2: Configure the system clock to 168MHz
  SystemClock_Config();
 80011e2:	f000 fa5b 	bl	800169c <SystemClock_Config>

  // Step 3: Initialize all configured peripherals
  MX_GPIO_Init();           // GPIO配置初始化
 80011e6:	f7ff fe95 	bl	8000f14 <MX_GPIO_Init>
  MX_I2C1_Init();           // I2C1总线初始化
 80011ea:	f7ff fef7 	bl	8000fdc <MX_I2C1_Init>
  MX_I2C2_Init();           // I2C2总线初始化 (备用)
 80011ee:	f7ff ff27 	bl	8001040 <MX_I2C2_Init>
  MX_SPI1_Init();           // SPI1接口初始化 (备用)
 80011f2:	f000 ff25 	bl	8002040 <MX_SPI1_Init>
  MX_TIM1_Init();           // 电机PWM定时器初始化
 80011f6:	f001 f943 	bl	8002480 <MX_TIM1_Init>
  MX_TIM2_Init();           // 右轮编码器定时器初始化
 80011fa:	f001 fa05 	bl	8002608 <MX_TIM2_Init>
  MX_TIM3_Init();           // 左轮编码器定时器初始化
 80011fe:	f001 fa57 	bl	80026b0 <MX_TIM3_Init>
  MX_TIM6_Init();           // 系统基准定时器初始化
 8001202:	f001 fa9b 	bl	800273c <MX_TIM6_Init>
  MX_UART4_Init();          // 蓝牙通信串口初始化
 8001206:	f001 fcf7 	bl	8002bf8 <MX_UART4_Init>
  MX_USART2_UART_Init();    // 调试串口初始化
 800120a:	f001 fc91 	bl	8002b30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();    // 激光雷达串口初始化
 800120e:	f001 fcc1 	bl	8002b94 <MX_USART3_UART_Init>
  MX_UART5_Init();          // 传感器数据串口初始化
 8001212:	f001 fd23 	bl	8002c5c <MX_UART5_Init>
  /* ========================================================================== */
  /*                        FUNCTIONAL MODULES SETUP                           */
  /* ========================================================================== */
  
  // 启动编码器定时器 (正交编码器模式)
  if (HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL) != HAL_OK ||
 8001216:	213c      	movs	r1, #60	@ 0x3c
 8001218:	48bd      	ldr	r0, [pc, #756]	@ (8001510 <main+0x338>)
 800121a:	f005 fb91 	bl	8006940 <HAL_TIM_Encoder_Start>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <main+0x5a>
      HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK) {
 8001224:	213c      	movs	r1, #60	@ 0x3c
 8001226:	48bb      	ldr	r0, [pc, #748]	@ (8001514 <main+0x33c>)
 8001228:	f005 fb8a 	bl	8006940 <HAL_TIM_Encoder_Start>
 800122c:	4603      	mov	r3, r0
  if (HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL) != HAL_OK ||
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <main+0x60>
      System_ErrorHandler("Encoder timer startup failed");
 8001232:	48b9      	ldr	r0, [pc, #740]	@ (8001518 <main+0x340>)
 8001234:	f000 f9e8 	bl	8001608 <System_ErrorHandler>
  }

  // 初始化电机控制系统
  Motor_Init(&htim1);
 8001238:	48b8      	ldr	r0, [pc, #736]	@ (800151c <main+0x344>)
 800123a:	f002 f81b 	bl	8003274 <Motor_Init>
  
  // 初始化PID控制器
  Motor_PID_Init();
 800123e:	f002 f8dd 	bl	80033fc <Motor_PID_Init>

  // 初始化激光雷达模块（连续扫描模式）
  if (Radar_Init(&huart3) != 0) {
 8001242:	48b7      	ldr	r0, [pc, #732]	@ (8001520 <main+0x348>)
 8001244:	f002 ff0e 	bl	8004064 <Radar_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <main+0x7c>
      System_ErrorHandler("Radar module initialization failed");
 800124e:	48b5      	ldr	r0, [pc, #724]	@ (8001524 <main+0x34c>)
 8001250:	f000 f9da 	bl	8001608 <System_ErrorHandler>
  }
  
  // 发送雷达初始化成功消息
  const char* radar_msg = "[INFO] Radar continuous scan mode initialized\r\n";
 8001254:	4bb4      	ldr	r3, [pc, #720]	@ (8001528 <main+0x350>)
 8001256:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  HAL_UART_Transmit(&huart4, (uint8_t*)radar_msg, strlen(radar_msg), 100);
 800125a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800125e:	f7ff f827 	bl	80002b0 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800126c:	48af      	ldr	r0, [pc, #700]	@ (800152c <main+0x354>)
 800126e:	f006 f954 	bl	800751a <HAL_UART_Transmit>
  
  // 系统启动提示
  Command_ShowSystemInfo();
 8001272:	f000 f981 	bl	8001578 <Command_ShowSystemInfo>
  /* ======================================================================== */
  /*                    PYTHON COMMAND INTERFACE SETUP (阶段1)                 */
  /* ======================================================================== */
  
  // 发送就绪消息给Python端
  const char* ready_msg = "STM32 Ready - Waiting for Python commands...\r\n";
 8001276:	4bae      	ldr	r3, [pc, #696]	@ (8001530 <main+0x358>)
 8001278:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  HAL_UART_Transmit(&huart4, (uint8_t*)ready_msg, strlen(ready_msg), 100);
 800127c:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001280:	f7ff f816 	bl	80002b0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	2364      	movs	r3, #100	@ 0x64
 800128a:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800128e:	48a7      	ldr	r0, [pc, #668]	@ (800152c <main+0x354>)
 8001290:	f006 f943 	bl	800751a <HAL_UART_Transmit>
  
  // 启动UART4接收中断（用于接收Python命令）
  HAL_UART_Receive_IT(&huart4, &g_uart_rx_buffer, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	49a7      	ldr	r1, [pc, #668]	@ (8001534 <main+0x35c>)
 8001298:	48a4      	ldr	r0, [pc, #656]	@ (800152c <main+0x354>)
 800129a:	f006 f9d7 	bl	800764c <HAL_UART_Receive_IT>
  // 启动UART5接收中断（用于接收传感器数据）
  HAL_StatusTypeDef uart5_status = HAL_UART_Receive_IT(&huart5, &g_uart5_rx_buffer, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	49a5      	ldr	r1, [pc, #660]	@ (8001538 <main+0x360>)
 80012a2:	48a6      	ldr	r0, [pc, #664]	@ (800153c <main+0x364>)
 80012a4:	f006 f9d2 	bl	800764c <HAL_UART_Receive_IT>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

  // 发送UART5初始化状态
  char uart5_msg[80];
  if (uart5_status == HAL_OK) {
 80012ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <main+0xee>
      snprintf(uart5_msg, sizeof(uart5_msg), "[INFO] UART5 initialized successfully (PC12-TX, PD2-RX, 9600)\r\n");
 80012b6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80012ba:	4aa1      	ldr	r2, [pc, #644]	@ (8001540 <main+0x368>)
 80012bc:	2150      	movs	r1, #80	@ 0x50
 80012be:	4618      	mov	r0, r3
 80012c0:	f008 f92a 	bl	8009518 <sniprintf>
 80012c4:	e007      	b.n	80012d6 <main+0xfe>
  } else {
      snprintf(uart5_msg, sizeof(uart5_msg), "[ERROR] UART5 init failed: %d\r\n", uart5_status);
 80012c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80012ca:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 80012ce:	4a9d      	ldr	r2, [pc, #628]	@ (8001544 <main+0x36c>)
 80012d0:	2150      	movs	r1, #80	@ 0x50
 80012d2:	f008 f921 	bl	8009518 <sniprintf>
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)uart5_msg, strlen(uart5_msg), 100);
 80012d6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ffe8 	bl	80002b0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80012e8:	2364      	movs	r3, #100	@ 0x64
 80012ea:	4890      	ldr	r0, [pc, #576]	@ (800152c <main+0x354>)
 80012ec:	f006 f915 	bl	800751a <HAL_UART_Transmit>

  /* ======================================================================== */
  /*                            MAIN CONTROL LOOP                              */
  /* ======================================================================== */
  
  g_system_state = SYSTEM_STATE_RUNNING;
 80012f0:	4b95      	ldr	r3, [pc, #596]	@ (8001548 <main+0x370>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	701a      	strb	r2, [r3, #0]

  uint32_t loop_counter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  static PackPoint_t points_buf[LIDAR_MAX_POINTS]; // 静态分配，避免栈溢出
  
  while (1)
  {
      loop_counter++;
 80012fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
      
      // ⭐ 步骤1：处理环形缓冲区中的雷达数据（状态机 + 滑动窗口解析）
      LIDAR_ProcessPendingData();
 8001306:	f002 ff97 	bl	8004238 <LIDAR_ProcessPendingData>
      
      // ⭐ 步骤2：如果有完整的一圈数据且到了发送时间，打包并发送到上位机
      // 新方案：每500ms发送一圈（2Hz频率），原始5字节数据透传
      uint16_t n = LIDAR_GetCompletedRotation((LidarPoint_t*)points_buf, LIDAR_MAX_POINTS);
 800130a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800130e:	488f      	ldr	r0, [pc, #572]	@ (800154c <main+0x374>)
 8001310:	f003 fa0e 	bl	8004730 <LIDAR_GetCompletedRotation>
 8001314:	4603      	mov	r3, r0
 8001316:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
      if (n > 0 && LIDAR_ShouldSendFrame()) {
 800131a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00c      	beq.n	800133c <main+0x164>
 8001322:	f003 fa9b 	bl	800485c <LIDAR_ShouldSendFrame>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <main+0x164>
          // 使用新的原始数据透传API
          int r = LIDAR_PackAndSendRawFrame(points_buf, n);
 800132c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8001330:	4619      	mov	r1, r3
 8001332:	4886      	ldr	r0, [pc, #536]	@ (800154c <main+0x374>)
 8001334:	f003 faac 	bl	8004890 <LIDAR_PackAndSendRawFrame>
 8001338:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
              // r == -3: 点数为0（理论上不会到这里）
          }
      }
      
      // 系统状态更新
      System_StatusUpdate();
 800133c:	f000 f93e 	bl	80015bc <System_StatusUpdate>
//      // 处理UART5传感器数据
      UART5_ProcessSensorData();
 8001340:	f000 fdc4 	bl	8001ecc <UART5_ProcessSensorData>
//      // PID控制循环 (20ms周期执行)
      Motor_PID_Control(&htim1, &htim3, &htim2);
 8001344:	4a72      	ldr	r2, [pc, #456]	@ (8001510 <main+0x338>)
 8001346:	4973      	ldr	r1, [pc, #460]	@ (8001514 <main+0x33c>)
 8001348:	4874      	ldr	r0, [pc, #464]	@ (800151c <main+0x344>)
 800134a:	f002 f961 	bl	8003610 <Motor_PID_Control>
//      // 阶段1：处理Python命令（从中断缓冲区）
     Python_ParseCommand();
 800134e:	f000 fbb5 	bl	8001abc <Python_ParseCommand>
//
      // ========== 阶段3：动作完成检测与ACK回复 ==========
      // 注意：Motor_Command_XXX 函数是非阻塞的，会在到达目标后自动停止
      // 我们通过检测速度接近0来判断动作完成
      if (g_action_in_progress) {
 8001352:	4b7f      	ldr	r3, [pc, #508]	@ (8001550 <main+0x378>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0d0      	beq.n	80012fc <main+0x124>
          uint32_t elapsed = HAL_GetTick() - g_action_start_time;
 800135a:	f003 fc09 	bl	8004b70 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	4b7c      	ldr	r3, [pc, #496]	@ (8001554 <main+0x37c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
          float left_rps, right_rps;
          Motor_GetActualSpeed(&left_rps, &right_rps);
 800136a:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800136e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fb9f 	bl	8003ab8 <Motor_GetActualSpeed>
          
          // 动作完成判断：速度接近0（进入PID死区）
          float speed_threshold = 0.08f;  // RPS，较小的阈值确保真正停止
 800137a:	4b77      	ldr	r3, [pc, #476]	@ (8001558 <main+0x380>)
 800137c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          uint32_t min_time = 1000;  // 至少等待1秒，避免误判
 8001380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001384:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
          
          // 检测动作完成：时间>1秒且速度接近0
          if (elapsed > min_time && 
 8001388:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800138c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001390:	429a      	cmp	r2, r3
 8001392:	d97c      	bls.n	800148e <main+0x2b6>
              fabsf(left_rps) < speed_threshold && 
 8001394:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001398:	eef0 7ae7 	vabs.f32	s15, s15
          if (elapsed > min_time && 
 800139c:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 80013a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	dd71      	ble.n	800148e <main+0x2b6>
              fabsf(right_rps) < speed_threshold) {
 80013aa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80013ae:	eef0 7ae7 	vabs.f32	s15, s15
              fabsf(left_rps) < speed_threshold && 
 80013b2:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 80013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd66      	ble.n	800148e <main+0x2b6>
              
              // 调试：显示即将发送的序列号
              char pre_ack_debug[64];
              snprintf(pre_ack_debug, sizeof(pre_ack_debug), 
 80013c0:	4b66      	ldr	r3, [pc, #408]	@ (800155c <main+0x384>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80013c8:	4a65      	ldr	r2, [pc, #404]	@ (8001560 <main+0x388>)
 80013ca:	2140      	movs	r1, #64	@ 0x40
 80013cc:	f008 f8a4 	bl	8009518 <sniprintf>
                      "[DEBUG] Sending ACK: g_last_command_seq=%u\r\n", g_last_command_seq);
              HAL_UART_Transmit(&huart4, (uint8_t*)pre_ack_debug, strlen(pre_ack_debug), 100);
 80013d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe ff6b 	bl	80002b0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80013e2:	2364      	movs	r3, #100	@ 0x64
 80013e4:	4851      	ldr	r0, [pc, #324]	@ (800152c <main+0x354>)
 80013e6:	f006 f898 	bl	800751a <HAL_UART_Transmit>
              
              // 发送完成回复：ACK,seq\n
              char ack[48];
              snprintf(ack, sizeof(ack), "ACK,%u,OK,%.2fs\r\n", 
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <main+0x384>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	461c      	mov	r4, r3
                      g_last_command_seq, elapsed / 1000.0f);
 80013f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001564 <main+0x38c>
 8001400:	eec7 6a87 	vdiv.f32	s13, s15, s14
              snprintf(ack, sizeof(ack), "ACK,%u,OK,%.2fs\r\n", 
 8001404:	ee16 0a90 	vmov	r0, s13
 8001408:	f7ff f8be 	bl	8000588 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4638      	mov	r0, r7
 8001412:	e9cd 2300 	strd	r2, r3, [sp]
 8001416:	4623      	mov	r3, r4
 8001418:	4a53      	ldr	r2, [pc, #332]	@ (8001568 <main+0x390>)
 800141a:	2130      	movs	r1, #48	@ 0x30
 800141c:	f008 f87c 	bl	8009518 <sniprintf>
              HAL_UART_Transmit(&huart4, (uint8_t*)ack, strlen(ack), 100);
 8001420:	463b      	mov	r3, r7
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff44 	bl	80002b0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	4639      	mov	r1, r7
 800142e:	2364      	movs	r3, #100	@ 0x64
 8001430:	483e      	ldr	r0, [pc, #248]	@ (800152c <main+0x354>)
 8001432:	f006 f872 	bl	800751a <HAL_UART_Transmit>
              
              g_action_in_progress = 0;
 8001436:	4b46      	ldr	r3, [pc, #280]	@ (8001550 <main+0x378>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
              
              // 调试日志
              char log[64];
              snprintf(log, sizeof(log), "[DEBUG] Action completed: seq=%u time=%.2fs\r\n",
 800143c:	4b47      	ldr	r3, [pc, #284]	@ (800155c <main+0x384>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	461c      	mov	r4, r3
                      g_last_command_seq, elapsed / 1000.0f);
 8001442:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001564 <main+0x38c>
 8001452:	eec7 6a87 	vdiv.f32	s13, s15, s14
              snprintf(log, sizeof(log), "[DEBUG] Action completed: seq=%u time=%.2fs\r\n",
 8001456:	ee16 0a90 	vmov	r0, s13
 800145a:	f7ff f895 	bl	8000588 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001466:	e9cd 2300 	strd	r2, r3, [sp]
 800146a:	4623      	mov	r3, r4
 800146c:	4a3f      	ldr	r2, [pc, #252]	@ (800156c <main+0x394>)
 800146e:	2140      	movs	r1, #64	@ 0x40
 8001470:	f008 f852 	bl	8009518 <sniprintf>
              HAL_UART_Transmit(&huart4, (uint8_t*)log, strlen(log), 100);
 8001474:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff19 	bl	80002b0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001486:	2364      	movs	r3, #100	@ 0x64
 8001488:	4828      	ldr	r0, [pc, #160]	@ (800152c <main+0x354>)
 800148a:	f006 f846 	bl	800751a <HAL_UART_Transmit>
          }
          
          // 超时保护（35秒，给Motor_Command足够时间）
          if (elapsed > 35000) {
 800148e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001492:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8001496:	4293      	cmp	r3, r2
 8001498:	f67f af30 	bls.w	80012fc <main+0x124>
              char timeout_msg[64];
              snprintf(timeout_msg, sizeof(timeout_msg), 
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <main+0x384>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	461c      	mov	r4, r3
                      "ACK,%u,TIMEOUT,%.2fs\r\n", g_last_command_seq, elapsed / 1000.0f);
 80014a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ae:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001564 <main+0x38c>
 80014b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
              snprintf(timeout_msg, sizeof(timeout_msg), 
 80014b6:	ee16 0a90 	vmov	r0, s13
 80014ba:	f7ff f865 	bl	8000588 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80014c6:	e9cd 2300 	strd	r2, r3, [sp]
 80014ca:	4623      	mov	r3, r4
 80014cc:	4a28      	ldr	r2, [pc, #160]	@ (8001570 <main+0x398>)
 80014ce:	2140      	movs	r1, #64	@ 0x40
 80014d0:	f008 f822 	bl	8009518 <sniprintf>
              HAL_UART_Transmit(&huart4, (uint8_t*)timeout_msg, strlen(timeout_msg), 100);
 80014d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fee9 	bl	80002b0 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80014e6:	2364      	movs	r3, #100	@ 0x64
 80014e8:	4810      	ldr	r0, [pc, #64]	@ (800152c <main+0x354>)
 80014ea:	f006 f816 	bl	800751a <HAL_UART_Transmit>
              g_action_in_progress = 0;
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <main+0x378>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
              
              // 强制停止电机
              Motor_SetSpeed(&htim1, MOTOR_LEFT, 0.0f);
 80014f4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001574 <main+0x39c>
 80014f8:	2101      	movs	r1, #1
 80014fa:	4808      	ldr	r0, [pc, #32]	@ (800151c <main+0x344>)
 80014fc:	f001 feee 	bl	80032dc <Motor_SetSpeed>
              Motor_SetSpeed(&htim1, MOTOR_RIGHT, 0.0f);
 8001500:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001574 <main+0x39c>
 8001504:	2102      	movs	r1, #2
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <main+0x344>)
 8001508:	f001 fee8 	bl	80032dc <Motor_SetSpeed>
  {
 800150c:	e6f6      	b.n	80012fc <main+0x124>
 800150e:	bf00      	nop
 8001510:	20000390 	.word	0x20000390
 8001514:	200003d0 	.word	0x200003d0
 8001518:	0800b7f8 	.word	0x0800b7f8
 800151c:	20000350 	.word	0x20000350
 8001520:	20000290 	.word	0x20000290
 8001524:	0800b818 	.word	0x0800b818
 8001528:	0800b83c 	.word	0x0800b83c
 800152c:	200002d0 	.word	0x200002d0
 8001530:	0800b86c 	.word	0x0800b86c
 8001534:	200004a4 	.word	0x200004a4
 8001538:	200004a5 	.word	0x200004a5
 800153c:	20000310 	.word	0x20000310
 8001540:	0800b89c 	.word	0x0800b89c
 8001544:	0800b8dc 	.word	0x0800b8dc
 8001548:	200005f8 	.word	0x200005f8
 800154c:	20000604 	.word	0x20000604
 8001550:	200005fc 	.word	0x200005fc
 8001554:	20000600 	.word	0x20000600
 8001558:	3da3d70a 	.word	0x3da3d70a
 800155c:	200005fa 	.word	0x200005fa
 8001560:	0800b8fc 	.word	0x0800b8fc
 8001564:	447a0000 	.word	0x447a0000
 8001568:	0800b92c 	.word	0x0800b92c
 800156c:	0800b940 	.word	0x0800b940
 8001570:	0800b970 	.word	0x0800b970
 8001574:	00000000 	.word	0x00000000

08001578 <Command_ShowSystemInfo>:
  * @param  None
  * @retval None
  ******************************************************************************
  */
static void Command_ShowSystemInfo(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 800157e:	af00      	add	r7, sp, #0
    const char system_info[] = 
 8001580:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001584:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001588:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <Command_ShowSystemInfo+0x3c>)
 800158a:	4618      	mov	r0, r3
 800158c:	4611      	mov	r1, r2
 800158e:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8001592:	461a      	mov	r2, r3
 8001594:	f008 f8f1 	bl	800977a <memcpy>
        "| Communication: UART4 (BT)    | Debug Port: UART2 (PC)         |\r\n"
        "+================================================================+\r\n"
        "[INFO] System initialization started...\r\n"
        "[INFO] Type '?' for command help\r\n\r\n";
        
    HAL_UART_Transmit(&huart4, (uint8_t*)system_info, strlen(system_info), HAL_MAX_DELAY);
 8001598:	4639      	mov	r1, r7
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	f240 22af 	movw	r2, #687	@ 0x2af
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <Command_ShowSystemInfo+0x40>)
 80015a4:	f005 ffb9 	bl	800751a <HAL_UART_Transmit>
}
 80015a8:	bf00      	nop
 80015aa:	f507 772c 	add.w	r7, r7, #688	@ 0x2b0
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800c060 	.word	0x0800c060
 80015b8:	200002d0 	.word	0x200002d0

080015bc <System_StatusUpdate>:
  * @details
  * 定期更新系统状态，监控关键参数
  ******************************************************************************
  */
static void System_StatusUpdate(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
    static uint32_t last_status_update = 0;
    uint32_t current_time = HAL_GetTick();
 80015c2:	f003 fad5 	bl	8004b70 <HAL_GetTick>
 80015c6:	6078      	str	r0, [r7, #4]
    
    // 每1秒更新一次状态 (可根据需要调整)
    if (current_time - last_status_update >= 1000) {
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <System_StatusUpdate+0x3c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d4:	d30c      	bcc.n	80015f0 <System_StatusUpdate+0x34>
        last_status_update = current_time;
 80015d6:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <System_StatusUpdate+0x3c>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6013      	str	r3, [r2, #0]
        
        // System status check
        if (g_system_state == SYSTEM_STATE_ERROR) {
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <System_StatusUpdate+0x40>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d105      	bne.n	80015f0 <System_StatusUpdate+0x34>
            HAL_UART_Transmit(&huart4, (uint8_t*)"[WARNING] System in error state\r\n", 33, 100);
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	2221      	movs	r2, #33	@ 0x21
 80015e8:	4905      	ldr	r1, [pc, #20]	@ (8001600 <System_StatusUpdate+0x44>)
 80015ea:	4806      	ldr	r0, [pc, #24]	@ (8001604 <System_StatusUpdate+0x48>)
 80015ec:	f005 ff95 	bl	800751a <HAL_UART_Transmit>
        }
    }
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20001d74 	.word	0x20001d74
 80015fc:	200005f8 	.word	0x200005f8
 8001600:	0800c310 	.word	0x0800c310
 8001604:	200002d0 	.word	0x200002d0

08001608 <System_ErrorHandler>:
  * @details
  * 统一的错误处理函数，记录错误并进入安全模式
  ******************************************************************************
  */
static void System_ErrorHandler(const char* error_msg)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09c      	sub	sp, #112	@ 0x70
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    char full_error_msg[100];
    
    // 设置系统为错误状态
    g_system_state = SYSTEM_STATE_ERROR;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <System_ErrorHandler+0x5c>)
 8001612:	2203      	movs	r2, #3
 8001614:	701a      	strb	r2, [r3, #0]
    // 已移除：g_motor_mode, g_pid_control_enabled
    
    // 紧急停止所有电机
    Motor_SetSpeed(&htim1, MOTOR_LEFT, 0.0f);
 8001616:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001668 <System_ErrorHandler+0x60>
 800161a:	2101      	movs	r1, #1
 800161c:	4813      	ldr	r0, [pc, #76]	@ (800166c <System_ErrorHandler+0x64>)
 800161e:	f001 fe5d 	bl	80032dc <Motor_SetSpeed>
    Motor_SetSpeed(&htim1, MOTOR_RIGHT, 0.0f);
 8001622:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001668 <System_ErrorHandler+0x60>
 8001626:	2102      	movs	r1, #2
 8001628:	4810      	ldr	r0, [pc, #64]	@ (800166c <System_ErrorHandler+0x64>)
 800162a:	f001 fe57 	bl	80032dc <Motor_SetSpeed>
    
    // 发送错误信息
    snprintf(full_error_msg, sizeof(full_error_msg), 
 800162e:	f107 000c 	add.w	r0, r7, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <System_ErrorHandler+0x68>)
 8001636:	2164      	movs	r1, #100	@ 0x64
 8001638:	f007 ff6e 	bl	8009518 <sniprintf>
            "[CRITICAL ERROR] %s\r\n[SYSTEM] Entering safe mode...\r\n", error_msg);
    HAL_UART_Transmit(&huart4, (uint8_t*)full_error_msg, strlen(full_error_msg), HAL_MAX_DELAY);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fe35 	bl	80002b0 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	f107 010c 	add.w	r1, r7, #12
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	4808      	ldr	r0, [pc, #32]	@ (8001674 <System_ErrorHandler+0x6c>)
 8001654:	f005 ff61 	bl	800751a <HAL_UART_Transmit>
    
    // 进入无限循环等待复位 (生产环境中可考虑软复位)
    while(1) {
        HAL_Delay(1000);
 8001658:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800165c:	f003 fa94 	bl	8004b88 <HAL_Delay>
 8001660:	e7fa      	b.n	8001658 <System_ErrorHandler+0x50>
 8001662:	bf00      	nop
 8001664:	200005f8 	.word	0x200005f8
 8001668:	00000000 	.word	0x00000000
 800166c:	20000350 	.word	0x20000350
 8001670:	0800c334 	.word	0x0800c334
 8001674:	200002d0 	.word	0x200002d0

08001678 <__io_putchar>:
    
    HAL_UART_Transmit(&huart4, (uint8_t*)odo_msg, strlen(odo_msg), 100);
}

// 重定向 printf 到 USART2（调试输出）
int __io_putchar(int ch) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001680:	1d39      	adds	r1, r7, #4
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2201      	movs	r2, #1
 8001688:	4803      	ldr	r0, [pc, #12]	@ (8001698 <__io_putchar+0x20>)
 800168a:	f005 ff46 	bl	800751a <HAL_UART_Transmit>
    return ch;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000250 	.word	0x20000250

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	@ 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	2234      	movs	r2, #52	@ 0x34
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f007 ffc7 	bl	800963e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <SystemClock_Config+0xd0>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	4a28      	ldr	r2, [pc, #160]	@ (800176c <SystemClock_Config+0xd0>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d0:	4b26      	ldr	r3, [pc, #152]	@ (800176c <SystemClock_Config+0xd0>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <SystemClock_Config+0xd4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <SystemClock_Config+0xd4>)
 80016e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <SystemClock_Config+0xd4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001700:	2310      	movs	r3, #16
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001704:	2302      	movs	r3, #2
 8001706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800170c:	2308      	movs	r3, #8
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001710:	23a8      	movs	r3, #168	@ 0xa8
 8001712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001714:	2302      	movs	r3, #2
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001718:	2302      	movs	r3, #2
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800171c:	2302      	movs	r3, #2
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fd1d 	bl	8006164 <HAL_RCC_OscConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001730:	f000 fc80 	bl	8002034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001734:	230f      	movs	r3, #15
 8001736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	2302      	movs	r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	2105      	movs	r1, #5
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fa42 	bl	8005bdc <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800175e:	f000 fc69 	bl	8002034 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	@ 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000

08001774 <HAL_UART_RxCpltCallback>:
  * - 设置命令完成标志供主循环处理
  * - 自动重启接收下一个字节
  ******************************************************************************
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a95      	ldr	r2, [pc, #596]	@ (80019d8 <HAL_UART_RxCpltCallback+0x264>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d157      	bne.n	8001836 <HAL_UART_RxCpltCallback+0xc2>
        uint8_t received_byte = g_uart_rx_buffer;
 8001786:	4b95      	ldr	r3, [pc, #596]	@ (80019dc <HAL_UART_RxCpltCallback+0x268>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	767b      	strb	r3, [r7, #25]
        
        // 换行符表示命令结束
        if (received_byte == '\n') {
 800178c:	7e7b      	ldrb	r3, [r7, #25]
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d10d      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x3a>
            rx_command_buffer[rx_cmd_index] = '\0';  // 字符串结束符
 8001792:	4b93      	ldr	r3, [pc, #588]	@ (80019e0 <HAL_UART_RxCpltCallback+0x26c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b92      	ldr	r3, [pc, #584]	@ (80019e4 <HAL_UART_RxCpltCallback+0x270>)
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]
            rx_cmd_complete = 1;                      // 设置完成标志
 80017a0:	4b91      	ldr	r3, [pc, #580]	@ (80019e8 <HAL_UART_RxCpltCallback+0x274>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
            rx_cmd_index = 0;                         // 重置索引
 80017a6:	4b8e      	ldr	r3, [pc, #568]	@ (80019e0 <HAL_UART_RxCpltCallback+0x26c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e02b      	b.n	8001806 <HAL_UART_RxCpltCallback+0x92>
        }
        // 回车符忽略（Windows系统会发送\r\n）
        else if (received_byte == '\r') {
 80017ae:	7e7b      	ldrb	r3, [r7, #25]
 80017b0:	2b0d      	cmp	r3, #13
 80017b2:	d028      	beq.n	8001806 <HAL_UART_RxCpltCallback+0x92>
            // 跳过，等待\n
        }
        // 正常字符：存入缓冲区
        else if (rx_cmd_index < RX_BUFFER_SIZE - 1) {
 80017b4:	4b8a      	ldr	r3, [pc, #552]	@ (80019e0 <HAL_UART_RxCpltCallback+0x26c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2bff      	cmp	r3, #255	@ 0xff
 80017bc:	d00b      	beq.n	80017d6 <HAL_UART_RxCpltCallback+0x62>
            rx_command_buffer[rx_cmd_index++] = received_byte;
 80017be:	4b88      	ldr	r3, [pc, #544]	@ (80019e0 <HAL_UART_RxCpltCallback+0x26c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	b2d1      	uxtb	r1, r2
 80017c8:	4a85      	ldr	r2, [pc, #532]	@ (80019e0 <HAL_UART_RxCpltCallback+0x26c>)
 80017ca:	7011      	strb	r1, [r2, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4a85      	ldr	r2, [pc, #532]	@ (80019e4 <HAL_UART_RxCpltCallback+0x270>)
 80017d0:	7e7b      	ldrb	r3, [r7, #25]
 80017d2:	5453      	strb	r3, [r2, r1]
 80017d4:	e017      	b.n	8001806 <HAL_UART_RxCpltCallback+0x92>
        }
        // 缓冲区溢出保护 - 强制清空并报告
        else {
            // 发送警告
            const char* error_msg = "[ERROR] Buffer overflow - clearing\r\n";
 80017d6:	4b85      	ldr	r3, [pc, #532]	@ (80019ec <HAL_UART_RxCpltCallback+0x278>)
 80017d8:	617b      	str	r3, [r7, #20]
            HAL_UART_Transmit(&huart4, (uint8_t*)error_msg, strlen(error_msg), 100);
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7fe fd68 	bl	80002b0 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	2364      	movs	r3, #100	@ 0x64
 80017e6:	6979      	ldr	r1, [r7, #20]
 80017e8:	4881      	ldr	r0, [pc, #516]	@ (80019f0 <HAL_UART_RxCpltCallback+0x27c>)
 80017ea:	f005 fe96 	bl	800751a <HAL_UART_Transmit>
            
            // 强制清空缓冲区
            rx_cmd_index = 0;
 80017ee:	4b7c      	ldr	r3, [pc, #496]	@ (80019e0 <HAL_UART_RxCpltCallback+0x26c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
            rx_cmd_complete = 0;
 80017f4:	4b7c      	ldr	r3, [pc, #496]	@ (80019e8 <HAL_UART_RxCpltCallback+0x274>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
            memset(rx_command_buffer, 0, RX_BUFFER_SIZE);
 80017fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017fe:	2100      	movs	r1, #0
 8001800:	4878      	ldr	r0, [pc, #480]	@ (80019e4 <HAL_UART_RxCpltCallback+0x270>)
 8001802:	f007 ff1c 	bl	800963e <memset>
        }
        
        // ⭐ 关键修复：无论如何都要重启接收
        HAL_StatusTypeDef status = HAL_UART_Receive_IT(&huart4, &g_uart_rx_buffer, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	4974      	ldr	r1, [pc, #464]	@ (80019dc <HAL_UART_RxCpltCallback+0x268>)
 800180a:	4879      	ldr	r0, [pc, #484]	@ (80019f0 <HAL_UART_RxCpltCallback+0x27c>)
 800180c:	f005 ff1e 	bl	800764c <HAL_UART_Receive_IT>
 8001810:	4603      	mov	r3, r0
 8001812:	74fb      	strb	r3, [r7, #19]
        
        // 如果重启失败，发送错误消息（调试用）
        if (status != HAL_OK) {
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80da 	beq.w	80019d0 <HAL_UART_RxCpltCallback+0x25c>
            const char* error_msg = "[ERROR] UART RX restart failed\r\n";
 800181c:	4b75      	ldr	r3, [pc, #468]	@ (80019f4 <HAL_UART_RxCpltCallback+0x280>)
 800181e:	60fb      	str	r3, [r7, #12]
            HAL_UART_Transmit(&huart4, (uint8_t*)error_msg, strlen(error_msg), 100);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7fe fd45 	bl	80002b0 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	2364      	movs	r3, #100	@ 0x64
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	4870      	ldr	r0, [pc, #448]	@ (80019f0 <HAL_UART_RxCpltCallback+0x27c>)
 8001830:	f005 fe73 	bl	800751a <HAL_UART_Transmit>
        }

        // 重启接收
        HAL_UART_Receive_IT(&huart5, &g_uart5_rx_buffer, 1);
    }
}
 8001834:	e0cc      	b.n	80019d0 <HAL_UART_RxCpltCallback+0x25c>
    else if (huart->Instance == UART5) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6f      	ldr	r2, [pc, #444]	@ (80019f8 <HAL_UART_RxCpltCallback+0x284>)
 800183c:	4293      	cmp	r3, r2
 800183e:	f040 80c7 	bne.w	80019d0 <HAL_UART_RxCpltCallback+0x25c>
        uint8_t received_byte = g_uart5_rx_buffer;
 8001842:	4b6e      	ldr	r3, [pc, #440]	@ (80019fc <HAL_UART_RxCpltCallback+0x288>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	76fb      	strb	r3, [r7, #27]
        if (uart5_rx_index < UART5_RX_BUFFER_SIZE - 1) {
 8001848:	4b6d      	ldr	r3, [pc, #436]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001850:	f200 80b0 	bhi.w	80019b4 <HAL_UART_RxCpltCallback+0x240>
            uart5_rx_data[uart5_rx_index++] = received_byte;
 8001854:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	b291      	uxth	r1, r2
 800185e:	4a68      	ldr	r2, [pc, #416]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 8001860:	8011      	strh	r1, [r2, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4a67      	ldr	r2, [pc, #412]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 8001866:	7efb      	ldrb	r3, [r7, #27]
 8001868:	5453      	strb	r3, [r2, r1]
            if (!uart5_header_found) {
 800186a:	4b67      	ldr	r3, [pc, #412]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d13e      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0x17e>
                for (int i = 0; i <= uart5_rx_index - 2; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
 8001878:	e032      	b.n	80018e0 <HAL_UART_RxCpltCallback+0x16c>
                    if (uart5_rx_data[i] == 0x55 && uart5_rx_data[i + 1] == 0x53) {
 800187a:	4a62      	ldr	r2, [pc, #392]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b55      	cmp	r3, #85	@ 0x55
 8001884:	d129      	bne.n	80018da <HAL_UART_RxCpltCallback+0x166>
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	2b53      	cmp	r3, #83	@ 0x53
 8001890:	d123      	bne.n	80018da <HAL_UART_RxCpltCallback+0x166>
                        uart5_header_found = 1;
 8001892:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
                        uart5_packet_start = i;
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b5b      	ldr	r3, [pc, #364]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 800189e:	801a      	strh	r2, [r3, #0]
                        if (i > 0) {
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dd24      	ble.n	80018f0 <HAL_UART_RxCpltCallback+0x17c>
                            memmove(uart5_rx_data, &uart5_rx_data[i], uart5_rx_index - i);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	4a56      	ldr	r2, [pc, #344]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 80018aa:	1899      	adds	r1, r3, r2
 80018ac:	4b54      	ldr	r3, [pc, #336]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4852      	ldr	r0, [pc, #328]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 80018bc:	f007 fea5 	bl	800960a <memmove>
                            uart5_rx_index = uart5_rx_index - i;
 80018c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80018d0:	801a      	strh	r2, [r3, #0]
                            uart5_packet_start = 0;
 80018d2:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	801a      	strh	r2, [r3, #0]
                        break;
 80018d8:	e00a      	b.n	80018f0 <HAL_UART_RxCpltCallback+0x17c>
                for (int i = 0; i <= uart5_rx_index - 2; i++) {
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e0:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbc5      	blt.n	800187a <HAL_UART_RxCpltCallback+0x106>
 80018ee:	e000      	b.n	80018f2 <HAL_UART_RxCpltCallback+0x17e>
                        break;
 80018f0:	bf00      	nop
            if (uart5_header_found && (uart5_rx_index - uart5_packet_start) >= 11) {
 80018f2:	4b45      	ldr	r3, [pc, #276]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d04f      	beq.n	800199c <HAL_UART_RxCpltCallback+0x228>
 80018fc:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b0a      	cmp	r3, #10
 800190e:	dd45      	ble.n	800199c <HAL_UART_RxCpltCallback+0x228>
                if (uart5_rx_data[uart5_packet_start] == 0x55 &&
 8001910:	4b3e      	ldr	r3, [pc, #248]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	4b3a      	ldr	r3, [pc, #232]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 800191a:	5c9b      	ldrb	r3, [r3, r2]
 800191c:	2b55      	cmp	r3, #85	@ 0x55
 800191e:	d137      	bne.n	8001990 <HAL_UART_RxCpltCallback+0x21c>
                    uart5_rx_data[uart5_packet_start + 1] == 0x53) {
 8001920:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	4a36      	ldr	r2, [pc, #216]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
                if (uart5_rx_data[uart5_packet_start] == 0x55 &&
 800192c:	2b53      	cmp	r3, #83	@ 0x53
 800192e:	d12f      	bne.n	8001990 <HAL_UART_RxCpltCallback+0x21c>
                    uint8_t calculated_sum = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    for (int i = 0; i < 10; i++) {  // 前10个字节
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	e00f      	b.n	800195c <HAL_UART_RxCpltCallback+0x1e8>
                        calculated_sum += uart5_rx_data[uart5_packet_start + i];
 800193c:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	4a2e      	ldr	r2, [pc, #184]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 800194a:	5cd2      	ldrb	r2, [r2, r3]
 800194c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001950:	4413      	add	r3, r2
 8001952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    for (int i = 0; i < 10; i++) {  // 前10个字节
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b09      	cmp	r3, #9
 8001960:	ddec      	ble.n	800193c <HAL_UART_RxCpltCallback+0x1c8>
                    uint8_t received_sum = uart5_rx_data[uart5_packet_start + 10];
 8001962:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	330a      	adds	r3, #10
 800196a:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <HAL_UART_RxCpltCallback+0x290>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	76bb      	strb	r3, [r7, #26]
                    if (calculated_sum == received_sum) {
 8001970:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001974:	7ebb      	ldrb	r3, [r7, #26]
 8001976:	429a      	cmp	r2, r3
 8001978:	d103      	bne.n	8001982 <HAL_UART_RxCpltCallback+0x20e>
                        uart5_packet_ready = 1;  // 设置数据包接收完成标志
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <HAL_UART_RxCpltCallback+0x29c>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
                    uart5_rx_data[uart5_packet_start + 1] == 0x53) {
 8001980:	e00c      	b.n	800199c <HAL_UART_RxCpltCallback+0x228>
                        uart5_header_found = 0;
 8001982:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
                        uart5_rx_index = 0;
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 800198a:	2200      	movs	r2, #0
 800198c:	801a      	strh	r2, [r3, #0]
                    uart5_rx_data[uart5_packet_start + 1] == 0x53) {
 800198e:	e005      	b.n	800199c <HAL_UART_RxCpltCallback+0x228>
                    uart5_header_found = 0;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
                    uart5_rx_index = 0;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 8001998:	2200      	movs	r2, #0
 800199a:	801a      	strh	r2, [r3, #0]
            if (uart5_rx_index >= UART5_RX_BUFFER_SIZE - 5) {
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80019a4:	d90f      	bls.n	80019c6 <HAL_UART_RxCpltCallback+0x252>
                uart5_header_found = 0;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
                uart5_rx_index = 0;
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	e008      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x252>
            uart5_rx_index = 0;
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_UART_RxCpltCallback+0x28c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	801a      	strh	r2, [r3, #0]
            uart5_header_found = 0;
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <HAL_UART_RxCpltCallback+0x294>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
            uart5_packet_start = 0;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_UART_RxCpltCallback+0x298>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	801a      	strh	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart5, &g_uart5_rx_buffer, 1);
 80019c6:	2201      	movs	r2, #1
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <HAL_UART_RxCpltCallback+0x288>)
 80019ca:	4812      	ldr	r0, [pc, #72]	@ (8001a14 <HAL_UART_RxCpltCallback+0x2a0>)
 80019cc:	f005 fe3e 	bl	800764c <HAL_UART_Receive_IT>
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40004c00 	.word	0x40004c00
 80019dc:	200004a4 	.word	0x200004a4
 80019e0:	200005a8 	.word	0x200005a8
 80019e4:	200004a8 	.word	0x200004a8
 80019e8:	200005a9 	.word	0x200005a9
 80019ec:	0800c388 	.word	0x0800c388
 80019f0:	200002d0 	.word	0x200002d0
 80019f4:	0800c3b0 	.word	0x0800c3b0
 80019f8:	40005000 	.word	0x40005000
 80019fc:	200004a5 	.word	0x200004a5
 8001a00:	200005ec 	.word	0x200005ec
 8001a04:	200005ac 	.word	0x200005ac
 8001a08:	200005ef 	.word	0x200005ef
 8001a0c:	200005f0 	.word	0x200005f0
 8001a10:	200005ee 	.word	0x200005ee
 8001a14:	20000310 	.word	0x20000310

08001a18 <HAL_UART_ErrorCallback>:
/**
 * @brief UART错误回调函数
 * @note 阶段1新增：处理UART错误，自动恢复
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <HAL_UART_ErrorCallback+0x80>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d119      	bne.n	8001a5e <HAL_UART_ErrorCallback+0x46>
        // 发送错误消息
        const char* error_msg = "[ERROR] UART4 error occurred - recovering\r\n";
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <HAL_UART_ErrorCallback+0x84>)
 8001a2c:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart4, (uint8_t*)error_msg, strlen(error_msg), 100);
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7fe fc3e 	bl	80002b0 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	2364      	movs	r3, #100	@ 0x64
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	4818      	ldr	r0, [pc, #96]	@ (8001aa0 <HAL_UART_ErrorCallback+0x88>)
 8001a3e:	f005 fd6c 	bl	800751a <HAL_UART_Transmit>
        
        // 清除错误标志（STM32F4兼容版本）
        __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_PE | UART_FLAG_FE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f06f 020f 	mvn.w	r2, #15
 8001a4a:	601a      	str	r2, [r3, #0]
        
        // 清除错误状态
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	63da      	str	r2, [r3, #60]	@ 0x3c
        
        // 重新启动接收
        HAL_UART_Receive_IT(&huart4, &g_uart_rx_buffer, 1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	4913      	ldr	r1, [pc, #76]	@ (8001aa4 <HAL_UART_ErrorCallback+0x8c>)
 8001a56:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <HAL_UART_ErrorCallback+0x88>)
 8001a58:	f005 fdf8 	bl	800764c <HAL_UART_Receive_IT>
        uart5_packet_ready = 0;

        // 重新启动接收
        HAL_UART_Receive_IT(&huart5, &g_uart5_rx_buffer, 1);
    }
}
 8001a5c:	e017      	b.n	8001a8e <HAL_UART_ErrorCallback+0x76>
    else if (huart->Instance == UART5) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_UART_ErrorCallback+0x90>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d112      	bne.n	8001a8e <HAL_UART_ErrorCallback+0x76>
        __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_PE | UART_FLAG_FE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 020f 	mvn.w	r2, #15
 8001a70:	601a      	str	r2, [r3, #0]
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	63da      	str	r2, [r3, #60]	@ 0x3c
        uart5_rx_index = 0;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <HAL_UART_ErrorCallback+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	801a      	strh	r2, [r3, #0]
        uart5_packet_ready = 0;
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_UART_ErrorCallback+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart5, &g_uart5_rx_buffer, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	490b      	ldr	r1, [pc, #44]	@ (8001ab4 <HAL_UART_ErrorCallback+0x9c>)
 8001a88:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <HAL_UART_ErrorCallback+0xa0>)
 8001a8a:	f005 fddf 	bl	800764c <HAL_UART_Receive_IT>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40004c00 	.word	0x40004c00
 8001a9c:	0800c3d4 	.word	0x0800c3d4
 8001aa0:	200002d0 	.word	0x200002d0
 8001aa4:	200004a4 	.word	0x200004a4
 8001aa8:	40005000 	.word	0x40005000
 8001aac:	200005ec 	.word	0x200005ec
 8001ab0:	200005ee 	.word	0x200005ee
 8001ab4:	200004a5 	.word	0x200004a5
 8001ab8:	20000310 	.word	0x20000310

08001abc <Python_ParseCommand>:
  * 
  * 此函数在主循环中被周期性调用，检查是否有完整命令待处理
  ******************************************************************************
  */
static void Python_ParseCommand(void)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b0f9      	sub	sp, #484	@ 0x1e4
 8001ac0:	af02      	add	r7, sp, #8
    // 检查是否有完整命令
    if (!rx_cmd_complete) {
 8001ac2:	4bd8      	ldr	r3, [pc, #864]	@ (8001e24 <Python_ParseCommand+0x368>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 81f4 	beq.w	8001eb6 <Python_ParseCommand+0x3fa>
    
    // 通信看门狗已移除
    
    // 打印接收到的命令（调试用）- 立即反馈给Python端
    char debug_msg[128];
    snprintf(debug_msg, sizeof(debug_msg), "[Python CMD] Received: %s\r\n", rx_command_buffer);
 8001ace:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 8001ad2:	4bd5      	ldr	r3, [pc, #852]	@ (8001e28 <Python_ParseCommand+0x36c>)
 8001ad4:	4ad5      	ldr	r2, [pc, #852]	@ (8001e2c <Python_ParseCommand+0x370>)
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	f007 fd1e 	bl	8009518 <sniprintf>
    HAL_UART_Transmit(&huart4, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8001adc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fbe5 	bl	80002b0 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	f507 71a2 	add.w	r1, r7, #324	@ 0x144
 8001aee:	2364      	movs	r3, #100	@ 0x64
 8001af0:	48cf      	ldr	r0, [pc, #828]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001af2:	f005 fd12 	bl	800751a <HAL_UART_Transmit>
    
    // 阶段1验证：发送确认消息（确保Python端能看到）
    const char* ack_msg = "ACK\r\n";
 8001af6:	4bcf      	ldr	r3, [pc, #828]	@ (8001e34 <Python_ParseCommand+0x378>)
 8001af8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    HAL_UART_Transmit(&huart4, (uint8_t*)ack_msg, strlen(ack_msg), 100);
 8001afc:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8001b00:	f7fe fbd6 	bl	80002b0 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	2364      	movs	r3, #100	@ 0x64
 8001b0a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8001b0e:	48c8      	ldr	r0, [pc, #800]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001b10:	f005 fd03 	bl	800751a <HAL_UART_Transmit>
    
    // ========== CMD命令解析（带序列号，阶段3） ==========
    if (strncmp(rx_command_buffer, "CMD,", 4) == 0) {
 8001b14:	2204      	movs	r2, #4
 8001b16:	49c8      	ldr	r1, [pc, #800]	@ (8001e38 <Python_ParseCommand+0x37c>)
 8001b18:	48c3      	ldr	r0, [pc, #780]	@ (8001e28 <Python_ParseCommand+0x36c>)
 8001b1a:	f007 fda5 	bl	8009668 <strncmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 81b5 	bne.w	8001e90 <Python_ParseCommand+0x3d4>
        uint16_t seq = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8a7 31ca 	strh.w	r3, [r7, #458]	@ 0x1ca
        uint8_t mode = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
        
        // 调试：显示接收到的原始命令
        char raw_debug[128];
        snprintf(raw_debug, sizeof(raw_debug), 
 8001b32:	48bd      	ldr	r0, [pc, #756]	@ (8001e28 <Python_ParseCommand+0x36c>)
 8001b34:	f7fe fbbc 	bl	80002b0 <strlen>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4bb9      	ldr	r3, [pc, #740]	@ (8001e28 <Python_ParseCommand+0x36c>)
 8001b42:	4abe      	ldr	r2, [pc, #760]	@ (8001e3c <Python_ParseCommand+0x380>)
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	f007 fce7 	bl	8009518 <sniprintf>
                "[DEBUG] Raw buffer: '%s' (len=%d)\r\n", rx_command_buffer, strlen(rx_command_buffer));
        HAL_UART_Transmit(&huart4, (uint8_t*)raw_debug, strlen(raw_debug), 100);
 8001b4a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbae 	bl	80002b0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001b5c:	2364      	movs	r3, #100	@ 0x64
 8001b5e:	48b4      	ldr	r0, [pc, #720]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001b60:	f005 fcdb 	bl	800751a <HAL_UART_Transmit>
        
        // ⭐ 手动解析（避免sscanf问题）
        char *ptr = rx_command_buffer + 4;  // 跳过"CMD,"
 8001b64:	4bb6      	ldr	r3, [pc, #728]	@ (8001e40 <Python_ParseCommand+0x384>)
 8001b66:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4

        // 解析seq
        seq = (uint16_t)atoi(ptr);
 8001b6a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8001b6e:	f006 ff33 	bl	80089d8 <atoi>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f8a7 31ca 	strh.w	r3, [r7, #458]	@ 0x1ca

        // 跳到下一个逗号
        ptr = strchr(ptr, ',');
 8001b78:	212c      	movs	r1, #44	@ 0x2c
 8001b7a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8001b7e:	f007 fd66 	bl	800964e <strchr>
 8001b82:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
        if (ptr != NULL) {
 8001b86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <Python_ParseCommand+0xea>
            ptr++;  // 跳过逗号
 8001b8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001b92:	3301      	adds	r3, #1
 8001b94:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            mode = (uint8_t)atoi(ptr);
 8001b98:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8001b9c:	f006 ff1c 	bl	80089d8 <atoi>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
        }
        
        // 调试：显示解析结果
        char parse_debug[80];
        snprintf(parse_debug, sizeof(parse_debug), 
 8001ba6:	f8b7 21ca 	ldrh.w	r2, [r7, #458]	@ 0x1ca
 8001baa:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8001bae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	4aa3      	ldr	r2, [pc, #652]	@ (8001e44 <Python_ParseCommand+0x388>)
 8001bb8:	2150      	movs	r1, #80	@ 0x50
 8001bba:	f007 fcad 	bl	8009518 <sniprintf>
                "[DEBUG] Manual parse: seq=%u mode=%u\r\n", seq, mode);
        HAL_UART_Transmit(&huart4, (uint8_t*)parse_debug, strlen(parse_debug), 100);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fb74 	bl	80002b0 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001bd0:	2364      	movs	r3, #100	@ 0x64
 8001bd2:	4897      	ldr	r0, [pc, #604]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001bd4:	f005 fca1 	bl	800751a <HAL_UART_Transmit>
        
        // 重复命令检测
        if (seq == g_last_command_seq && g_action_in_progress) {
 8001bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e48 <Python_ParseCommand+0x38c>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f8b7 21ca 	ldrh.w	r2, [r7, #458]	@ 0x1ca
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d11f      	bne.n	8001c24 <Python_ParseCommand+0x168>
 8001be4:	4b99      	ldr	r3, [pc, #612]	@ (8001e4c <Python_ParseCommand+0x390>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <Python_ParseCommand+0x168>
            char warn[64];
            snprintf(warn, sizeof(warn), "[WARN] Duplicate CMD seq=%u, ignored\r\n", seq);
 8001bec:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	@ 0x1ca
 8001bf0:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001bf4:	4a96      	ldr	r2, [pc, #600]	@ (8001e50 <Python_ParseCommand+0x394>)
 8001bf6:	2140      	movs	r1, #64	@ 0x40
 8001bf8:	f007 fc8e 	bl	8009518 <sniprintf>
            HAL_UART_Transmit(&huart4, (uint8_t*)warn, strlen(warn), 100);
 8001bfc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fb55 	bl	80002b0 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001c0e:	2364      	movs	r3, #100	@ 0x64
 8001c10:	4887      	ldr	r0, [pc, #540]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001c12:	f005 fc82 	bl	800751a <HAL_UART_Transmit>
            
            // 清除命令标志
            rx_cmd_complete = 0;
 8001c16:	4b83      	ldr	r3, [pc, #524]	@ (8001e24 <Python_ParseCommand+0x368>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
            rx_cmd_index = 0;
 8001c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e54 <Python_ParseCommand+0x398>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e149      	b.n	8001eb8 <Python_ParseCommand+0x3fc>
            return;
        }

        // 更新序列号和动作状态
        g_last_command_seq = seq;
 8001c24:	4a88      	ldr	r2, [pc, #544]	@ (8001e48 <Python_ParseCommand+0x38c>)
 8001c26:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	@ 0x1ca
 8001c2a:	8013      	strh	r3, [r2, #0]
        g_action_in_progress = 1;
 8001c2c:	4b87      	ldr	r3, [pc, #540]	@ (8001e4c <Python_ParseCommand+0x390>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
        g_action_start_time = HAL_GetTick();
 8001c32:	f002 ff9d 	bl	8004b70 <HAL_GetTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a87      	ldr	r2, [pc, #540]	@ (8001e58 <Python_ParseCommand+0x39c>)
 8001c3a:	6013      	str	r3, [r2, #0]

        char response[80];
        snprintf(response, sizeof(response), "[CMD] seq=%u mode=%u -> ", seq, mode);
 8001c3c:	f8b7 21ca 	ldrh.w	r2, [r7, #458]	@ 0x1ca
 8001c40:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8001c44:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	4a83      	ldr	r2, [pc, #524]	@ (8001e5c <Python_ParseCommand+0x3a0>)
 8001c4e:	2150      	movs	r1, #80	@ 0x50
 8001c50:	f007 fc62 	bl	8009518 <sniprintf>

            // 执行新的Motor_Command API
            switch(mode) {
 8001c54:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	f200 80b9 	bhi.w	8001dd0 <Python_ParseCommand+0x314>
 8001c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c64 <Python_ParseCommand+0x1a8>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c79 	.word	0x08001c79
 8001c68:	08001ce9 	.word	0x08001ce9
 8001c6c:	08001d23 	.word	0x08001d23
 8001c70:	08001d5d 	.word	0x08001d5d
 8001c74:	08001d97 	.word	0x08001d97
                case 0:  // 停止
                    Motor_SetSpeed(&htim1, MOTOR_LEFT, 0.0f);
 8001c78:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8001e60 <Python_ParseCommand+0x3a4>
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4879      	ldr	r0, [pc, #484]	@ (8001e64 <Python_ParseCommand+0x3a8>)
 8001c80:	f001 fb2c 	bl	80032dc <Motor_SetSpeed>
                    Motor_SetSpeed(&htim1, MOTOR_RIGHT, 0.0f);
 8001c84:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8001e60 <Python_ParseCommand+0x3a4>
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4876      	ldr	r0, [pc, #472]	@ (8001e64 <Python_ParseCommand+0x3a8>)
 8001c8c:	f001 fb26 	bl	80032dc <Motor_SetSpeed>
                    snprintf(response + strlen(response), sizeof(response) - strlen(response), "STOP\r\n");
 8001c90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fb0b 	bl	80002b0 <strlen>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ca0:	189c      	adds	r4, r3, r2
 8001ca2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fb02 	bl	80002b0 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8001e68 <Python_ParseCommand+0x3ac>)
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f007 fc2e 	bl	8009518 <sniprintf>
                    
                    // 停止命令立即完成
                    g_action_in_progress = 0;
 8001cbc:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <Python_ParseCommand+0x390>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
                    char stop_ack[32];
                    snprintf(stop_ack, sizeof(stop_ack), "ACK,%u\r\n", seq);
 8001cc2:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	@ 0x1ca
 8001cc6:	1d38      	adds	r0, r7, #4
 8001cc8:	4a68      	ldr	r2, [pc, #416]	@ (8001e6c <Python_ParseCommand+0x3b0>)
 8001cca:	2120      	movs	r1, #32
 8001ccc:	f007 fc24 	bl	8009518 <sniprintf>
                    HAL_UART_Transmit(&huart4, (uint8_t*)stop_ack, strlen(stop_ack), 100);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe faec 	bl	80002b0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	1d39      	adds	r1, r7, #4
 8001cde:	2364      	movs	r3, #100	@ 0x64
 8001ce0:	4853      	ldr	r0, [pc, #332]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001ce2:	f005 fc1a 	bl	800751a <HAL_UART_Transmit>
                    break;
 8001ce6:	e08e      	b.n	8001e06 <Python_ParseCommand+0x34a>
                
                case 1:  // PID前进 600mm
                    Motor_Command_MoveForward(60.0f, 30000);  // 前进600mm，超时30秒
 8001ce8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001cec:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8001e70 <Python_ParseCommand+0x3b4>
 8001cf0:	f001 fefa 	bl	8003ae8 <Motor_Command_MoveForward>
                    snprintf(response + strlen(response), sizeof(response) - strlen(response), 
 8001cf4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fad9 	bl	80002b0 <strlen>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d04:	189c      	adds	r4, r3, r2
 8001d06:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fad0 	bl	80002b0 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001d16:	4a57      	ldr	r2, [pc, #348]	@ (8001e74 <Python_ParseCommand+0x3b8>)
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f007 fbfc 	bl	8009518 <sniprintf>
                            "FORWARD 600mm started\r\n");
                    break;
 8001d20:	e071      	b.n	8001e06 <Python_ParseCommand+0x34a>
                
                case 2:  // PID后退 600mm
                    Motor_Command_MoveForward(-60.0f, 30000);  // 后退600mm，超时30秒
 8001d22:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001d26:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8001e78 <Python_ParseCommand+0x3bc>
 8001d2a:	f001 fedd 	bl	8003ae8 <Motor_Command_MoveForward>
                    snprintf(response + strlen(response), sizeof(response) - strlen(response), 
 8001d2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fabc 	bl	80002b0 <strlen>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d3e:	189c      	adds	r4, r3, r2
 8001d40:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fab3 	bl	80002b0 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001d50:	4a4a      	ldr	r2, [pc, #296]	@ (8001e7c <Python_ParseCommand+0x3c0>)
 8001d52:	4619      	mov	r1, r3
 8001d54:	4620      	mov	r0, r4
 8001d56:	f007 fbdf 	bl	8009518 <sniprintf>
                            "BACKWARD 600mm started\r\n");
                    break;
 8001d5a:	e054      	b.n	8001e06 <Python_ParseCommand+0x34a>
                
                case 3:  // 左转90度
                    Motor_Command_TurnLeft(90.0f, 10000);  // 左转90度，超时10秒
 8001d5c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001d60:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8001e80 <Python_ParseCommand+0x3c4>
 8001d64:	f001 fee4 	bl	8003b30 <Motor_Command_TurnLeft>
                    snprintf(response + strlen(response), sizeof(response) - strlen(response), 
 8001d68:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa9f 	bl	80002b0 <strlen>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d78:	189c      	adds	r4, r3, r2
 8001d7a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa96 	bl	80002b0 <strlen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e84 <Python_ParseCommand+0x3c8>)
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f007 fbc2 	bl	8009518 <sniprintf>
                            "TURN_LEFT 90deg started\r\n");
                    break;
 8001d94:	e037      	b.n	8001e06 <Python_ParseCommand+0x34a>
                
                case 4:  // 右转90度
                    Motor_Command_TurnRight(90.0f, 10000);  // 右转90度，超时10秒
 8001d96:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001d9a:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001e80 <Python_ParseCommand+0x3c4>
 8001d9e:	f001 ff17 	bl	8003bd0 <Motor_Command_TurnRight>
                    snprintf(response + strlen(response), sizeof(response) - strlen(response), 
 8001da2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa82 	bl	80002b0 <strlen>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001db2:	189c      	adds	r4, r3, r2
 8001db4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fa79 	bl	80002b0 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001dc4:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <Python_ParseCommand+0x3cc>)
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f007 fba5 	bl	8009518 <sniprintf>
                            "TURN_RIGHT 90deg started\r\n");
                    break;
 8001dce:	e01a      	b.n	8001e06 <Python_ParseCommand+0x34a>
                
                default:
                    snprintf(response + strlen(response), sizeof(response) - strlen(response),
 8001dd0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa6b 	bl	80002b0 <strlen>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001de0:	189c      	adds	r4, r3, r2
 8001de2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fa62 	bl	80002b0 <strlen>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f1c3 0150 	rsb	r1, r3, #80	@ 0x50
 8001df2:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8001df6:	4a25      	ldr	r2, [pc, #148]	@ (8001e8c <Python_ParseCommand+0x3d0>)
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f007 fb8d 	bl	8009518 <sniprintf>
                            "Unknown mode: %u\r\n", mode);
                    g_action_in_progress = 0;  // 无效命令不算动作
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <Python_ParseCommand+0x390>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
                    break;
 8001e04:	bf00      	nop
            }
            
            HAL_UART_Transmit(&huart4, (uint8_t*)response, strlen(response), 100);
 8001e06:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fa50 	bl	80002b0 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001e18:	2364      	movs	r3, #100	@ 0x64
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <Python_ParseCommand+0x374>)
 8001e1c:	f005 fb7d 	bl	800751a <HAL_UART_Transmit>
 8001e20:	e045      	b.n	8001eae <Python_ParseCommand+0x3f2>
 8001e22:	bf00      	nop
 8001e24:	200005a9 	.word	0x200005a9
 8001e28:	200004a8 	.word	0x200004a8
 8001e2c:	0800c400 	.word	0x0800c400
 8001e30:	200002d0 	.word	0x200002d0
 8001e34:	0800c41c 	.word	0x0800c41c
 8001e38:	0800c424 	.word	0x0800c424
 8001e3c:	0800c42c 	.word	0x0800c42c
 8001e40:	200004ac 	.word	0x200004ac
 8001e44:	0800c450 	.word	0x0800c450
 8001e48:	200005fa 	.word	0x200005fa
 8001e4c:	200005fc 	.word	0x200005fc
 8001e50:	0800c478 	.word	0x0800c478
 8001e54:	200005a8 	.word	0x200005a8
 8001e58:	20000600 	.word	0x20000600
 8001e5c:	0800c4a0 	.word	0x0800c4a0
 8001e60:	00000000 	.word	0x00000000
 8001e64:	20000350 	.word	0x20000350
 8001e68:	0800c4bc 	.word	0x0800c4bc
 8001e6c:	0800c4c4 	.word	0x0800c4c4
 8001e70:	42700000 	.word	0x42700000
 8001e74:	0800c4d0 	.word	0x0800c4d0
 8001e78:	c2700000 	.word	0xc2700000
 8001e7c:	0800c4e8 	.word	0x0800c4e8
 8001e80:	42b40000 	.word	0x42b40000
 8001e84:	0800c504 	.word	0x0800c504
 8001e88:	0800c520 	.word	0x0800c520
 8001e8c:	0800c53c 	.word	0x0800c53c
        }
        else {
            const char* error = "[ERROR] CMD parse failed\r\n";
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <Python_ParseCommand+0x404>)
 8001e92:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
            HAL_UART_Transmit(&huart4, (uint8_t*)error, strlen(error), 100);
 8001e96:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8001e9a:	f7fe fa09 	bl	80002b0 <strlen>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	2364      	movs	r3, #100	@ 0x64
 8001ea4:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8001ea8:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <Python_ParseCommand+0x408>)
 8001eaa:	f005 fb36 	bl	800751a <HAL_UART_Transmit>
//                "[Python CMD] Unknown command: %s\r\n", rx_command_buffer);
//        HAL_UART_Transmit(&huart4, (uint8_t*)error_msg, strlen(error_msg), 100);
//    }
    
    // 清除完成标志，准备接收下一个命令
    rx_cmd_complete = 0;
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <Python_ParseCommand+0x40c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e000      	b.n	8001eb8 <Python_ParseCommand+0x3fc>
        return;
 8001eb6:	bf00      	nop
}
 8001eb8:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	0800c550 	.word	0x0800c550
 8001ec4:	200002d0 	.word	0x200002d0
 8001ec8:	200005a9 	.word	0x200005a9

08001ecc <UART5_ProcessSensorData>:
  * @details
  * 检查是否有完整的数据包需要处理，如果有则调用解析函数
  ******************************************************************************
  */
static void UART5_ProcessSensorData(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    if (uart5_packet_ready) {
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <UART5_ProcessSensorData+0x40>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <UART5_ProcessSensorData+0x3a>
        // 解析数据包（从包头开始的位置）
        UART5_ParseDataPacket(&uart5_rx_data[uart5_packet_start], 11);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <UART5_ProcessSensorData+0x44>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <UART5_ProcessSensorData+0x48>)
 8001ee4:	4413      	add	r3, r2
 8001ee6:	210b      	movs	r1, #11
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f819 	bl	8001f20 <UART5_ParseDataPacket>

        // 重置状态
        uart5_packet_ready = 0;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <UART5_ProcessSensorData+0x40>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
        uart5_header_found = 0;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <UART5_ProcessSensorData+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
        uart5_rx_index = 0;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <UART5_ProcessSensorData+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
        uart5_packet_start = 0;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <UART5_ProcessSensorData+0x44>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	801a      	strh	r2, [r3, #0]
    }
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200005ee 	.word	0x200005ee
 8001f10:	200005f0 	.word	0x200005f0
 8001f14:	200005ac 	.word	0x200005ac
 8001f18:	200005ef 	.word	0x200005ef
 8001f1c:	200005ec 	.word	0x200005ec

08001f20 <UART5_ParseDataPacket>:
  * 校验和：SUM = 0x55 + 0x53 + RollH + RollL + PitchH + PitchL + YawH + YawL + VH + VL
  * 偏航角：Z = ((YawH<<8)|YawL)/32768*180(°)
  ******************************************************************************
  */
static void UART5_ParseDataPacket(uint8_t* data, uint16_t length)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09c      	sub	sp, #112	@ 0x70
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
    // 检查数据包长度和包头
    if (length < 11 || data[0] != 0x55 || data[1] != 0x53) {
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	2b0a      	cmp	r3, #10
 8001f30:	d96f      	bls.n	8002012 <UART5_ParseDataPacket+0xf2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b55      	cmp	r3, #85	@ 0x55
 8001f38:	d16b      	bne.n	8002012 <UART5_ParseDataPacket+0xf2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b53      	cmp	r3, #83	@ 0x53
 8001f42:	d166      	bne.n	8002012 <UART5_ParseDataPacket+0xf2>
        return;  // 不是我们要处理的数据包
    }

    // 计算校验和
    uint8_t calculated_sum = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    for (int i = 0; i < 10; i++) {  // 前10个字节
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f4e:	e00b      	b.n	8001f68 <UART5_ParseDataPacket+0x48>
        calculated_sum += data[i];
 8001f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    for (int i = 0; i < 10; i++) {  // 前10个字节
 8001f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f64:	3301      	adds	r3, #1
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f6a:	2b09      	cmp	r3, #9
 8001f6c:	ddf0      	ble.n	8001f50 <UART5_ParseDataPacket+0x30>
    }
    uint8_t received_sum = data[10];
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7a9b      	ldrb	r3, [r3, #10]
 8001f72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

    // 校验和验证
    if (calculated_sum != received_sum) {
 8001f76:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d019      	beq.n	8001fb6 <UART5_ParseDataPacket+0x96>
        char error_msg[80];
        snprintf(error_msg, sizeof(error_msg),
 8001f82:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001f86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f8a:	f107 000c 	add.w	r0, r7, #12
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	4a22      	ldr	r2, [pc, #136]	@ (800201c <UART5_ParseDataPacket+0xfc>)
 8001f94:	2150      	movs	r1, #80	@ 0x50
 8001f96:	f007 fabf 	bl	8009518 <sniprintf>
                "[UART5] Checksum error: calc=0x%02X, recv=0x%02X\r\n",
                calculated_sum, received_sum);
        HAL_UART_Transmit(&huart4, (uint8_t*)error_msg, strlen(error_msg), 100);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f986 	bl	80002b0 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	f107 010c 	add.w	r1, r7, #12
 8001fac:	2364      	movs	r3, #100	@ 0x64
 8001fae:	481c      	ldr	r0, [pc, #112]	@ (8002020 <UART5_ParseDataPacket+0x100>)
 8001fb0:	f005 fab3 	bl	800751a <HAL_UART_Transmit>
 8001fb4:	e02e      	b.n	8002014 <UART5_ParseDataPacket+0xf4>
        return;
    }

    // 提取YawL和YawH数据（索引6和7）
    uint8_t yaw_l = data[6];  // YawL
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t yaw_h = data[7];  // YawH
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	79db      	ldrb	r3, [r3, #7]
 8001fc2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

    // 拼接成16位数据（小端序：低字节在前）
    g_yaw_data = (int16_t)((yaw_h << 8) | yaw_l);
 8001fc6:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <UART5_ParseDataPacket+0x104>)
 8001fdc:	801a      	strh	r2, [r3, #0]

    // 计算偏航角：Z = ((YawH<<8)|YawL)/32768*180(°)
    g_yaw_angle = (float)g_yaw_data / 32768.0f * 180.0f;
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <UART5_ParseDataPacket+0x104>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002028 <UART5_ParseDataPacket+0x108>
 8001ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800202c <UART5_ParseDataPacket+0x10c>
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <UART5_ParseDataPacket+0x110>)
 8001ffe:	edc3 7a00 	vstr	s15, [r3]

    // 更新电机控制模块的偏航角数据
   Motor_UpdateYawAngle(g_yaw_angle);
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <UART5_ParseDataPacket+0x110>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f001 f852 	bl	80030b4 <Motor_UpdateYawAngle>
 8002010:	e000      	b.n	8002014 <UART5_ParseDataPacket+0xf4>
        return;  // 不是我们要处理的数据包
 8002012:	bf00      	nop
//    char debug_msg[120];
//    snprintf(debug_msg, sizeof(debug_msg),
//            "[UART5] Yaw: %d (0x%04X), Angle: %.2f°\r\n",
//            g_yaw_data, (unsigned int)g_yaw_data, g_yaw_angle);
//    HAL_UART_Transmit(&huart4, (uint8_t*)debug_msg, strlen(debug_msg), 100);
}
 8002014:	3768      	adds	r7, #104	@ 0x68
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	0800c56c 	.word	0x0800c56c
 8002020:	200002d0 	.word	0x200002d0
 8002024:	200005f2 	.word	0x200005f2
 8002028:	47000000 	.word	0x47000000
 800202c:	43340000 	.word	0x43340000
 8002030:	200005f4 	.word	0x200005f4

08002034 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <Error_Handler+0x8>

08002040 <MX_SPI1_Init>:
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
 8002044:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002046:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <MX_SPI1_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <MX_SPI1_Init+0x64>)
 800204c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <MX_SPI1_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <MX_SPI1_Init+0x64>)
 800206c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <MX_SPI1_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_SPI1_Init+0x64>)
 800208c:	220a      	movs	r2, #10
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002090:	4804      	ldr	r0, [pc, #16]	@ (80020a4 <MX_SPI1_Init+0x64>)
 8002092:	f004 fac1 	bl	8006618 <HAL_SPI_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_SPI1_Init+0x60>
 800209c:	f7ff ffca 	bl	8002034 <Error_Handler>
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20001d78 	.word	0x20001d78
 80020a8:	40013000 	.word	0x40013000

080020ac <HAL_SPI_MspInit>:
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_SPI_MspInit+0x84>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_SPI_MspInit+0x7a>
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a10      	ldr	r2, [pc, #64]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	23e0      	movs	r3, #224	@ 0xe0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	@ (8002138 <HAL_SPI_MspInit+0x8c>)
 8002122:	f003 fa69 	bl	80055f8 <HAL_GPIO_Init>
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40013000 	.word	0x40013000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000

0800213c <HAL_MspInit>:
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_MspInit+0x4c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <HAL_MspInit+0x4c>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_MspInit+0x4c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_MspInit+0x4c>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <NMI_Handler+0x4>

08002194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <MemManage_Handler+0x4>

080021a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e2:	f002 fcb1 	bl	8004b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE)) {
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <TIM6_DAC_IRQHandler+0x28>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d104      	bne.n	8002208 <TIM6_DAC_IRQHandler+0x1c>
	        __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);  // 必须清除标志！
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <TIM6_DAC_IRQHandler+0x28>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f06f 0201 	mvn.w	r2, #1
 8002206:	611a      	str	r2, [r3, #16]
//	                break;
//	            default:
//	                break;
//	        }
//	    }
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000410 	.word	0x20000410

08002218 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <USART2_IRQHandler+0x10>)
 800221e:	f005 fbb3 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000250 	.word	0x20000250

0800222c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  // ⭐ UART IDLE中断处理（DMA接收雷达数据 - 快速路径）
  if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE)) {
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <USART3_IRQHandler+0x24>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b10      	cmp	r3, #16
 800223c:	d102      	bne.n	8002244 <USART3_IRQHandler+0x18>
      LIDAR_UART_IdleCallback_IRQ(&huart3);
 800223e:	4804      	ldr	r0, [pc, #16]	@ (8002250 <USART3_IRQHandler+0x24>)
 8002240:	f001 ff96 	bl	8004170 <LIDAR_UART_IdleCallback_IRQ>
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <USART3_IRQHandler+0x24>)
 8002246:	f005 fb9f 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000290 	.word	0x20000290

08002254 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <UART4_IRQHandler+0x10>)
 800225a:	f005 fb95 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200002d0 	.word	0x200002d0

08002268 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <UART5_IRQHandler+0x10>)
 800226e:	f005 fb8b 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000310 	.word	0x20000310

0800227c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 Stream1 global interrupt (USART3_RX).
  */
void DMA1_Stream1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <DMA1_Stream1_IRQHandler+0x10>)
 8002282:	f002 ff4f 	bl	8005124 <HAL_DMA_IRQHandler>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20001dd4 	.word	0x20001dd4

08002290 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 Stream4 global interrupt (UART4_TX).
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x10>)
 8002296:	f002 ff45 	bl	8005124 <HAL_DMA_IRQHandler>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20001e34 	.word	0x20001e34

080022a4 <HAL_UART_TxCpltCallback>:
  * @brief UART DMA发送完成回调函数
  * @param huart UART句柄
  * @note 当UART4 DMA发送完成时，通知雷达模块可以发送下一帧
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART4) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <HAL_UART_TxCpltCallback+0x20>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_UART_TxCpltCallback+0x16>
    // UART4发送完成，通知雷达模块
    LIDAR_TxCpltCallback();
 80022b6:	f002 fac5 	bl	8004844 <LIDAR_TxCpltCallback>
  }
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40004c00 	.word	0x40004c00

080022c8 <_getpid>:
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	2301      	movs	r3, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_kill>:
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	f007 fa1d 	bl	8009720 <__errno>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2216      	movs	r2, #22
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_exit>:
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ffe7 	bl	80022d8 <_kill>
 800230a:	bf00      	nop
 800230c:	e7fd      	b.n	800230a <_exit+0x12>

0800230e <_read>:
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e00a      	b.n	8002336 <_read+0x28>
 8002320:	f3af 8000 	nop.w
 8002324:	4601      	mov	r1, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	dbf0      	blt.n	8002320 <_read+0x12>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_write>:
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e009      	b.n	800236e <_write+0x26>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	60ba      	str	r2, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f988 	bl	8001678 <__io_putchar>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	dbf1      	blt.n	800235a <_write+0x12>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_close>:
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_fstat>:
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	2300      	movs	r3, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_isatty>:
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	2301      	movs	r3, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_lseek>:
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	2300      	movs	r3, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_sbrk>:
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
 8002418:	f007 f982 	bl	8009720 <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20020000 	.word	0x20020000
 8002448:	00000400 	.word	0x00000400
 800244c:	20001dd0 	.word	0x20001dd0
 8002450:	20007258 	.word	0x20007258

08002454 <SystemInit>:
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <SystemInit+0x28>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <SystemInit+0x28>)
 8002460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <SystemInit+0x28>)
 800246a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <MX_TIM1_Init>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b096      	sub	sp, #88	@ 0x58
 8002484:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	615a      	str	r2, [r3, #20]
 80024b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2220      	movs	r2, #32
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f007 f8c0 	bl	800963e <memset>

  htim1.Instance = TIM1;
 80024be:	4b50      	ldr	r3, [pc, #320]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024c0:	4a50      	ldr	r2, [pc, #320]	@ (8002604 <MX_TIM1_Init+0x184>)
 80024c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d8:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024de:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b46      	ldr	r3, [pc, #280]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ea:	4845      	ldr	r0, [pc, #276]	@ (8002600 <MX_TIM1_Init+0x180>)
 80024ec:	f004 f8f8 	bl	80066e0 <HAL_TIM_Base_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80024f6:	f7ff fd9d 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002500:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002504:	4619      	mov	r1, r3
 8002506:	483e      	ldr	r0, [pc, #248]	@ (8002600 <MX_TIM1_Init+0x180>)
 8002508:	f004 fb18 	bl	8006b3c <HAL_TIM_ConfigClockSource>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002512:	f7ff fd8f 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002516:	483a      	ldr	r0, [pc, #232]	@ (8002600 <MX_TIM1_Init+0x180>)
 8002518:	f004 f90d 	bl	8006736 <HAL_TIM_PWM_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002522:	f7ff fd87 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800252e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002532:	4619      	mov	r1, r3
 8002534:	4832      	ldr	r0, [pc, #200]	@ (8002600 <MX_TIM1_Init+0x180>)
 8002536:	f004 fed5 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002540:	f7ff fd78 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002544:	2360      	movs	r3, #96	@ 0x60
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002550:	2300      	movs	r3, #0
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  // 配置4个PWM通道用于双H桥驱动（AIN1/AIN2/BIN1/BIN2）
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002564:	2200      	movs	r2, #0
 8002566:	4619      	mov	r1, r3
 8002568:	4825      	ldr	r0, [pc, #148]	@ (8002600 <MX_TIM1_Init+0x180>)
 800256a:	f004 fa21 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002574:	f7ff fd5e 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	2204      	movs	r2, #4
 800257e:	4619      	mov	r1, r3
 8002580:	481f      	ldr	r0, [pc, #124]	@ (8002600 <MX_TIM1_Init+0x180>)
 8002582:	f004 fa15 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800258c:	f7ff fd52 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002594:	2208      	movs	r2, #8
 8002596:	4619      	mov	r1, r3
 8002598:	4819      	ldr	r0, [pc, #100]	@ (8002600 <MX_TIM1_Init+0x180>)
 800259a:	f004 fa09 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80025a4:	f7ff fd46 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ac:	220c      	movs	r2, #12
 80025ae:	4619      	mov	r1, r3
 80025b0:	4813      	ldr	r0, [pc, #76]	@ (8002600 <MX_TIM1_Init+0x180>)
 80025b2:	f004 f9fd 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80025bc:	f7ff fd3a 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4807      	ldr	r0, [pc, #28]	@ (8002600 <MX_TIM1_Init+0x180>)
 80025e4:	f004 fefa 	bl	80073dc <HAL_TIMEx_ConfigBreakDeadTime>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80025ee:	f7ff fd21 	bl	8002034 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80025f2:	4803      	ldr	r0, [pc, #12]	@ (8002600 <MX_TIM1_Init+0x180>)
 80025f4:	f000 f9c6 	bl	8002984 <HAL_TIM_MspPostInit>

}
 80025f8:	bf00      	nop
 80025fa:	3758      	adds	r7, #88	@ 0x58
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000350 	.word	0x20000350
 8002604:	40010000 	.word	0x40010000

08002608 <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	@ 0x30
 800260c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f007 f811 	bl	800963e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002624:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <MX_TIM2_Init+0xa4>)
 8002626:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800262a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800262c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ac <MX_TIM2_Init+0xa4>)
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <MX_TIM2_Init+0xa4>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002638:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <MX_TIM2_Init+0xa4>)
 800263a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800263e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <MX_TIM2_Init+0xa4>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <MX_TIM2_Init+0xa4>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]

    // 配置为编码器模式（⚠️ TIM2右轮只用A相，避免B相不稳定）
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;     // 只用CH1（A相），双倍频
 800264c:	2303      	movs	r3, #3
 800264e:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;   // 上升沿触发
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 6;  // 增加滤波（0-15，15最强），减少噪声干扰
 800265c:	2306      	movs	r3, #6
 800265e:	61fb      	str	r3, [r7, #28]
    
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002664:	2301      	movs	r3, #1
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4619      	mov	r1, r3
 8002676:	480d      	ldr	r0, [pc, #52]	@ (80026ac <MX_TIM2_Init+0xa4>)
 8002678:	f004 f8d0 	bl	800681c <HAL_TIM_Encoder_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002682:	f7ff fcd7 	bl	8002034 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4806      	ldr	r0, [pc, #24]	@ (80026ac <MX_TIM2_Init+0xa4>)
 8002694:	f004 fe26 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800269e:	f7ff fcc9 	bl	8002034 <Error_Handler>
  }
}
 80026a2:	bf00      	nop
 80026a4:	3730      	adds	r7, #48	@ 0x30
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000390 	.word	0x20000390

080026b0 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	@ 0x30
 80026b4:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef sConfig = {0};
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f006 ffbd 	bl	800963e <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]

    htim3.Instance = TIM3;
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <MX_TIM3_Init+0x84>)
 80026ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002738 <MX_TIM3_Init+0x88>)
 80026d0:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <MX_TIM3_Init+0x84>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d8:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <MX_TIM3_Init+0x84>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <MX_TIM3_Init+0x84>)
 80026e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026e4:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e6:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <MX_TIM3_Init+0x84>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <MX_TIM3_Init+0x84>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]

    // 编码器模式配置
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;    // 使用双边沿触发
 80026f2:	2303      	movs	r3, #3
 80026f4:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;   // 上升沿触发
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026fa:	2301      	movs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;         // 不分频
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 6;                         // 不滤波
 8002702:	2306      	movs	r3, #6
 8002704:	61fb      	str	r3, [r7, #28]
    
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4619      	mov	r1, r3
 800271c:	4805      	ldr	r0, [pc, #20]	@ (8002734 <MX_TIM3_Init+0x84>)
 800271e:	f004 f87d 	bl	800681c <HAL_TIM_Encoder_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM3_Init+0x7c>
    {
        Error_Handler();
 8002728:	f7ff fc84 	bl	8002034 <Error_Handler>
    }
}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	@ 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200003d0 	.word	0x200003d0
 8002738:	40000400 	.word	0x40000400

0800273c <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002742:	463b      	mov	r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800274c:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <MX_TIM6_Init+0x68>)
 800274e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 719;
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002752:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002756:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002760:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002764:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800276c:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800276e:	f003 ffb7 	bl	80066e0 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002778:	f7ff fc5c 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800278a:	f004 fdab 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002794:	f7ff fc4e 	bl	8002034 <Error_Handler>
  }
//  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);  // 参数：中断号，抢占优先级，子优先级
//  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);         // 使能中断
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000410 	.word	0x20000410
 80027a4:	40001000 	.word	0x40001000

080027a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b090      	sub	sp, #64	@ 0x40
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a68      	ldr	r2, [pc, #416]	@ (8002968 <HAL_TIM_Base_MspInit+0x1c0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ce:	4b67      	ldr	r3, [pc, #412]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a66      	ldr	r2, [pc, #408]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b64      	ldr	r3, [pc, #400]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80027e6:	e0bb      	b.n	8002960 <HAL_TIM_Base_MspInit+0x1b8>
  }else if(tim_baseHandle->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f0:	d14b      	bne.n	800288a <HAL_TIM_Base_MspInit+0xe2>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f6:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a5c      	ldr	r2, [pc, #368]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	4b5a      	ldr	r3, [pc, #360]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
 8002812:	4b56      	ldr	r3, [pc, #344]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	4a55      	ldr	r2, [pc, #340]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	@ 0x30
 800281e:	4b53      	ldr	r3, [pc, #332]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	6a3b      	ldr	r3, [r7, #32]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	4b4f      	ldr	r3, [pc, #316]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a4e      	ldr	r2, [pc, #312]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
        GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002850:	2301      	movs	r3, #1
 8002852:	637b      	str	r3, [r7, #52]	@ 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002854:	2302      	movs	r3, #2
 8002856:	63bb      	str	r3, [r7, #56]	@ 0x38
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002858:	2301      	movs	r3, #1
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002860:	4619      	mov	r1, r3
 8002862:	4843      	ldr	r0, [pc, #268]	@ (8002970 <HAL_TIM_Base_MspInit+0x1c8>)
 8002864:	f002 fec8 	bl	80055f8 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002868:	2308      	movs	r3, #8
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002870:	2301      	movs	r3, #1
 8002872:	637b      	str	r3, [r7, #52]	@ 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002874:	2302      	movs	r3, #2
 8002876:	63bb      	str	r3, [r7, #56]	@ 0x38
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002878:	2301      	movs	r3, #1
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002880:	4619      	mov	r1, r3
 8002882:	483c      	ldr	r0, [pc, #240]	@ (8002974 <HAL_TIM_Base_MspInit+0x1cc>)
 8002884:	f002 feb8 	bl	80055f8 <HAL_GPIO_Init>
}
 8002888:	e06a      	b.n	8002960 <HAL_TIM_Base_MspInit+0x1b8>
  else if(tim_baseHandle->Instance==TIM3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <HAL_TIM_Base_MspInit+0x1d0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d14a      	bne.n	800292a <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	4b34      	ldr	r3, [pc, #208]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	4a33      	ldr	r2, [pc, #204]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a4:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	4a2c      	ldr	r2, [pc, #176]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c0:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	4a25      	ldr	r2, [pc, #148]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6313      	str	r3, [r2, #48]	@ 0x30
 80028dc:	4b23      	ldr	r3, [pc, #140]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028e8:	2303      	movs	r3, #3
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028f8:	2302      	movs	r3, #2
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002900:	4619      	mov	r1, r3
 8002902:	481c      	ldr	r0, [pc, #112]	@ (8002974 <HAL_TIM_Base_MspInit+0x1cc>)
 8002904:	f002 fe78 	bl	80055f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002908:	23c0      	movs	r3, #192	@ 0xc0
 800290a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002918:	2302      	movs	r3, #2
 800291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002920:	4619      	mov	r1, r3
 8002922:	4816      	ldr	r0, [pc, #88]	@ (800297c <HAL_TIM_Base_MspInit+0x1d4>)
 8002924:	f002 fe68 	bl	80055f8 <HAL_GPIO_Init>
}
 8002928:	e01a      	b.n	8002960 <HAL_TIM_Base_MspInit+0x1b8>
  else if(tim_baseHandle->Instance==TIM6)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <HAL_TIM_Base_MspInit+0x1d8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d115      	bne.n	8002960 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 800293e:	f043 0310 	orr.w	r3, r3, #16
 8002942:	6413      	str	r3, [r2, #64]	@ 0x40
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_TIM_Base_MspInit+0x1c4>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	2036      	movs	r0, #54	@ 0x36
 8002956:	f002 fa16 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800295a:	2036      	movs	r0, #54	@ 0x36
 800295c:	f002 fa2f 	bl	8004dbe <HAL_NVIC_EnableIRQ>
}
 8002960:	bf00      	nop
 8002962:	3740      	adds	r7, #64	@ 0x40
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40010000 	.word	0x40010000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40000400 	.word	0x40000400
 800297c:	40020800 	.word	0x40020800
 8002980:	40001000 	.word	0x40001000

08002984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d11e      	bne.n	80029e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_TIM_MspPostInit+0x6c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a10      	ldr	r2, [pc, #64]	@ (80029f0 <HAL_TIM_MspPostInit+0x6c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <HAL_TIM_MspPostInit+0x6c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1  (AIN1 - 左电机PWM1)
    PA9     ------> TIM1_CH2  (AIN2 - 左电机PWM2)
    PA10    ------> TIM1_CH3  (BIN1 - 右电机PWM1)
    PA11    ------> TIM1_CH4  (BIN2 - 右电机PWM2)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80029c2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80029c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <HAL_TIM_MspPostInit+0x70>)
 80029e0:	f002 fe0a 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40010000 	.word	0x40010000
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020000 	.word	0x40020000

080029f8 <HAL_TIM_Encoder_MspInit>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	@ 0x30
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
    
    if(htim->Instance==TIM3)  // 物理左轮编码器 (E2A/E2B)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d12c      	bne.n	8002a74 <HAL_TIM_Encoder_MspInit+0x7c>
    {
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	4a3f      	ldr	r2, [pc, #252]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	69bb      	ldr	r3, [r7, #24]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a38      	ldr	r2, [pc, #224]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]

        // PC6和PC7配置 → E2A/E2B
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;     // 复用推挽输出
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_PULLUP;         // 使用上拉
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // 复用为TIM3
 8002a62:	2302      	movs	r3, #2
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	482d      	ldr	r0, [pc, #180]	@ (8002b24 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002a6e:	f002 fdc3 	bl	80055f8 <HAL_GPIO_Init>
        GPIO_InitStruct.Pull = GPIO_PULLUP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;  // PB3的TIM2复用
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    }
}
 8002a72:	e04f      	b.n	8002b14 <HAL_TIM_Encoder_MspInit+0x11c>
    else if(htim->Instance==TIM2)  // 物理右轮编码器 (E1A/E1B)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7c:	d14a      	bne.n	8002b14 <HAL_TIM_Encoder_MspInit+0x11c>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	4b27      	ldr	r3, [pc, #156]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a26      	ldr	r2, [pc, #152]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ad6:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;     // 复用推挽输出
 8002ad8:	2302      	movs	r3, #2
 8002ada:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_PULLUP;         // 使用上拉
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;  // PA15的TIM2复用
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	480e      	ldr	r0, [pc, #56]	@ (8002b28 <HAL_TIM_Encoder_MspInit+0x130>)
 8002af0:	f002 fd82 	bl	80055f8 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002af4:	2308      	movs	r3, #8
 8002af6:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b00:	2302      	movs	r3, #2
 8002b02:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;  // PB3的TIM2复用
 8002b04:	2301      	movs	r3, #1
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4807      	ldr	r0, [pc, #28]	@ (8002b2c <HAL_TIM_Encoder_MspInit+0x134>)
 8002b10:	f002 fd72 	bl	80055f8 <HAL_GPIO_Init>
}
 8002b14:	bf00      	nop
 8002b16:	3730      	adds	r7, #48	@ 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400

08002b30 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002b34:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b36:	4a16      	ldr	r2, [pc, #88]	@ (8002b90 <MX_USART2_UART_Init+0x60>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b66:	4809      	ldr	r0, [pc, #36]	@ (8002b8c <MX_USART2_UART_Init+0x5c>)
 8002b68:	f004 fc8a 	bl	8007480 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f7ff fa5f 	bl	8002034 <Error_Handler>
  }
  HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2026      	movs	r0, #38	@ 0x26
 8002b7c:	f002 f903 	bl	8004d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b80:	2026      	movs	r0, #38	@ 0x26
 8002b82:	f002 f91c 	bl	8004dbe <HAL_NVIC_EnableIRQ>

}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000250 	.word	0x20000250
 8002b90:	40004400 	.word	0x40004400

08002b94 <MX_USART3_UART_Init>:

/* USART3 init function */
void MX_USART3_UART_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002b98:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002b9a:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002ba0:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bca:	4809      	ldr	r0, [pc, #36]	@ (8002bf0 <MX_USART3_UART_Init+0x5c>)
 8002bcc:	f004 fc58 	bl	8007480 <HAL_UART_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bd6:	f7ff fa2d 	bl	8002034 <Error_Handler>
  }
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2027      	movs	r0, #39	@ 0x27
 8002be0:	f002 f8d1 	bl	8004d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002be4:	2027      	movs	r0, #39	@ 0x27
 8002be6:	f002 f8ea 	bl	8004dbe <HAL_NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000290 	.word	0x20000290
 8002bf4:	40004800 	.word	0x40004800

08002bf8 <MX_UART4_Init>:

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002bfe:	4a16      	ldr	r2, [pc, #88]	@ (8002c58 <MX_UART4_Init+0x60>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;  // 高速数据传输（雷达点云）
 8002c02:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c04:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002c08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c2e:	4809      	ldr	r0, [pc, #36]	@ (8002c54 <MX_UART4_Init+0x5c>)
 8002c30:	f004 fc26 	bl	8007480 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c3a:	f7ff f9fb 	bl	8002034 <Error_Handler>
  }
  HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2101      	movs	r1, #1
 8002c42:	2034      	movs	r0, #52	@ 0x34
 8002c44:	f002 f89f 	bl	8004d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c48:	2034      	movs	r0, #52	@ 0x34
 8002c4a:	f002 f8b8 	bl	8004dbe <HAL_NVIC_EnableIRQ>

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200002d0 	.word	0x200002d0
 8002c58:	40004c00 	.word	0x40004c00

08002c5c <MX_UART5_Init>:

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <MX_UART5_Init+0x50>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_UART5_Init+0x4c>)
 8002c94:	f004 fbf4 	bl	8007480 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002c9e:	f7ff f9c9 	bl	8002034 <Error_Handler>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000310 	.word	0x20000310
 8002cac:	40005000 	.word	0x40005000

08002cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b092      	sub	sp, #72	@ 0x48
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a7d      	ldr	r2, [pc, #500]	@ (8002ec4 <HAL_UART_MspInit+0x214>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d16c      	bne.n	8002dac <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a7b      	ldr	r2, [pc, #492]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce2:	4b79      	ldr	r3, [pc, #484]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf2:	4b75      	ldr	r3, [pc, #468]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a74      	ldr	r2, [pc, #464]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b72      	ldr	r3, [pc, #456]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d22:	4619      	mov	r1, r3
 8002d24:	4869      	ldr	r0, [pc, #420]	@ (8002ecc <HAL_UART_MspInit+0x21c>)
 8002d26:	f002 fc67 	bl	80055f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */
    // ⭐ DMA配置（数据发送）
    __HAL_RCC_DMA1_CLK_ENABLE();  // 使能DMA1时钟
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2e:	4b66      	ldr	r3, [pc, #408]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a65      	ldr	r2, [pc, #404]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b63      	ldr	r3, [pc, #396]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    
    /* UART4_TX DMA配置 */
    hdma_uart4_tx.Instance = DMA1_Stream4;             // UART4_TX使用DMA1 Stream4
 8002d46:	4b62      	ldr	r3, [pc, #392]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d48:	4a62      	ldr	r2, [pc, #392]	@ (8002ed4 <HAL_UART_MspInit+0x224>)
 8002d4a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;        // Channel 4
 8002d4c:	4b60      	ldr	r3, [pc, #384]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d52:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d54:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d56:	2240      	movs	r2, #64	@ 0x40
 8002d58:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d60:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d66:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d68:	4b59      	ldr	r3, [pc, #356]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d6e:	4b58      	ldr	r3, [pc, #352]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;              // ⭐ 正常模式（非循环）
 8002d74:	4b56      	ldr	r3, [pc, #344]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d7a:	4b55      	ldr	r3, [pc, #340]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d80:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d82:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24
    
    HAL_DMA_Init(&hdma_uart4_tx);
 8002d88:	4851      	ldr	r0, [pc, #324]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d8a:	f002 f833 	bl	8004df4 <HAL_DMA_Init>
    
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_uart4_tx);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4f      	ldr	r2, [pc, #316]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d94:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed0 <HAL_UART_MspInit+0x220>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* DMA1_Stream4 interrupt Init */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f001 fff1 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002da4:	200f      	movs	r0, #15
 8002da6:	f002 f80a 	bl	8004dbe <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream1 interrupt Init */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002daa:	e120      	b.n	8002fee <HAL_UART_MspInit+0x33e>
  else if(uartHandle->Instance==UART5)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a49      	ldr	r2, [pc, #292]	@ (8002ed8 <HAL_UART_MspInit+0x228>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d153      	bne.n	8002e5e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	4a42      	ldr	r2, [pc, #264]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002dc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b39      	ldr	r3, [pc, #228]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	4b35      	ldr	r3, [pc, #212]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a34      	ldr	r2, [pc, #208]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e0e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e24:	4619      	mov	r1, r3
 8002e26:	482d      	ldr	r0, [pc, #180]	@ (8002edc <HAL_UART_MspInit+0x22c>)
 8002e28:	f002 fbe6 	bl	80055f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e44:	4619      	mov	r1, r3
 8002e46:	4826      	ldr	r0, [pc, #152]	@ (8002ee0 <HAL_UART_MspInit+0x230>)
 8002e48:	f002 fbd6 	bl	80055f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2035      	movs	r0, #53	@ 0x35
 8002e52:	f001 ff98 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002e56:	2035      	movs	r0, #53	@ 0x35
 8002e58:	f001 ffb1 	bl	8004dbe <HAL_NVIC_EnableIRQ>
}
 8002e5c:	e0c7      	b.n	8002fee <HAL_UART_MspInit+0x33e>
  else if(uartHandle->Instance==USART2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a20      	ldr	r2, [pc, #128]	@ (8002ee4 <HAL_UART_MspInit+0x234>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d13f      	bne.n	8002ee8 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	4b16      	ldr	r3, [pc, #88]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	4a15      	ldr	r2, [pc, #84]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <HAL_UART_MspInit+0x218>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb0:	2307      	movs	r3, #7
 8002eb2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4804      	ldr	r0, [pc, #16]	@ (8002ecc <HAL_UART_MspInit+0x21c>)
 8002ebc:	f002 fb9c 	bl	80055f8 <HAL_GPIO_Init>
}
 8002ec0:	e095      	b.n	8002fee <HAL_UART_MspInit+0x33e>
 8002ec2:	bf00      	nop
 8002ec4:	40004c00 	.word	0x40004c00
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	20001e34 	.word	0x20001e34
 8002ed4:	40026070 	.word	0x40026070
 8002ed8:	40005000 	.word	0x40005000
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a42      	ldr	r2, [pc, #264]	@ (8002ff8 <HAL_UART_MspInit+0x348>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d17d      	bne.n	8002fee <HAL_UART_MspInit+0x33e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4a40      	ldr	r2, [pc, #256]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f02:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b3a      	ldr	r3, [pc, #232]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a39      	ldr	r2, [pc, #228]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b37      	ldr	r3, [pc, #220]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f32:	2301      	movs	r3, #1
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f42:	4619      	mov	r1, r3
 8002f44:	482e      	ldr	r0, [pc, #184]	@ (8003000 <HAL_UART_MspInit+0x350>)
 8002f46:	f002 fb57 	bl	80055f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f54:	2301      	movs	r3, #1
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f5c:	2307      	movs	r3, #7
 8002f5e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f64:	4619      	mov	r1, r3
 8002f66:	4826      	ldr	r0, [pc, #152]	@ (8003000 <HAL_UART_MspInit+0x350>)
 8002f68:	f002 fb46 	bl	80055f8 <HAL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE();  // 使能DMA1时钟
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	4b22      	ldr	r3, [pc, #136]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4a21      	ldr	r2, [pc, #132]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <HAL_UART_MspInit+0x34c>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
    hdma_usart3_rx.Instance = DMA1_Stream1;           // USART3_RX使用DMA1 Stream1
 8002f88:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <HAL_UART_MspInit+0x358>)
 8002f8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;      // Channel 4
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002f90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f94:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f96:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fa8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002faa:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;          // ⭐ 循环模式
 8002fb6:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fbc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fc4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_DMA_Init(&hdma_usart3_rx);
 8002fcc:	480d      	ldr	r0, [pc, #52]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fce:	f001 ff11 	bl	8004df4 <HAL_DMA_Init>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart3_rx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <HAL_UART_MspInit+0x354>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	200c      	movs	r0, #12
 8002fe4:	f001 fecf 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fe8:	200c      	movs	r0, #12
 8002fea:	f001 fee8 	bl	8004dbe <HAL_NVIC_EnableIRQ>
}
 8002fee:	bf00      	nop
 8002ff0:	3748      	adds	r7, #72	@ 0x48
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40004800 	.word	0x40004800
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020800 	.word	0x40020800
 8003004:	20001dd4 	.word	0x20001dd4
 8003008:	40026028 	.word	0x40026028

0800300c <Encoder_GetSpeeds>:
 * @note 读取计数后会立即清零计数器，准备下次测量
 * @note 前进时两轮速度均为正值，后退时为负值
 */
void Encoder_GetSpeeds(TIM_HandleTypeDef* htim_left, TIM_HandleTypeDef* htim_right, 
                      float* rps_left, float* rps_right, float dt)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6178      	str	r0, [r7, #20]
 8003014:	6139      	str	r1, [r7, #16]
 8003016:	60fa      	str	r2, [r7, #12]
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	ed87 0a01 	vstr	s0, [r7, #4]
    // ========== 第一步：读取编码器计数值 ==========
    // 使用int16_t类型，支持正负计数（前进/后退）
    int16_t cnt_left = (int16_t)__HAL_TIM_GET_COUNTER(htim_left);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	83fb      	strh	r3, [r7, #30]
    int16_t cnt_right = (int16_t)__HAL_TIM_GET_COUNTER(htim_right);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	83bb      	strh	r3, [r7, #28]
    
    // ========== 第二步：立即清零计数器（准备下次测量）==========
    __HAL_TIM_SET_COUNTER(htim_left, 0);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(htim_right, 0);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // ========== 第三步：时间间隔保护（防止除零错误）==========
    if(dt < 0.001f) {
 800303e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003042:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80030a8 <Encoder_GetSpeeds+0x9c>
 8003046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	d501      	bpl.n	8003054 <Encoder_GetSpeeds+0x48>
        dt = 0.001f;  // 最小时间间隔限制为1ms
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <Encoder_GetSpeeds+0xa0>)
 8003052:	607b      	str	r3, [r7, #4]
    
    // ========== 第四步：计算速度（RPS = 计数值 / PPR / 时间间隔）==========
    
    // 左轮速度计算（不取反）
    // 实测：TIM3前进时计数为正，方向正确，无需反转
    *rps_left = (float)cnt_left / ENCODER_PPR_LEFT / dt;
 8003054:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003060:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80030b0 <Encoder_GetSpeeds+0xa4>
 8003064:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003068:	ed97 7a01 	vldr	s14, [r7, #4]
 800306c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	edc3 7a00 	vstr	s15, [r3]
    
    // 右轮速度计算（取反）
    // 实测：TIM2前进时计数为负，需要取反以匹配左轮方向
    // 目标：前进时两个轮子的速度均为正数
    *rps_right = -(float)cnt_right / ENCODER_PPR_RIGHT / dt;
 8003076:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003082:	eef1 7a67 	vneg.f32	s15, s15
 8003086:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80030b0 <Encoder_GetSpeeds+0xa4>
 800308a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	edc3 7a00 	vstr	s15, [r3]
     * 注意：
     * - 左右轮PPR不同，是因为右轮只用单相（双倍频）
     * - 右轮取反是因为编码器安装方向或接线导致计数方向相反
     * - 最终结果：前进时两轮速度都是正数，便于PID控制
     */
}
 800309c:	bf00      	nop
 800309e:	3724      	adds	r7, #36	@ 0x24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	3a83126f 	.word	0x3a83126f
 80030ac:	3a83126f 	.word	0x3a83126f
 80030b0:	44c30000 	.word	0x44c30000

080030b4 <Motor_UpdateYawAngle>:
 * @brief 更新偏航角数据（从UART5传感器数据调用）⭐
 * @param yaw_angle 陀螺仪原始偏航角（度，范围-180~180）
 * @note 会自动追踪累积角度变化并应用校准系数
 * @note 通过检测±180边界跨越来计算累积转动角度
 */
void Motor_UpdateYawAngle(float yaw_angle) {
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	ed87 0a01 	vstr	s0, [r7, #4]
    raw_yaw_angle = yaw_angle;  // 保存当前原始角度
 80030be:	4a63      	ldr	r2, [pc, #396]	@ (800324c <Motor_UpdateYawAngle+0x198>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6013      	str	r3, [r2, #0]
    
    // 首次调用时初始化
    if (!angle_tracking_initialized) {
 80030c4:	4b62      	ldr	r3, [pc, #392]	@ (8003250 <Motor_UpdateYawAngle+0x19c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d147      	bne.n	800315c <Motor_UpdateYawAngle+0xa8>
        last_raw_yaw_angle = yaw_angle;
 80030cc:	4a61      	ldr	r2, [pc, #388]	@ (8003254 <Motor_UpdateYawAngle+0x1a0>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
        accumulated_raw_angle = yaw_angle;
 80030d2:	4a61      	ldr	r2, [pc, #388]	@ (8003258 <Motor_UpdateYawAngle+0x1a4>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6013      	str	r3, [r2, #0]
        accumulated_calibrated_angle = yaw_angle * gyro_angle_calibration;
 80030d8:	4b60      	ldr	r3, [pc, #384]	@ (800325c <Motor_UpdateYawAngle+0x1a8>)
 80030da:	ed93 7a00 	vldr	s14, [r3]
 80030de:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003260 <Motor_UpdateYawAngle+0x1ac>)
 80030e8:	edc3 7a00 	vstr	s15, [r3]
        angle_tracking_initialized = 1;
 80030ec:	4b58      	ldr	r3, [pc, #352]	@ (8003250 <Motor_UpdateYawAngle+0x19c>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
        
        // 当前角度直接使用（首次）
        current_yaw_angle = yaw_angle * gyro_angle_calibration;
 80030f2:	4b5a      	ldr	r3, [pc, #360]	@ (800325c <Motor_UpdateYawAngle+0x1a8>)
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003100:	4b58      	ldr	r3, [pc, #352]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003102:	edc3 7a00 	vstr	s15, [r3]
        
        // 归一化
        while (current_yaw_angle > 180.0f) current_yaw_angle -= 360.0f;
 8003106:	e009      	b.n	800311c <Motor_UpdateYawAngle+0x68>
 8003108:	4b56      	ldr	r3, [pc, #344]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8003268 <Motor_UpdateYawAngle+0x1b4>
 8003112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003116:	4b53      	ldr	r3, [pc, #332]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003118:	edc3 7a00 	vstr	s15, [r3]
 800311c:	4b51      	ldr	r3, [pc, #324]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800326c <Motor_UpdateYawAngle+0x1b8>
 8003126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	dceb      	bgt.n	8003108 <Motor_UpdateYawAngle+0x54>
        while (current_yaw_angle < -180.0f) current_yaw_angle += 360.0f;
 8003130:	e009      	b.n	8003146 <Motor_UpdateYawAngle+0x92>
 8003132:	4b4c      	ldr	r3, [pc, #304]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003268 <Motor_UpdateYawAngle+0x1b4>
 800313c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003140:	4b48      	ldr	r3, [pc, #288]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003142:	edc3 7a00 	vstr	s15, [r3]
 8003146:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003270 <Motor_UpdateYawAngle+0x1bc>
 8003150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	d4eb      	bmi.n	8003132 <Motor_UpdateYawAngle+0x7e>
        
        return;
 800315a:	e071      	b.n	8003240 <Motor_UpdateYawAngle+0x18c>
    }
    
    // 计算角度变化量（考虑边界跨越）
    float delta_angle = yaw_angle - last_raw_yaw_angle;
 800315c:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <Motor_UpdateYawAngle+0x1a0>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ed97 7a01 	vldr	s14, [r7, #4]
 8003166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // 检测边界跨越
    if (delta_angle > 180.0f) {
 800316e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003172:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800326c <Motor_UpdateYawAngle+0x1b8>
 8003176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	dd08      	ble.n	8003192 <Motor_UpdateYawAngle+0xde>
        // 从+180跨越到-180（逆时针穿越边界）
        delta_angle -= 360.0f;
 8003180:	edd7 7a03 	vldr	s15, [r7, #12]
 8003184:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8003268 <Motor_UpdateYawAngle+0x1b4>
 8003188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800318c:	edc7 7a03 	vstr	s15, [r7, #12]
 8003190:	e010      	b.n	80031b4 <Motor_UpdateYawAngle+0x100>
    } else if (delta_angle < -180.0f) {
 8003192:	edd7 7a03 	vldr	s15, [r7, #12]
 8003196:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8003270 <Motor_UpdateYawAngle+0x1bc>
 800319a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	d507      	bpl.n	80031b4 <Motor_UpdateYawAngle+0x100>
        // 从-180跨越到+180（顺时针穿越边界）
        delta_angle += 360.0f;
 80031a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003268 <Motor_UpdateYawAngle+0x1b4>
 80031ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b0:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    
    // 累积原始角度（未校准）
    accumulated_raw_angle += delta_angle;
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <Motor_UpdateYawAngle+0x1a4>)
 80031b6:	ed93 7a00 	vldr	s14, [r3]
 80031ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <Motor_UpdateYawAngle+0x1a4>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]
    
    // 应用校准系数到累积角度
    accumulated_calibrated_angle = accumulated_raw_angle * gyro_angle_calibration;
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <Motor_UpdateYawAngle+0x1a4>)
 80031ca:	ed93 7a00 	vldr	s14, [r3]
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <Motor_UpdateYawAngle+0x1a8>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d8:	4b21      	ldr	r3, [pc, #132]	@ (8003260 <Motor_UpdateYawAngle+0x1ac>)
 80031da:	edc3 7a00 	vstr	s15, [r3]
    
    // 从累积角度计算当前角度（归一化到-180~180）
    current_yaw_angle = accumulated_calibrated_angle;
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <Motor_UpdateYawAngle+0x1ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a20      	ldr	r2, [pc, #128]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 80031e4:	6013      	str	r3, [r2, #0]
    while (current_yaw_angle > 180.0f) current_yaw_angle -= 360.0f;
 80031e6:	e009      	b.n	80031fc <Motor_UpdateYawAngle+0x148>
 80031e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003268 <Motor_UpdateYawAngle+0x1b4>
 80031f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 80031f8:	edc3 7a00 	vstr	s15, [r3]
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 80031fe:	edd3 7a00 	vldr	s15, [r3]
 8003202:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800326c <Motor_UpdateYawAngle+0x1b8>
 8003206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320e:	dceb      	bgt.n	80031e8 <Motor_UpdateYawAngle+0x134>
    while (current_yaw_angle < -180.0f) current_yaw_angle += 360.0f;
 8003210:	e009      	b.n	8003226 <Motor_UpdateYawAngle+0x172>
 8003212:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003268 <Motor_UpdateYawAngle+0x1b4>
 800321c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003220:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003222:	edc3 7a00 	vstr	s15, [r3]
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <Motor_UpdateYawAngle+0x1b0>)
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003270 <Motor_UpdateYawAngle+0x1bc>
 8003230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d4eb      	bmi.n	8003212 <Motor_UpdateYawAngle+0x15e>
    
    // 更新上次角度
    last_raw_yaw_angle = yaw_angle;
 800323a:	4a06      	ldr	r2, [pc, #24]	@ (8003254 <Motor_UpdateYawAngle+0x1a0>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6013      	str	r3, [r2, #0]
}
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20001ea8 	.word	0x20001ea8
 8003250:	20001eb8 	.word	0x20001eb8
 8003254:	20001eac 	.word	0x20001eac
 8003258:	20001eb0 	.word	0x20001eb0
 800325c:	20000004 	.word	0x20000004
 8003260:	20001eb4 	.word	0x20001eb4
 8003264:	20001ea4 	.word	0x20001ea4
 8003268:	43b40000 	.word	0x43b40000
 800326c:	43340000 	.word	0x43340000
 8003270:	c3340000 	.word	0xc3340000

08003274 <Motor_Init>:
/**
 * @brief 电机初始化（配置4路PWM通道）
 * @param htim PWM定时器句柄（TIM1）
 * @note 使用4个PWM通道控制双H桥：AIN1/AIN2（左电机），BIN1/BIN2（右电机）
 */
void Motor_Init(TIM_HandleTypeDef *htim) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    // 启动4路PWM通道
    HAL_TIM_PWM_Start(htim, AIN1_PWM_CHANNEL);  // PA8
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f003 fa8e 	bl	80067a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, AIN2_PWM_CHANNEL);  // PA9
 8003284:	2104      	movs	r1, #4
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f003 fa8a 	bl	80067a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, BIN1_PWM_CHANNEL);  // PA10
 800328c:	2108      	movs	r1, #8
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f003 fa86 	bl	80067a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, BIN2_PWM_CHANNEL);  // PA11
 8003294:	210c      	movs	r1, #12
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f003 fa82 	bl	80067a0 <HAL_TIM_PWM_Start>

    // 默认停止电机（所有PWM置0）
    __HAL_TIM_SET_COMPARE(htim, AIN1_PWM_CHANNEL, 0);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(htim, AIN2_PWM_CHANNEL, 0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(htim, BIN1_PWM_CHANNEL, 0);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(htim, BIN2_PWM_CHANNEL, 0);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40

    // 检查编码器初始计数值（调试用）
    int16_t leftCount = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <Motor_Init+0x60>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	81fb      	strh	r3, [r7, #14]
    int16_t rightCount = (int16_t)__HAL_TIM_GET_COUNTER(&htim2);
 80032c4:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <Motor_Init+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	81bb      	strh	r3, [r7, #12]
    (void)leftCount;   // 避免未使用变量警告
    (void)rightCount;
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200003d0 	.word	0x200003d0
 80032d8:	20000390 	.word	0x20000390

080032dc <Motor_SetSpeed>:
 * @note 右电机控制逻辑（H桥驱动）：
 *       - speedRatio > 0（正转）：BIN1输出PWM，BIN2置低电平
 *       - speedRatio < 0（反转）：BIN1置低电平，BIN2输出PWM
 *       - speedRatio = 0（停止）：BIN1和BIN2都置低电平
 */
void Motor_SetSpeed(TIM_HandleTypeDef *htim, int motor, float speedRatio) {
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	ed87 0a01 	vstr	s0, [r7, #4]
    // 限幅处理
    if (speedRatio > 1.0f) speedRatio = 1.0f;
 80032ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	dd02      	ble.n	8003302 <Motor_SetSpeed+0x26>
 80032fc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003300:	607b      	str	r3, [r7, #4]
    if (speedRatio < -1.0f) speedRatio = -1.0f;
 8003302:	edd7 7a01 	vldr	s15, [r7, #4]
 8003306:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800330a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	d501      	bpl.n	8003318 <Motor_SetSpeed+0x3c>
 8003314:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <Motor_SetSpeed+0x118>)
 8003316:	607b      	str	r3, [r7, #4]
    
    // 提取方向和PWM占空比
    float abs_ratio = fabsf(speedRatio);  // 取绝对值作为PWM占空比
 8003318:	edd7 7a01 	vldr	s15, [r7, #4]
 800331c:	eef0 7ae7 	vabs.f32	s15, s15
 8003320:	edc7 7a05 	vstr	s15, [r7, #20]
    uint32_t pwm_value = (uint32_t)(abs_ratio * 65535);
 8003324:	edd7 7a05 	vldr	s15, [r7, #20]
 8003328:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80033f8 <Motor_SetSpeed+0x11c>
 800332c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003334:	ee17 3a90 	vmov	r3, s15
 8003338:	613b      	str	r3, [r7, #16]
    
    // ========== 左电机控制（AIN1 / AIN2）==========
    if (motor == MOTOR_RIGHT) {
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d128      	bne.n	8003392 <Motor_SetSpeed+0xb6>
        if (speedRatio > 0.0f) {
 8003340:	edd7 7a01 	vldr	s15, [r7, #4]
 8003344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	dd08      	ble.n	8003360 <Motor_SetSpeed+0x84>
            // 正转：AIN1输出PWM，AIN2置低电平
            __HAL_TIM_SET_COMPARE(htim, AIN1_PWM_CHANNEL, pwm_value);  // PA8输出PWM
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim, AIN2_PWM_CHANNEL, 0);          // PA9置0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2200      	movs	r2, #0
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38
            // 停止：BIN1和BIN2都置低电平
            __HAL_TIM_SET_COMPARE(htim, BIN1_PWM_CHANNEL, 0);
            __HAL_TIM_SET_COMPARE(htim, BIN2_PWM_CHANNEL, 0);
        }
    }
}
 800335e:	e043      	b.n	80033e8 <Motor_SetSpeed+0x10c>
        else if (speedRatio < 0.0f) {
 8003360:	edd7 7a01 	vldr	s15, [r7, #4]
 8003364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	d508      	bpl.n	8003380 <Motor_SetSpeed+0xa4>
            __HAL_TIM_SET_COMPARE(htim, AIN1_PWM_CHANNEL, 0);          // PA8置0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim, AIN2_PWM_CHANNEL, pwm_value);  // PA9输出PWM
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800337e:	e033      	b.n	80033e8 <Motor_SetSpeed+0x10c>
            __HAL_TIM_SET_COMPARE(htim, AIN1_PWM_CHANNEL, 0);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim, AIN2_PWM_CHANNEL, 0);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003390:	e02a      	b.n	80033e8 <Motor_SetSpeed+0x10c>
    else if (motor == MOTOR_LEFT) {
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d127      	bne.n	80033e8 <Motor_SetSpeed+0x10c>
        if (speedRatio < 0.0f) {
 8003398:	edd7 7a01 	vldr	s15, [r7, #4]
 800339c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	d508      	bpl.n	80033b8 <Motor_SetSpeed+0xdc>
            __HAL_TIM_SET_COMPARE(htim, BIN1_PWM_CHANNEL, pwm_value);  // PA10输出PWM
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(htim, BIN2_PWM_CHANNEL, 0);          // PA11置0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033b6:	e017      	b.n	80033e8 <Motor_SetSpeed+0x10c>
        else if (speedRatio > 0.0f) {
 80033b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	dd08      	ble.n	80033d8 <Motor_SetSpeed+0xfc>
            __HAL_TIM_SET_COMPARE(htim, BIN1_PWM_CHANNEL, 0);          // PA10置0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(htim, BIN2_PWM_CHANNEL, pwm_value);  // PA11输出PWM
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033d6:	e007      	b.n	80033e8 <Motor_SetSpeed+0x10c>
            __HAL_TIM_SET_COMPARE(htim, BIN1_PWM_CHANNEL, 0);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(htim, BIN2_PWM_CHANNEL, 0);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	bf800000 	.word	0xbf800000
 80033f8:	477fff00 	.word	0x477fff00

080033fc <Motor_PID_Init>:

/**
 * @brief 初始化电机控制系统（带速度环PID和角度环PID）
 * @note 初始化控制参数和PID控制器（双环控制：角度环+速度环）
 */
void Motor_PID_Init(void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
    // 初始化目标速度和方向
    target_direction = 0;
 8003400:	4b67      	ldr	r3, [pc, #412]	@ (80035a0 <Motor_PID_Init+0x1a4>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
    target_speed_left = 0.0f;
 8003406:	4b67      	ldr	r3, [pc, #412]	@ (80035a4 <Motor_PID_Init+0x1a8>)
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    target_speed_right = 0.0f;
 800340e:	4b66      	ldr	r3, [pc, #408]	@ (80035a8 <Motor_PID_Init+0x1ac>)
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    base_speed_left = 0.0f;
 8003416:	4b65      	ldr	r3, [pc, #404]	@ (80035ac <Motor_PID_Init+0x1b0>)
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
    base_speed_right = 0.0f;
 800341e:	4b64      	ldr	r3, [pc, #400]	@ (80035b0 <Motor_PID_Init+0x1b4>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
    
    // 清零速度滤波器
    actual_speed_left = 0.0f;
 8003426:	4b63      	ldr	r3, [pc, #396]	@ (80035b4 <Motor_PID_Init+0x1b8>)
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    actual_speed_right = 0.0f;
 800342e:	4b62      	ldr	r3, [pc, #392]	@ (80035b8 <Motor_PID_Init+0x1bc>)
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    
    // 清零PWM输出
    pwm_left = 0.0f;
 8003436:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <Motor_PID_Init+0x1c0>)
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    pwm_right = 0.0f;
 800343e:	4b60      	ldr	r3, [pc, #384]	@ (80035c0 <Motor_PID_Init+0x1c4>)
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
    
    // ========== 初始化角度环PID（外环）==========
    pid_angle.target_val = 0.0f;           // 目标角度（-180~180度）
 8003446:	4b5f      	ldr	r3, [pc, #380]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
    pid_angle.actual_val = 0.0f;           // PID输出值
 800344e:	4b5d      	ldr	r3, [pc, #372]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
    pid_angle.err = 0.0f;                  // 当前角度误差
 8003456:	4b5b      	ldr	r3, [pc, #364]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
    pid_angle.err_last = 0.0f;             // 上次角度误差
 800345e:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
    pid_angle.err_next = 0.0f;             // 预留
 8003466:	4b57      	ldr	r3, [pc, #348]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    pid_angle.integral = 0.0f;             // 积分累积值
 800346e:	4b55      	ldr	r3, [pc, #340]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	621a      	str	r2, [r3, #32]
    
    // 角度环PID参数（需根据实际调试）
    pid_angle.Kp = 0.025f;    // 比例系数（角度误差->速度调整量）
 8003476:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003478:	4a53      	ldr	r2, [pc, #332]	@ (80035c8 <Motor_PID_Init+0x1cc>)
 800347a:	615a      	str	r2, [r3, #20]
    pid_angle.Ki = 0.002f;   // 积分系数（消除稳态角度误差）
 800347c:	4b51      	ldr	r3, [pc, #324]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 800347e:	4a53      	ldr	r2, [pc, #332]	@ (80035cc <Motor_PID_Init+0x1d0>)
 8003480:	619a      	str	r2, [r3, #24]
    pid_angle.Kd = 0.04f;   // 微分系数（抑制转向震荡）
 8003482:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003484:	4a52      	ldr	r2, [pc, #328]	@ (80035d0 <Motor_PID_Init+0x1d4>)
 8003486:	61da      	str	r2, [r3, #28]
    
    // 变积分参数（用于PID_Angle内部）
    pid_angle.absmax = 30.0f;  // 误差大于30度时积分系数为0
 8003488:	4b4e      	ldr	r3, [pc, #312]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 800348a:	4a52      	ldr	r2, [pc, #328]	@ (80035d4 <Motor_PID_Init+0x1d8>)
 800348c:	629a      	str	r2, [r3, #40]	@ 0x28
    pid_angle.absmin = 3.0f;   // 误差小于3度时积分系数为1
 800348e:	4b4d      	ldr	r3, [pc, #308]	@ (80035c4 <Motor_PID_Init+0x1c8>)
 8003490:	4a51      	ldr	r2, [pc, #324]	@ (80035d8 <Motor_PID_Init+0x1dc>)
 8003492:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    target_yaw_angle = 0.0f;
 8003494:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <Motor_PID_Init+0x1e0>)
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    angle_control_output = 0.0f;
 800349c:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <Motor_PID_Init+0x1e4>)
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
    
    // ========== 初始化位置环PID（外环，与角度环并列）==========
    pid_position.target_val = 0.0f;        // 目标位置（厘米）
 80034a4:	4b4f      	ldr	r3, [pc, #316]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    pid_position.actual_val = 0.0f;        // PID输出值
 80034ac:	4b4d      	ldr	r3, [pc, #308]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	605a      	str	r2, [r3, #4]
    pid_position.err = 0.0f;               // 当前位置误差
 80034b4:	4b4b      	ldr	r3, [pc, #300]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
    pid_position.err_last = 0.0f;          // 上次位置误差
 80034bc:	4b49      	ldr	r3, [pc, #292]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
    pid_position.err_next = 0.0f;          // 预留
 80034c4:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
    pid_position.integral = 0.0f;          // 积分累积值
 80034cc:	4b45      	ldr	r3, [pc, #276]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
    
    // 位置环PID参数（需根据实际调试）
    pid_position.Kp = 0.04f;    // 比例系数（位置误差->速度控制量）
 80034d4:	4b43      	ldr	r3, [pc, #268]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034d6:	4a3e      	ldr	r2, [pc, #248]	@ (80035d0 <Motor_PID_Init+0x1d4>)
 80034d8:	615a      	str	r2, [r3, #20]
    pid_position.Ki = 0.002f;   // 积分系数（消除稳态位置误差）
 80034da:	4b42      	ldr	r3, [pc, #264]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034dc:	4a3b      	ldr	r2, [pc, #236]	@ (80035cc <Motor_PID_Init+0x1d0>)
 80034de:	619a      	str	r2, [r3, #24]
    pid_position.Kd = 0.02f;    // 微分系数（抑制震荡）
 80034e0:	4b40      	ldr	r3, [pc, #256]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034e2:	4a41      	ldr	r2, [pc, #260]	@ (80035e8 <Motor_PID_Init+0x1ec>)
 80034e4:	61da      	str	r2, [r3, #28]
    
    // 变积分参数（用于PID_Position内部）
    pid_position.absmax = 20.0f;  // 误差大于20cm时积分系数为0
 80034e6:	4b3f      	ldr	r3, [pc, #252]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034e8:	4a40      	ldr	r2, [pc, #256]	@ (80035ec <Motor_PID_Init+0x1f0>)
 80034ea:	629a      	str	r2, [r3, #40]	@ 0x28
    pid_position.absmin = 2.0f;   // 误差小于2cm时积分系数为1
 80034ec:	4b3d      	ldr	r3, [pc, #244]	@ (80035e4 <Motor_PID_Init+0x1e8>)
 80034ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    target_position = 0.0f;
 80034f4:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <Motor_PID_Init+0x1f4>)
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
    actual_position = 0.0f;
 80034fc:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <Motor_PID_Init+0x1f8>)
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    position_control_output = 0.0f;
 8003504:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <Motor_PID_Init+0x1fc>)
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
    
    // ========== 初始化左轮速度环PID（内环）==========
    pid_motor_left.target_val = 0.0f;      // 目标速度（RPS）
 800350c:	4b3b      	ldr	r3, [pc, #236]	@ (80035fc <Motor_PID_Init+0x200>)
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
    pid_motor_left.actual_val = 0.0f;      // PID输出值
 8003514:	4b39      	ldr	r3, [pc, #228]	@ (80035fc <Motor_PID_Init+0x200>)
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	605a      	str	r2, [r3, #4]
    pid_motor_left.err = 0.0f;             // 当前误差
 800351c:	4b37      	ldr	r3, [pc, #220]	@ (80035fc <Motor_PID_Init+0x200>)
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
    pid_motor_left.err_last = 0.0f;        // 上次误差
 8003524:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <Motor_PID_Init+0x200>)
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	60da      	str	r2, [r3, #12]
    pid_motor_left.err_next = 0.0f;        // 预留
 800352c:	4b33      	ldr	r3, [pc, #204]	@ (80035fc <Motor_PID_Init+0x200>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
    pid_motor_left.integral = 0.0f;        // 积分累积值
 8003534:	4b31      	ldr	r3, [pc, #196]	@ (80035fc <Motor_PID_Init+0x200>)
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	621a      	str	r2, [r3, #32]
    
    // PID参数（位置式PID，需根据实际调试）
    pid_motor_left.Kp = 0.8f;    // 比例系数（主要响应项）
 800353c:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <Motor_PID_Init+0x200>)
 800353e:	4a30      	ldr	r2, [pc, #192]	@ (8003600 <Motor_PID_Init+0x204>)
 8003540:	615a      	str	r2, [r3, #20]
    pid_motor_left.Ki = 0.02f;   // 积分系数（消除稳态误差）
 8003542:	4b2e      	ldr	r3, [pc, #184]	@ (80035fc <Motor_PID_Init+0x200>)
 8003544:	4a28      	ldr	r2, [pc, #160]	@ (80035e8 <Motor_PID_Init+0x1ec>)
 8003546:	619a      	str	r2, [r3, #24]
    pid_motor_left.Kd = 0.2f;    // 微分系数（抑制震荡）
 8003548:	4b2c      	ldr	r3, [pc, #176]	@ (80035fc <Motor_PID_Init+0x200>)
 800354a:	4a2e      	ldr	r2, [pc, #184]	@ (8003604 <Motor_PID_Init+0x208>)
 800354c:	61da      	str	r2, [r3, #28]
    
    // ========== 初始化右轮速度环PID（内环）==========
    pid_motor_right.target_val = 0.0f;
 800354e:	4b2e      	ldr	r3, [pc, #184]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
    pid_motor_right.actual_val = 0.0f;
 8003556:	4b2c      	ldr	r3, [pc, #176]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	605a      	str	r2, [r3, #4]
    pid_motor_right.err = 0.0f;
 800355e:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
    pid_motor_right.err_last = 0.0f;
 8003566:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    pid_motor_right.err_next = 0.0f;
 800356e:	4b26      	ldr	r3, [pc, #152]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
    pid_motor_right.integral = 0.0f;
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	621a      	str	r2, [r3, #32]
    
    // PID参数（位置式PID）
    pid_motor_right.Kp = 0.8f;
 800357e:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003580:	4a1f      	ldr	r2, [pc, #124]	@ (8003600 <Motor_PID_Init+0x204>)
 8003582:	615a      	str	r2, [r3, #20]
    pid_motor_right.Ki = 0.02f;
 8003584:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <Motor_PID_Init+0x20c>)
 8003586:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <Motor_PID_Init+0x1ec>)
 8003588:	619a      	str	r2, [r3, #24]
    pid_motor_right.Kd = 0.2f;
 800358a:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <Motor_PID_Init+0x20c>)
 800358c:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <Motor_PID_Init+0x208>)
 800358e:	61da      	str	r2, [r3, #28]
    
    last_control_time = HAL_GetTick();
 8003590:	f001 faee 	bl	8004b70 <HAL_GetTick>
 8003594:	4603      	mov	r3, r0
 8003596:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <Motor_PID_Init+0x210>)
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20001e94 	.word	0x20001e94
 80035a4:	20001fa0 	.word	0x20001fa0
 80035a8:	20001fa4 	.word	0x20001fa4
 80035ac:	20001fa8 	.word	0x20001fa8
 80035b0:	20001fac 	.word	0x20001fac
 80035b4:	20001e98 	.word	0x20001e98
 80035b8:	20001e9c 	.word	0x20001e9c
 80035bc:	20001f98 	.word	0x20001f98
 80035c0:	20001f9c 	.word	0x20001f9c
 80035c4:	20001f1c 	.word	0x20001f1c
 80035c8:	3ccccccd 	.word	0x3ccccccd
 80035cc:	3b03126f 	.word	0x3b03126f
 80035d0:	3d23d70a 	.word	0x3d23d70a
 80035d4:	41f00000 	.word	0x41f00000
 80035d8:	40400000 	.word	0x40400000
 80035dc:	20001f4c 	.word	0x20001f4c
 80035e0:	20001f50 	.word	0x20001f50
 80035e4:	20001f54 	.word	0x20001f54
 80035e8:	3ca3d70a 	.word	0x3ca3d70a
 80035ec:	41a00000 	.word	0x41a00000
 80035f0:	20001f84 	.word	0x20001f84
 80035f4:	20001f88 	.word	0x20001f88
 80035f8:	20001f8c 	.word	0x20001f8c
 80035fc:	20001ebc 	.word	0x20001ebc
 8003600:	3f4ccccd 	.word	0x3f4ccccd
 8003604:	3e4ccccd 	.word	0x3e4ccccd
 8003608:	20001eec 	.word	0x20001eec
 800360c:	20001ea0 	.word	0x20001ea0

08003610 <Motor_PID_Control>:
 * @param htim_encoder_left 左轮编码器定时器句柄（TIM3）
 * @param htim_encoder_right 右轮编码器定时器句柄（TIM2）
 * @note 外环：位置环+角度环（并列），内环：速度环控制电机转速
 */
void Motor_PID_Control(TIM_HandleTypeDef *htim_pwm, TIM_HandleTypeDef *htim_encoder_left, 
                       TIM_HandleTypeDef *htim_encoder_right) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b090      	sub	sp, #64	@ 0x40
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
    uint32_t current_time = HAL_GetTick();
 800361c:	f001 faa8 	bl	8004b70 <HAL_GetTick>
 8003620:	6338      	str	r0, [r7, #48]	@ 0x30
    
    // 每20ms执行一次PID控制（50Hz）
    if (current_time - last_control_time < CONTROL_INTERVAL) {
 8003622:	4b5c      	ldr	r3, [pc, #368]	@ (8003794 <Motor_PID_Control+0x184>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b13      	cmp	r3, #19
 800362c:	f240 81e5 	bls.w	80039fa <Motor_PID_Control+0x3ea>
        return;
    }
    
    float dt = (current_time - last_control_time) / 1000.0f;
 8003630:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <Motor_PID_Control+0x184>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003640:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8003798 <Motor_PID_Control+0x188>
 8003644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003648:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    last_control_time = current_time;
 800364c:	4a51      	ldr	r2, [pc, #324]	@ (8003794 <Motor_PID_Control+0x184>)
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	6013      	str	r3, [r2, #0]
    
    // ========== 步骤1：读取编码器，获取当前速度 ==========
    float l_spd_raw, r_spd_raw;
    Encoder_GetSpeeds(htim_encoder_left, htim_encoder_right, &l_spd_raw, &r_spd_raw, dt);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	f107 0218 	add.w	r2, r7, #24
 800365a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	68b8      	ldr	r0, [r7, #8]
 8003662:	f7ff fcd3 	bl	800300c <Encoder_GetSpeeds>
    
    // 低通滤波，减少速度噪声
//    actual_speed_left  = (1.0f - SPEED_LPF_ALPHA) * actual_speed_left  + SPEED_LPF_ALPHA * l_spd_raw;
//    actual_speed_right = (1.0f - SPEED_LPF_ALPHA) * actual_speed_right + SPEED_LPF_ALPHA * r_spd_raw;
    actual_speed_left  =  l_spd_raw;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4a4c      	ldr	r2, [pc, #304]	@ (800379c <Motor_PID_Control+0x18c>)
 800366a:	6013      	str	r3, [r2, #0]
    actual_speed_right =  r_spd_raw;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4a4c      	ldr	r2, [pc, #304]	@ (80037a0 <Motor_PID_Control+0x190>)
 8003670:	6013      	str	r3, [r2, #0]
    
    // ========== 步骤2：计算位置累积（两轮平均）==========
    // 计算本次采样周期内行驶的距离（厘米）
    float avg_speed_rps = (actual_speed_left + actual_speed_right) / 2.0f;  // 平均速度（RPS）
 8003672:	4b4a      	ldr	r3, [pc, #296]	@ (800379c <Motor_PID_Control+0x18c>)
 8003674:	ed93 7a00 	vldr	s14, [r3]
 8003678:	4b49      	ldr	r3, [pc, #292]	@ (80037a0 <Motor_PID_Control+0x190>)
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003682:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800368a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float distance_increment = avg_speed_rps * WHEEL_CIRCUMFERENCE_CM * dt * position_calibration_factor;  // 本次行驶距离（厘米，含校准）
 800368e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003692:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80037a4 <Motor_PID_Control+0x194>
 8003696:	ee27 7a87 	vmul.f32	s14, s15, s14
 800369a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800369e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a2:	4b41      	ldr	r3, [pc, #260]	@ (80037a8 <Motor_PID_Control+0x198>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    actual_position += distance_increment;  // 累积到总位置
 80036b0:	4b3e      	ldr	r3, [pc, #248]	@ (80037ac <Motor_PID_Control+0x19c>)
 80036b2:	ed93 7a00 	vldr	s14, [r3]
 80036b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80036ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036be:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <Motor_PID_Control+0x19c>)
 80036c0:	edc3 7a00 	vstr	s15, [r3]
    
    // ========== 步骤3：位置环PID控制（外环1）==========
    // 调用PID_Position计算位置环输出（速度控制量）
    position_control_output = PID_Position(&pid_position, target_position, actual_position);
 80036c4:	4b3a      	ldr	r3, [pc, #232]	@ (80037b0 <Motor_PID_Control+0x1a0>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	4b38      	ldr	r3, [pc, #224]	@ (80037ac <Motor_PID_Control+0x19c>)
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	eef0 0a47 	vmov.f32	s1, s14
 80036d4:	eeb0 0a67 	vmov.f32	s0, s15
 80036d8:	4836      	ldr	r0, [pc, #216]	@ (80037b4 <Motor_PID_Control+0x1a4>)
 80036da:	f000 fc25 	bl	8003f28 <PID_Position>
 80036de:	eef0 7a40 	vmov.f32	s15, s0
 80036e2:	4b35      	ldr	r3, [pc, #212]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
    

    if (position_control_output > POSITION_OUTPUT_LIMIT) {
 80036e8:	4b33      	ldr	r3, [pc, #204]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80036f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	dd04      	ble.n	8003706 <Motor_PID_Control+0xf6>
        position_control_output = POSITION_OUTPUT_LIMIT;
 80036fc:	4b2e      	ldr	r3, [pc, #184]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 80036fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e00d      	b.n	8003722 <Motor_PID_Control+0x112>
    } else if (position_control_output < -POSITION_OUTPUT_LIMIT) {
 8003706:	4b2c      	ldr	r3, [pc, #176]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	d503      	bpl.n	8003722 <Motor_PID_Control+0x112>
        position_control_output = -POSITION_OUTPUT_LIMIT;
 800371a:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 800371c:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8003720:	601a      	str	r2, [r3, #0]
    }
    

    position_output_filtered = position_output_filtered * (1.0f - POSITION_RAMP_RATE) 
 8003722:	4b26      	ldr	r3, [pc, #152]	@ (80037bc <Motor_PID_Control+0x1ac>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80037c0 <Motor_PID_Control+0x1b0>
 800372c:	ee27 7a87 	vmul.f32	s14, s15, s14
                              + position_control_output * POSITION_RAMP_RATE;
 8003730:	4b21      	ldr	r3, [pc, #132]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80037c4 <Motor_PID_Control+0x1b4>
 800373a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800373e:	ee77 7a27 	vadd.f32	s15, s14, s15
    position_output_filtered = position_output_filtered * (1.0f - POSITION_RAMP_RATE) 
 8003742:	4b1e      	ldr	r3, [pc, #120]	@ (80037bc <Motor_PID_Control+0x1ac>)
 8003744:	edc3 7a00 	vstr	s15, [r3]
    position_control_output = position_output_filtered;
 8003748:	4b1c      	ldr	r3, [pc, #112]	@ (80037bc <Motor_PID_Control+0x1ac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <Motor_PID_Control+0x1a8>)
 800374e:	6013      	str	r3, [r2, #0]
    
    // ========== 步骤4：角度环PID控制（外环2）==========
    // 调用PID_Angle计算角度环输出（差速控制量）
    angle_control_output = PID_Angle(&pid_angle, target_yaw_angle, current_yaw_angle);
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <Motor_PID_Control+0x1b8>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <Motor_PID_Control+0x1bc>)
 8003758:	ed93 7a00 	vldr	s14, [r3]
 800375c:	eef0 0a47 	vmov.f32	s1, s14
 8003760:	eeb0 0a67 	vmov.f32	s0, s15
 8003764:	481a      	ldr	r0, [pc, #104]	@ (80037d0 <Motor_PID_Control+0x1c0>)
 8003766:	f000 fb19 	bl	8003d9c <PID_Angle>
 800376a:	eef0 7a40 	vmov.f32	s15, s0
 800376e:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <Motor_PID_Control+0x1c4>)
 8003770:	edc3 7a00 	vstr	s15, [r3]
    

    if (angle_control_output > ANGLE_OUTPUT_LIMIT) {
 8003774:	4b17      	ldr	r3, [pc, #92]	@ (80037d4 <Motor_PID_Control+0x1c4>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800377e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	dd27      	ble.n	80037d8 <Motor_PID_Control+0x1c8>
        angle_control_output = ANGLE_OUTPUT_LIMIT;
 8003788:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <Motor_PID_Control+0x1c4>)
 800378a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e030      	b.n	80037f4 <Motor_PID_Control+0x1e4>
 8003792:	bf00      	nop
 8003794:	20001ea0 	.word	0x20001ea0
 8003798:	447a0000 	.word	0x447a0000
 800379c:	20001e98 	.word	0x20001e98
 80037a0:	20001e9c 	.word	0x20001e9c
 80037a4:	41bc7edd 	.word	0x41bc7edd
 80037a8:	20000008 	.word	0x20000008
 80037ac:	20001f88 	.word	0x20001f88
 80037b0:	20001f84 	.word	0x20001f84
 80037b4:	20001f54 	.word	0x20001f54
 80037b8:	20001f8c 	.word	0x20001f8c
 80037bc:	20001f90 	.word	0x20001f90
 80037c0:	3f666666 	.word	0x3f666666
 80037c4:	3dcccccd 	.word	0x3dcccccd
 80037c8:	20001f4c 	.word	0x20001f4c
 80037cc:	20001ea4 	.word	0x20001ea4
 80037d0:	20001f1c 	.word	0x20001f1c
 80037d4:	20001f50 	.word	0x20001f50
    } else if (angle_control_output < -ANGLE_OUTPUT_LIMIT) {
 80037d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a04 <Motor_PID_Control+0x3f4>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80037e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	d503      	bpl.n	80037f4 <Motor_PID_Control+0x1e4>
        angle_control_output = -ANGLE_OUTPUT_LIMIT;
 80037ec:	4b85      	ldr	r3, [pc, #532]	@ (8003a04 <Motor_PID_Control+0x3f4>)
 80037ee:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80037f2:	601a      	str	r2, [r3, #0]
    }
    

    angle_output_filtered = angle_output_filtered * (1.0f - ANGLE_RAMP_RATE) 
 80037f4:	4b84      	ldr	r3, [pc, #528]	@ (8003a08 <Motor_PID_Control+0x3f8>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8003a0c <Motor_PID_Control+0x3fc>
 80037fe:	ee27 7a87 	vmul.f32	s14, s15, s14
                           + angle_control_output * ANGLE_RAMP_RATE;
 8003802:	4b80      	ldr	r3, [pc, #512]	@ (8003a04 <Motor_PID_Control+0x3f4>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003a10 <Motor_PID_Control+0x400>
 800380c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003810:	ee77 7a27 	vadd.f32	s15, s14, s15
    angle_output_filtered = angle_output_filtered * (1.0f - ANGLE_RAMP_RATE) 
 8003814:	4b7c      	ldr	r3, [pc, #496]	@ (8003a08 <Motor_PID_Control+0x3f8>)
 8003816:	edc3 7a00 	vstr	s15, [r3]
    angle_control_output = angle_output_filtered;
 800381a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a08 <Motor_PID_Control+0x3f8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a79      	ldr	r2, [pc, #484]	@ (8003a04 <Motor_PID_Control+0x3f4>)
 8003820:	6013      	str	r3, [r2, #0]
    
    // ========== 步骤5：合成速度环目标 ==========
    // 位置环输出作为基础速度，角度环输出作为差速调整
    target_speed_left = base_speed_left + position_control_output - angle_control_output;
 8003822:	4b7c      	ldr	r3, [pc, #496]	@ (8003a14 <Motor_PID_Control+0x404>)
 8003824:	ed93 7a00 	vldr	s14, [r3]
 8003828:	4b7b      	ldr	r3, [pc, #492]	@ (8003a18 <Motor_PID_Control+0x408>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003832:	4b74      	ldr	r3, [pc, #464]	@ (8003a04 <Motor_PID_Control+0x3f4>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383c:	4b77      	ldr	r3, [pc, #476]	@ (8003a1c <Motor_PID_Control+0x40c>)
 800383e:	edc3 7a00 	vstr	s15, [r3]
    target_speed_right = base_speed_right + position_control_output + angle_control_output;
 8003842:	4b77      	ldr	r3, [pc, #476]	@ (8003a20 <Motor_PID_Control+0x410>)
 8003844:	ed93 7a00 	vldr	s14, [r3]
 8003848:	4b73      	ldr	r3, [pc, #460]	@ (8003a18 <Motor_PID_Control+0x408>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003852:	4b6c      	ldr	r3, [pc, #432]	@ (8003a04 <Motor_PID_Control+0x3f4>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385c:	4b71      	ldr	r3, [pc, #452]	@ (8003a24 <Motor_PID_Control+0x414>)
 800385e:	edc3 7a00 	vstr	s15, [r3]
    
    // ========== 步骤6：左轮速度环PID控制（内环）==========
    pid_motor_left.target_val = target_speed_left;   // 设置目标速度
 8003862:	4b6e      	ldr	r3, [pc, #440]	@ (8003a1c <Motor_PID_Control+0x40c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a70      	ldr	r2, [pc, #448]	@ (8003a28 <Motor_PID_Control+0x418>)
 8003868:	6013      	str	r3, [r2, #0]
    float pid_output_left = PID_location(&pid_motor_left, actual_speed_left);
 800386a:	4b70      	ldr	r3, [pc, #448]	@ (8003a2c <Motor_PID_Control+0x41c>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eeb0 0a67 	vmov.f32	s0, s15
 8003874:	486c      	ldr	r0, [pc, #432]	@ (8003a28 <Motor_PID_Control+0x418>)
 8003876:	f000 f9bf 	bl	8003bf8 <PID_location>
 800387a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
    
    // 限幅处理（-1.0 ~ 1.0）
    if (pid_output_left > 1.0f) pid_output_left = 1.0f;
 800387e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388e:	dd02      	ble.n	8003896 <Motor_PID_Control+0x286>
 8003890:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (pid_output_left < -1.0f) pid_output_left = -1.0f;
 8003896:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800389a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800389e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d501      	bpl.n	80038ac <Motor_PID_Control+0x29c>
 80038a8:	4b61      	ldr	r3, [pc, #388]	@ (8003a30 <Motor_PID_Control+0x420>)
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    pwm_left = pid_output_left;
 80038ac:	4a61      	ldr	r2, [pc, #388]	@ (8003a34 <Motor_PID_Control+0x424>)
 80038ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b0:	6013      	str	r3, [r2, #0]

    // ========== 步骤7：右轮速度环PID控制（内环）==========
    pid_motor_right.target_val = target_speed_right;  // 设置目标速度
 80038b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a24 <Motor_PID_Control+0x414>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a60      	ldr	r2, [pc, #384]	@ (8003a38 <Motor_PID_Control+0x428>)
 80038b8:	6013      	str	r3, [r2, #0]
    float pid_output_right = PID_location(&pid_motor_right, actual_speed_right);
 80038ba:	4b60      	ldr	r3, [pc, #384]	@ (8003a3c <Motor_PID_Control+0x42c>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	485c      	ldr	r0, [pc, #368]	@ (8003a38 <Motor_PID_Control+0x428>)
 80038c6:	f000 f997 	bl	8003bf8 <PID_location>
 80038ca:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
    
    // 限幅处理（-1.0 ~ 1.0）
    if (pid_output_right > 1.0f) pid_output_right = 1.0f;
 80038ce:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80038d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	dd02      	ble.n	80038e6 <Motor_PID_Control+0x2d6>
 80038e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (pid_output_right < -1.0f) pid_output_right = -1.0f;
 80038e6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80038ea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80038ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d501      	bpl.n	80038fc <Motor_PID_Control+0x2ec>
 80038f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a30 <Motor_PID_Control+0x420>)
 80038fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    pwm_right = pid_output_right;
 80038fc:	4a50      	ldr	r2, [pc, #320]	@ (8003a40 <Motor_PID_Control+0x430>)
 80038fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003900:	6013      	str	r3, [r2, #0]
    
    // ========== 步骤8：应用PWM到电机 ==========
    if(CTL!=1){
 8003902:	4b50      	ldr	r3, [pc, #320]	@ (8003a44 <Motor_PID_Control+0x434>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d011      	beq.n	800392e <Motor_PID_Control+0x31e>
    Motor_SetSpeed(htim_pwm, MOTOR_LEFT, pwm_left);
 800390a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a34 <Motor_PID_Control+0x424>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eeb0 0a67 	vmov.f32	s0, s15
 8003914:	2101      	movs	r1, #1
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fce0 	bl	80032dc <Motor_SetSpeed>
    Motor_SetSpeed(htim_pwm, MOTOR_RIGHT, pwm_right);
 800391c:	4b48      	ldr	r3, [pc, #288]	@ (8003a40 <Motor_PID_Control+0x430>)
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	eeb0 0a67 	vmov.f32	s0, s15
 8003926:	2102      	movs	r1, #2
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff fcd7 	bl	80032dc <Motor_SetSpeed>
    }
    // ========== 步骤9：检测死区并发送完成信号 ==========
    // 计算位置和角度误差
    float position_error = fabsf(actual_position - target_position);
 800392e:	4b46      	ldr	r3, [pc, #280]	@ (8003a48 <Motor_PID_Control+0x438>)
 8003930:	ed93 7a00 	vldr	s14, [r3]
 8003934:	4b45      	ldr	r3, [pc, #276]	@ (8003a4c <Motor_PID_Control+0x43c>)
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800393e:	eef0 7ae7 	vabs.f32	s15, s15
 8003942:	edc7 7a08 	vstr	s15, [r7, #32]
    float angle_error = target_yaw_angle - current_yaw_angle;
 8003946:	4b42      	ldr	r3, [pc, #264]	@ (8003a50 <Motor_PID_Control+0x440>)
 8003948:	ed93 7a00 	vldr	s14, [r3]
 800394c:	4b41      	ldr	r3, [pc, #260]	@ (8003a54 <Motor_PID_Control+0x444>)
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003956:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (angle_error > 180.0f) angle_error -= 360.0f;
 800395a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800395e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003a58 <Motor_PID_Control+0x448>
 8003962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	dd07      	ble.n	800397c <Motor_PID_Control+0x36c>
 800396c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003970:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003a5c <Motor_PID_Control+0x44c>
 8003974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003978:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (angle_error < -180.0f) angle_error += 360.0f;
 800397c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003980:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003a60 <Motor_PID_Control+0x450>
 8003984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398c:	d507      	bpl.n	800399e <Motor_PID_Control+0x38e>
 800398e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003992:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003a5c <Motor_PID_Control+0x44c>
 8003996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800399a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    angle_error = fabsf(angle_error);
 800399e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80039a2:	eef0 7ae7 	vabs.f32	s15, s15
 80039a6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 检查是否都在死区内
    uint8_t in_position_deadzone = (position_error < 0.5f);
 80039aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80039ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	bf4c      	ite	mi
 80039bc:	2301      	movmi	r3, #1
 80039be:	2300      	movpl	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	77fb      	strb	r3, [r7, #31]
    uint8_t in_angle_deadzone = (angle_error < 1.5f);
 80039c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80039c8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80039cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	bf4c      	ite	mi
 80039d6:	2301      	movmi	r3, #1
 80039d8:	2300      	movpl	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	77bb      	strb	r3, [r7, #30]

    
    // ========== 步骤10：调试输出（位置环+角度环信息，每10次输出一次）==========
    static uint8_t debug_counter = 0;
    if (++debug_counter >= 10) {
 80039de:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <Motor_PID_Control+0x454>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a64 <Motor_PID_Control+0x454>)
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <Motor_PID_Control+0x454>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b09      	cmp	r3, #9
 80039f0:	d904      	bls.n	80039fc <Motor_PID_Control+0x3ec>
        debug_counter = 0;
 80039f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <Motor_PID_Control+0x454>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e000      	b.n	80039fc <Motor_PID_Control+0x3ec>
        return;
 80039fa:	bf00      	nop
//                target_position, actual_position, position_control_output,
//                target_yaw_angle, current_yaw_angle, angle_control_output,
//                actual_speed_left, actual_speed_right, pwm_left, pwm_right);
//        HAL_UART_Transmit(&huart4, (uint8_t*)debug_msg, strlen(debug_msg), 100);
    }
}
 80039fc:	3740      	adds	r7, #64	@ 0x40
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20001f50 	.word	0x20001f50
 8003a08:	20001f94 	.word	0x20001f94
 8003a0c:	3f4ccccd 	.word	0x3f4ccccd
 8003a10:	3e4ccccd 	.word	0x3e4ccccd
 8003a14:	20001fa8 	.word	0x20001fa8
 8003a18:	20001f8c 	.word	0x20001f8c
 8003a1c:	20001fa0 	.word	0x20001fa0
 8003a20:	20001fac 	.word	0x20001fac
 8003a24:	20001fa4 	.word	0x20001fa4
 8003a28:	20001ebc 	.word	0x20001ebc
 8003a2c:	20001e98 	.word	0x20001e98
 8003a30:	bf800000 	.word	0xbf800000
 8003a34:	20001f98 	.word	0x20001f98
 8003a38:	20001eec 	.word	0x20001eec
 8003a3c:	20001e9c 	.word	0x20001e9c
 8003a40:	20001f9c 	.word	0x20001f9c
 8003a44:	200005aa 	.word	0x200005aa
 8003a48:	20001f88 	.word	0x20001f88
 8003a4c:	20001f84 	.word	0x20001f84
 8003a50:	20001f4c 	.word	0x20001f4c
 8003a54:	20001ea4 	.word	0x20001ea4
 8003a58:	43340000 	.word	0x43340000
 8003a5c:	43b40000 	.word	0x43b40000
 8003a60:	c3340000 	.word	0xc3340000
 8003a64:	20001fb0 	.word	0x20001fb0

08003a68 <Motor_SetTargetSpeed>:
 * @brief 设置左右轮基础目标速度（角度环叠加前）
 * @param left_rps 左轮目标速度（RPS，圈/秒，可为负值表示后退）
 * @param right_rps 右轮目标速度（RPS，圈/秒，可为负值表示后退）
 * @note 角度环输出会叠加到此速度上，形成最终速度环目标
 */
void Motor_SetTargetSpeed(float left_rps, float right_rps) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a72:	edc7 0a00 	vstr	s1, [r7]
    base_speed_left = left_rps;
 8003a76:	4a06      	ldr	r2, [pc, #24]	@ (8003a90 <Motor_SetTargetSpeed+0x28>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6013      	str	r3, [r2, #0]
    base_speed_right = right_rps;
 8003a7c:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <Motor_SetTargetSpeed+0x2c>)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6013      	str	r3, [r2, #0]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20001fa8 	.word	0x20001fa8
 8003a94:	20001fac 	.word	0x20001fac

08003a98 <Motor_SetTargetPosition>:
 * @example
 *   Motor_ResetPosition();          // 清零位置
 *   Motor_SetTargetPosition(50.0f); // 前进50cm
 *   Motor_SetTargetPosition(-30.0f); // 后退30cm
 */
void Motor_SetTargetPosition(float target_pos) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	ed87 0a01 	vstr	s0, [r7, #4]
    target_position = target_pos;
 8003aa2:	4a04      	ldr	r2, [pc, #16]	@ (8003ab4 <Motor_SetTargetPosition+0x1c>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20001f84 	.word	0x20001f84

08003ab8 <Motor_GetActualSpeed>:
/**
 * @brief 获取实际速度（经过滤波的速度值）
 * @param left_rps 输出：左轮实际速度（单位：RPS）
 * @param right_rps 输出：右轮实际速度（单位：RPS）
 */
void Motor_GetActualSpeed(float *left_rps, float *right_rps) {
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    *left_rps = actual_speed_left;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <Motor_GetActualSpeed+0x28>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
    *right_rps = actual_speed_right;
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <Motor_GetActualSpeed+0x2c>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20001e98 	.word	0x20001e98
 8003ae4:	20001e9c 	.word	0x20001e9c

08003ae8 <Motor_Command_MoveForward>:
 * @example
 *   Motor_Command_MoveForward(60.0f, 0);  // 前进60cm（非阻塞）
 *   // 在主循环中调用Motor_PID_Control()
 *   // 当收到'Z'时表示到达目标
 */
int Motor_Command_MoveForward(float distance_cm, uint32_t timeout_ms) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8003af2:	6038      	str	r0, [r7, #0]
    (void)timeout_ms;  // 未使用的参数
    
    // 记录起始位置
    float start_position = target_position;
 8003af4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <Motor_Command_MoveForward+0x40>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
    float target_pos = start_position + distance_cm;
 8003afa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b06:	edc7 7a02 	vstr	s15, [r7, #8]
    
    // 设置目标（非阻塞）
    Motor_SetTargetPosition(target_pos);
 8003b0a:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b0e:	f7ff ffc3 	bl	8003a98 <Motor_SetTargetPosition>
    Motor_SetTargetSpeed(0.0f, 0.0f);     // 基础速度为0，让位置环控制
 8003b12:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8003b2c <Motor_Command_MoveForward+0x44>
 8003b16:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003b2c <Motor_Command_MoveForward+0x44>
 8003b1a:	f7ff ffa5 	bl	8003a68 <Motor_SetTargetSpeed>
    
    return 0;  // 立即返回
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20001f84 	.word	0x20001f84
 8003b2c:	00000000 	.word	0x00000000

08003b30 <Motor_Command_TurnLeft>:
 * @example
 *   Motor_Command_TurnLeft(90.0f, 0);  // 左转90度（非阻塞）
 *   // 在主循环中调用Motor_PID_Control()
 *   // 当收到'Z'时表示到达目标
 */
int Motor_Command_TurnLeft(float angle_deg, uint32_t timeout_ms) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b3a:	6038      	str	r0, [r7, #0]
    (void)timeout_ms;  // 未使用的参数
    
    // 直接在目标角度上累加（避免累积误差）
    target_yaw_angle += angle_deg;
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b4c:	edc3 7a00 	vstr	s15, [r3]
    
    // 角度归一化到-180~180
    while (target_yaw_angle > 180.0f) target_yaw_angle -= 360.0f;
 8003b50:	e009      	b.n	8003b66 <Motor_Command_TurnLeft+0x36>
 8003b52:	4b1a      	ldr	r3, [pc, #104]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003bc0 <Motor_Command_TurnLeft+0x90>
 8003b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b60:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b62:	edc3 7a00 	vstr	s15, [r3]
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003bc4 <Motor_Command_TurnLeft+0x94>
 8003b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b78:	dceb      	bgt.n	8003b52 <Motor_Command_TurnLeft+0x22>
    while (target_yaw_angle < -180.0f) target_yaw_angle += 360.0f;
 8003b7a:	e009      	b.n	8003b90 <Motor_Command_TurnLeft+0x60>
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003bc0 <Motor_Command_TurnLeft+0x90>
 8003b86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b8c:	edc3 7a00 	vstr	s15, [r3]
 8003b90:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <Motor_Command_TurnLeft+0x8c>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003bc8 <Motor_Command_TurnLeft+0x98>
 8003b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	d4eb      	bmi.n	8003b7c <Motor_Command_TurnLeft+0x4c>
    
    // 设置基础速度为0（原地转向）
    Motor_SetTargetSpeed(0.0f, 0.0f);
 8003ba4:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8003bcc <Motor_Command_TurnLeft+0x9c>
 8003ba8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003bcc <Motor_Command_TurnLeft+0x9c>
 8003bac:	f7ff ff5c 	bl	8003a68 <Motor_SetTargetSpeed>
    
    return 0;  // 立即返回
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20001f4c 	.word	0x20001f4c
 8003bc0:	43b40000 	.word	0x43b40000
 8003bc4:	43340000 	.word	0x43340000
 8003bc8:	c3340000 	.word	0xc3340000
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <Motor_Command_TurnRight>:
 * @example
 *   Motor_Command_TurnRight(90.0f, 0);  // 右转90度（非阻塞）
 *   // 在主循环中调用Motor_PID_Control()
 *   // 当收到'Z'时表示到达目标
 */
int Motor_Command_TurnRight(float angle_deg, uint32_t timeout_ms) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bda:	6038      	str	r0, [r7, #0]
    // 右转就是左转负角度
    return Motor_Command_TurnLeft(-angle_deg, timeout_ms);
 8003bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003be0:	eef1 7a67 	vneg.f32	s15, s15
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bea:	f7ff ffa1 	bl	8003b30 <Motor_Command_TurnLeft>
 8003bee:	4603      	mov	r3, r0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <PID_location>:

	return pid->actual_val;
}

float PID_location(_pid *pid, float actual_val)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	ed87 0a00 	vstr	s0, [r7]
	// 计算误差
	pid->err = pid->target_val - actual_val;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	ed93 7a00 	vldr	s14, [r3]
 8003c0a:	edd7 7a00 	vldr	s15, [r7]
 8003c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edc3 7a02 	vstr	s15, [r3, #8]
	
	// 积分累加（先累加再使用）
	pid->integral += pid->err;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	ed93 7a08 	vldr	s14, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	edc3 7a08 	vstr	s15, [r3, #32]
	
	// 积分限幅（防止积分饱和）
	#define INTEGRAL_MAX_LIMIT 30.0f
	if (pid->integral > INTEGRAL_MAX_LIMIT) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c34:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	dd03      	ble.n	8003c4a <PID_location+0x52>
		pid->integral = INTEGRAL_MAX_LIMIT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a21      	ldr	r2, [pc, #132]	@ (8003ccc <PID_location+0xd4>)
 8003c46:	621a      	str	r2, [r3, #32]
 8003c48:	e00c      	b.n	8003c64 <PID_location+0x6c>
	} else if (pid->integral < -INTEGRAL_MAX_LIMIT) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c50:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8003c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5c:	d502      	bpl.n	8003c64 <PID_location+0x6c>
		pid->integral = -INTEGRAL_MAX_LIMIT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd0 <PID_location+0xd8>)
 8003c62:	621a      	str	r2, [r3, #32]
	}
	
	// 位置式PID计算：输出 = Kp*e + Ki*∫e + Kd*Δe
	pid->actual_val = pid->Kp * pid->err                    // 比例项
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c70:	ee27 7a27 	vmul.f32	s14, s14, s15
	                + pid->Ki * pid->integral               // 积分项（使用累积值）
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	edd3 6a06 	vldr	s13, [r3, #24]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c84:	ee37 7a27 	vadd.f32	s14, s14, s15
	                + pid->Kd * (pid->err - pid->err_last); // 微分项
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	edd3 6a07 	vldr	s13, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	ed93 6a02 	vldr	s12, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->actual_val = pid->Kp * pid->err                    // 比例项
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	edc3 7a01 	vstr	s15, [r3, #4]
	
	// 更新误差历史
	pid->err_last = pid->err;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]
	
	return pid->actual_val;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	ee07 3a90 	vmov	s15, r3
}
 8003cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	41f00000 	.word	0x41f00000
 8003cd0:	c1f00000 	.word	0xc1f00000

08003cd4 <VariableIntegralCoefficient>:
//		/*返回当前实际值*/
//    return pid.actual_val;
//}

static float VariableIntegralCoefficient(float error)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	ed87 0a01 	vstr	s0, [r7, #4]
  float factor=0.0;
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]

 if(abs(error)<= (pid.absmin))
 8003ce4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cec:	ee17 3a90 	vmov	r3, s15
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bfb8      	it	lt
 8003cf4:	425b      	neglt	r3, r3
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cfe:	4b26      	ldr	r3, [pc, #152]	@ (8003d98 <VariableIntegralCoefficient+0xc4>)
 8003d00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	d803      	bhi.n	8003d16 <VariableIntegralCoefficient+0x42>
  {
   factor=1.0;
 8003d0e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e036      	b.n	8003d84 <VariableIntegralCoefficient+0xb0>
  }
  else if(abs(error) > pid.absmax)
 8003d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d1e:	ee17 3a90 	vmov	r3, s15
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfb8      	it	lt
 8003d26:	425b      	neglt	r3, r3
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d30:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <VariableIntegralCoefficient+0xc4>)
 8003d32:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3e:	dd03      	ble.n	8003d48 <VariableIntegralCoefficient+0x74>
  {
   factor=0.0;
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e01d      	b.n	8003d84 <VariableIntegralCoefficient+0xb0>
  }
  else
  {
   factor=( pid.absmax-abs(error))/( pid.absmax- pid.absmin);
 8003d48:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <VariableIntegralCoefficient+0xc4>)
 8003d4a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	ee17 3a90 	vmov	r3, s15
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	425b      	neglt	r3, r3
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <VariableIntegralCoefficient+0xc4>)
 8003d6e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <VariableIntegralCoefficient+0xc4>)
 8003d74:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003d78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d80:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  return factor;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	ee07 3a90 	vmov	s15, r3
}
 8003d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20001fb4 	.word	0x20001fb4

08003d9c <PID_Angle>:
 * @param actual_angle 当前角度（-180~180度）
 * @return PID输出值（控制量）
 * @note 自动选择最短路径转向，死区1.5度
 */
float PID_Angle(_pid *pid, float target_angle, float actual_angle)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003da8:	edc7 0a01 	vstr	s1, [r7, #4]
	// ========== 步骤1：计算角度误差（最短路径）==========
	float angle_error = target_angle - actual_angle;
 8003dac:	ed97 7a02 	vldr	s14, [r7, #8]
 8003db0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db8:	edc7 7a07 	vstr	s15, [r7, #28]
	
	// 处理-180/180边界跨越问题（选择最短路径）
	if (angle_error > 180.0f) {
 8003dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dc0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003f0c <PID_Angle+0x170>
 8003dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	dd08      	ble.n	8003de0 <PID_Angle+0x44>
		angle_error -= 360.0f;  // 例如：目标=-170，当前=170，误差=20，修正为-340 -> 顺时针转20度
 8003dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003f10 <PID_Angle+0x174>
 8003dd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
 8003dde:	e010      	b.n	8003e02 <PID_Angle+0x66>
	} else if (angle_error < -180.0f) {
 8003de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003de4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003f14 <PID_Angle+0x178>
 8003de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df0:	d507      	bpl.n	8003e02 <PID_Angle+0x66>
		angle_error += 360.0f;  // 例如：目标=170，当前=-170，误差=340，修正为-20 -> 逆时针转20度
 8003df2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003df6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8003f10 <PID_Angle+0x174>
 8003dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfe:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	
	// ========== 步骤2：死区控制（小于1.5度不动作）==========
	#define ANGLE_DEADZONE 1.5f
	if (fabsf(angle_error) < ANGLE_DEADZONE) {
 8003e02:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e06:	eef0 7ae7 	vabs.f32	s15, s15
 8003e0a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	d50e      	bpl.n	8003e36 <PID_Angle+0x9a>
		// 在死区内，清零输出和积分，避免抖动
		pid->actual_val = 0.0f;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
		pid->integral = 0.0f;  // 防止积分累积
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	621a      	str	r2, [r3, #32]
		pid->err_last = 0.0f;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	60da      	str	r2, [r3, #12]
		return 0.0f;
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e063      	b.n	8003efe <PID_Angle+0x162>
	}
	
	// ========== 步骤3：位置式PID计算 ==========
	pid->err = angle_error;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	609a      	str	r2, [r3, #8]
	
	// 积分累加（变积分系数）
	float factor = VariableIntegralCoefficient(pid->err);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e42:	eeb0 0a67 	vmov.f32	s0, s15
 8003e46:	f7ff ff45 	bl	8003cd4 <VariableIntegralCoefficient>
 8003e4a:	ed87 0a06 	vstr	s0, [r7, #24]
	float effective_Ki = pid->Ki * factor;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e54:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5c:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->integral += pid->err;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	ed93 7a08 	vldr	s14, [r3, #32]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	edc3 7a08 	vstr	s15, [r3, #32]
	
	// 积分限幅（防止积分饱和）
	#define ANGLE_INTEGRAL_LIMIT 50.0f
	if (pid->integral > ANGLE_INTEGRAL_LIMIT) {
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e7c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003f18 <PID_Angle+0x17c>
 8003e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e88:	dd03      	ble.n	8003e92 <PID_Angle+0xf6>
		pid->integral = ANGLE_INTEGRAL_LIMIT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <PID_Angle+0x180>)
 8003e8e:	621a      	str	r2, [r3, #32]
 8003e90:	e00c      	b.n	8003eac <PID_Angle+0x110>
	} else if (pid->integral < -ANGLE_INTEGRAL_LIMIT) {
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e98:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003f20 <PID_Angle+0x184>
 8003e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	d502      	bpl.n	8003eac <PID_Angle+0x110>
		pid->integral = -ANGLE_INTEGRAL_LIMIT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <PID_Angle+0x188>)
 8003eaa:	621a      	str	r2, [r3, #32]
	}
	
	// 位置式PID：输出 = Kp*e + Ki*∫e + Kd*Δe
	pid->actual_val = pid->Kp * pid->err                      // 比例项
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	ed93 7a05 	vldr	s14, [r3, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
	                + effective_Ki * pid->integral            // 积分项（变积分）
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	edd3 6a08 	vldr	s13, [r3, #32]
 8003ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eca:	ee37 7a27 	vadd.f32	s14, s14, s15
	                + pid->Kd * (pid->err - pid->err_last);   // 微分项
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	edd3 6a07 	vldr	s13, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	ed93 6a02 	vldr	s12, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ee0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->actual_val = pid->Kp * pid->err                      // 比例项
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	edc3 7a01 	vstr	s15, [r3, #4]
	
	// 更新误差历史
	pid->err_last = pid->err;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	60da      	str	r2, [r3, #12]
	
	return pid->actual_val;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
}
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eeb0 0a67 	vmov.f32	s0, s15
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	43340000 	.word	0x43340000
 8003f10:	43b40000 	.word	0x43b40000
 8003f14:	c3340000 	.word	0xc3340000
 8003f18:	42480000 	.word	0x42480000
 8003f1c:	42480000 	.word	0x42480000
 8003f20:	c2480000 	.word	0xc2480000
 8003f24:	c2480000 	.word	0xc2480000

08003f28 <PID_Position>:
 * @param actual_position 当前位置（厘米）
 * @return PID输出值（速度控制量，RPS）
 * @note 死区0.5cm，使用变积分算法
 */
float PID_Position(_pid *pid, float target_position, float actual_position)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f34:	edc7 0a01 	vstr	s1, [r7, #4]
	// ========== 步骤1：计算位置误差 ==========
	float position_error = target_position - actual_position;
 8003f38:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f44:	edc7 7a07 	vstr	s15, [r7, #28]
	
	// ========== 步骤2：死区控制（小于0.5cm不动作）==========
	#define POSITION_DEADZONE 0.5f  // 0.5cm死区
	if (fabsf(position_error) < POSITION_DEADZONE) {
 8003f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f4c:	eef0 7ae7 	vabs.f32	s15, s15
 8003f50:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	d50e      	bpl.n	8003f7c <PID_Position+0x54>
		// 在死区内，清零输出和积分，避免抖动
		pid->actual_val = 0.0f;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	605a      	str	r2, [r3, #4]
		pid->integral = 0.0f;  // 防止积分累积
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	621a      	str	r2, [r3, #32]
		pid->err_last = 0.0f;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	60da      	str	r2, [r3, #12]
		return 0.0f;
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	e063      	b.n	8004044 <PID_Position+0x11c>
	}
	
	// ========== 步骤3：位置式PID计算 ==========
	pid->err = position_error;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	609a      	str	r2, [r3, #8]
	
	// 积分累加（变积分系数）
	float factor = VariableIntegralCoefficient(pid->err);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f88:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8c:	f7ff fea2 	bl	8003cd4 <VariableIntegralCoefficient>
 8003f90:	ed87 0a06 	vstr	s0, [r7, #24]
	float effective_Ki = pid->Ki * factor;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->integral += pid->err;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	ed93 7a08 	vldr	s14, [r3, #32]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	edc3 7a08 	vstr	s15, [r3, #32]
	
	// 积分限幅（防止积分饱和）
	#define POSITION_INTEGRAL_LIMIT 100.0f
	if (pid->integral > POSITION_INTEGRAL_LIMIT) {
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fc2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004054 <PID_Position+0x12c>
 8003fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fce:	dd03      	ble.n	8003fd8 <PID_Position+0xb0>
		pid->integral = POSITION_INTEGRAL_LIMIT;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a21      	ldr	r2, [pc, #132]	@ (8004058 <PID_Position+0x130>)
 8003fd4:	621a      	str	r2, [r3, #32]
 8003fd6:	e00c      	b.n	8003ff2 <PID_Position+0xca>
	} else if (pid->integral < -POSITION_INTEGRAL_LIMIT) {
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fde:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800405c <PID_Position+0x134>
 8003fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	d502      	bpl.n	8003ff2 <PID_Position+0xca>
		pid->integral = -POSITION_INTEGRAL_LIMIT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <PID_Position+0x138>)
 8003ff0:	621a      	str	r2, [r3, #32]
	}
	
	// 位置式PID：输出 = Kp*e + Ki*∫e + Kd*Δe
	pid->actual_val = pid->Kp * pid->err                      // 比例项
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
	                + effective_Ki * pid->integral            // 积分项（变积分）
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	edd3 6a08 	vldr	s13, [r3, #32]
 8004008:	edd7 7a05 	vldr	s15, [r7, #20]
 800400c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004010:	ee37 7a27 	vadd.f32	s14, s14, s15
	                + pid->Kd * (pid->err - pid->err_last);   // 微分项
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	edd3 6a07 	vldr	s13, [r3, #28]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	ed93 6a02 	vldr	s12, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	edd3 7a03 	vldr	s15, [r3, #12]
 8004026:	ee76 7a67 	vsub.f32	s15, s12, s15
 800402a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800402e:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->actual_val = pid->Kp * pid->err                      // 比例项
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	edc3 7a01 	vstr	s15, [r3, #4]
	
	// 更新误差历史
	pid->err_last = pid->err;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	60da      	str	r2, [r3, #12]
	
	return pid->actual_val;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
}
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eeb0 0a67 	vmov.f32	s0, s15
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	42c80000 	.word	0x42c80000
 8004058:	42c80000 	.word	0x42c80000
 800405c:	c2c80000 	.word	0xc2c80000
 8004060:	c2c80000 	.word	0xc2c80000

08004064 <Radar_Init>:

/**
 * @brief 初始化雷达连续扫描模式（DMA优化版）
 */
uint8_t Radar_Init(UART_HandleTypeDef *huart_radar)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    if (huart_radar == NULL) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <Radar_Init+0x12>
        return 1;  // 参数错误
 8004072:	2301      	movs	r3, #1
 8004074:	e016      	b.n	80040a4 <Radar_Init+0x40>
    }
    
    // 停止雷达（确保处于已知状态）
    Radar_StopScan(huart_radar);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f82b 	bl	80040d2 <Radar_StopScan>
    HAL_Delay(100);
 800407c:	2064      	movs	r0, #100	@ 0x64
 800407e:	f000 fd83 	bl	8004b88 <HAL_Delay>
    // 初始化全局缓冲区
    // 启动雷达扫描
    HAL_StatusTypeDef ret = Radar_StartScan(huart_radar);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f812 	bl	80040ac <Radar_StartScan>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]

    LIDAR_Start(huart_radar);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8c3 	bl	8004218 <LIDAR_Start>
    //ret = HAL_UART_Receive_DMA(huart_radar, (uint8_t*)g_radar_dma_buffer, RADAR_DMA_BUFFER_SIZE);
    __HAL_UART_ENABLE_IT(huart_radar, UART_IT_IDLE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0210 	orr.w	r2, r2, #16
 80040a0:	60da      	str	r2, [r3, #12]
    return 0;  // 成功
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <Radar_StartScan>:

/**
 * @brief 启动雷达扫描
 */
HAL_StatusTypeDef Radar_StartScan(UART_HandleTypeDef *huart_radar)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    uint8_t start_cmd[] = RADAR_CMD_START_SCAN;
 80040b4:	f242 03a5 	movw	r3, #8357	@ 0x20a5
 80040b8:	81bb      	strh	r3, [r7, #12]
    return HAL_UART_Transmit(huart_radar, start_cmd, sizeof(start_cmd), 100);
 80040ba:	f107 010c 	add.w	r1, r7, #12
 80040be:	2364      	movs	r3, #100	@ 0x64
 80040c0:	2202      	movs	r2, #2
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f003 fa29 	bl	800751a <HAL_UART_Transmit>
 80040c8:	4603      	mov	r3, r0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <Radar_StopScan>:

/**
 * @brief 停止雷达扫描
 */
HAL_StatusTypeDef Radar_StopScan(UART_HandleTypeDef *huart_radar)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
    uint8_t stop_cmd[] = RADAR_CMD_STOP_SCAN;
 80040da:	f242 53a5 	movw	r3, #9637	@ 0x25a5
 80040de:	81bb      	strh	r3, [r7, #12]
    return HAL_UART_Transmit(huart_radar, stop_cmd, sizeof(stop_cmd), 100);
 80040e0:	f107 010c 	add.w	r1, r7, #12
 80040e4:	2364      	movs	r3, #100	@ 0x64
 80040e6:	2202      	movs	r2, #2
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f003 fa16 	bl	800751a <HAL_UART_Transmit>
 80040ee:	4603      	mov	r3, r0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <Radar_CalculateCRC16>:
 * @param data 数据缓冲区
 * @param length 数据长度
 * @return CRC16校验值
 */
static uint16_t Radar_CalculateCRC16(uint8_t *data, uint16_t length)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;  // 初始值
 8004104:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004108:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++) {
 800410a:	2300      	movs	r3, #0
 800410c:	81bb      	strh	r3, [r7, #12]
 800410e:	e022      	b.n	8004156 <Radar_CalculateCRC16+0x5e>
        crc ^= data[i];
 8004110:	89bb      	ldrh	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	4053      	eors	r3, r2
 800411e:	81fb      	strh	r3, [r7, #14]

        for (uint8_t j = 0; j < 8; j++) {
 8004120:	2300      	movs	r3, #0
 8004122:	72fb      	strb	r3, [r7, #11]
 8004124:	e011      	b.n	800414a <Radar_CalculateCRC16+0x52>
            if (crc & 0x0001) {
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d006      	beq.n	800413e <Radar_CalculateCRC16+0x46>
                crc = (crc >> 1) ^ 0xA001;  // 多项式
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <Radar_CalculateCRC16+0x74>)
 8004138:	4053      	eors	r3, r2
 800413a:	81fb      	strh	r3, [r7, #14]
 800413c:	e002      	b.n	8004144 <Radar_CalculateCRC16+0x4c>
            } else {
                crc >>= 1;
 800413e:	89fb      	ldrh	r3, [r7, #14]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004144:	7afb      	ldrb	r3, [r7, #11]
 8004146:	3301      	adds	r3, #1
 8004148:	72fb      	strb	r3, [r7, #11]
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	2b07      	cmp	r3, #7
 800414e:	d9ea      	bls.n	8004126 <Radar_CalculateCRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 8004150:	89bb      	ldrh	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	81bb      	strh	r3, [r7, #12]
 8004156:	89ba      	ldrh	r2, [r7, #12]
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	429a      	cmp	r2, r3
 800415c:	d3d8      	bcc.n	8004110 <Radar_CalculateCRC16+0x18>
            }
        }
    }

    return crc;
 800415e:	89fb      	ldrh	r3, [r7, #14]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	ffffa001 	.word	0xffffa001

08004170 <LIDAR_UART_IdleCallback_IRQ>:
/**
 * @brief IDLE中断回调 - 快速路径（非常短，仅拷贝）
 * @note 在中断上下文被调用，必须尽快返回
 */
void LIDAR_UART_IdleCallback_IRQ(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    if (!huart || !huart->hdmarx) return;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d042      	beq.n	8004204 <LIDAR_UART_IdleCallback_IRQ+0x94>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	2b00      	cmp	r3, #0
 8004184:	d03e      	beq.n	8004204 <LIDAR_UART_IdleCallback_IRQ+0x94>

    /* 清 IDLE 标志：读SR/DR */
    volatile uint32_t tmp;
    tmp = huart->Instance->SR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60bb      	str	r3, [r7, #8]
    tmp = huart->Instance->DR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60bb      	str	r3, [r7, #8]
    (void)tmp;
 8004196:	68bb      	ldr	r3, [r7, #8]

    /* 停止 DMA，获取已接收字节数 */
    HAL_UART_DMAStop(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f003 fb99 	bl	80078d0 <HAL_UART_DMAStop>
    uint32_t dma_cnt = __HAL_DMA_GET_COUNTER(huart->hdmarx); // 剩余计数
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	613b      	str	r3, [r7, #16]
    uint16_t recvd = (uint16_t)(LIDAR_RX_DMA_BUF_SZ - dma_cnt);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80041b0:	81fb      	strh	r3, [r7, #14]

    if (recvd > 0) {
 80041b2:	89fb      	ldrh	r3, [r7, #14]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01e      	beq.n	80041f6 <LIDAR_UART_IdleCallback_IRQ+0x86>
        /* 快速拷贝到环形缓冲（避免栈溢出） */
        uint16_t write_idx = proc_head;
 80041b8:	4b14      	ldr	r3, [pc, #80]	@ (800420c <LIDAR_UART_IdleCallback_IRQ+0x9c>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < recvd; ++i) {
 80041be:	2300      	movs	r3, #0
 80041c0:	82bb      	strh	r3, [r7, #20]
 80041c2:	e011      	b.n	80041e8 <LIDAR_UART_IdleCallback_IRQ+0x78>
            proc_ring[write_idx++] = rx_dma_buf[i];
 80041c4:	8aba      	ldrh	r2, [r7, #20]
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	82f9      	strh	r1, [r7, #22]
 80041cc:	4619      	mov	r1, r3
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <LIDAR_UART_IdleCallback_IRQ+0xa0>)
 80041d0:	5c9a      	ldrb	r2, [r3, r2]
 80041d2:	4b10      	ldr	r3, [pc, #64]	@ (8004214 <LIDAR_UART_IdleCallback_IRQ+0xa4>)
 80041d4:	545a      	strb	r2, [r3, r1]
            if (write_idx >= LIDAR_PEND_RING_SZ) write_idx = 0;
 80041d6:	8afb      	ldrh	r3, [r7, #22]
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041dc:	d301      	bcc.n	80041e2 <LIDAR_UART_IdleCallback_IRQ+0x72>
 80041de:	2300      	movs	r3, #0
 80041e0:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < recvd; ++i) {
 80041e2:	8abb      	ldrh	r3, [r7, #20]
 80041e4:	3301      	adds	r3, #1
 80041e6:	82bb      	strh	r3, [r7, #20]
 80041e8:	8aba      	ldrh	r2, [r7, #20]
 80041ea:	89fb      	ldrh	r3, [r7, #14]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d3e9      	bcc.n	80041c4 <LIDAR_UART_IdleCallback_IRQ+0x54>
        }
        /* 更新写索引（原子操作，中断上下文） */
        proc_head = write_idx;
 80041f0:	4a06      	ldr	r2, [pc, #24]	@ (800420c <LIDAR_UART_IdleCallback_IRQ+0x9c>)
 80041f2:	8afb      	ldrh	r3, [r7, #22]
 80041f4:	8013      	strh	r3, [r2, #0]
    }

    /* 重启 DMA 接收（尽快） */
    HAL_UART_Receive_DMA(huart, rx_dma_buf, LIDAR_RX_DMA_BUF_SZ);
 80041f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041fa:	4905      	ldr	r1, [pc, #20]	@ (8004210 <LIDAR_UART_IdleCallback_IRQ+0xa0>)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f003 fae7 	bl	80077d0 <HAL_UART_Receive_DMA>
 8004202:	e000      	b.n	8004206 <LIDAR_UART_IdleCallback_IRQ+0x96>
    if (!huart || !huart->hdmarx) return;
 8004204:	bf00      	nop
}
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200029e4 	.word	0x200029e4
 8004210:	20001fe4 	.word	0x20001fe4
 8004214:	200021e4 	.word	0x200021e4

08004218 <LIDAR_Start>:

/* 启动 DMA 接收 */
void LIDAR_Start(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)rx_dma_buf, LIDAR_RX_DMA_BUF_SZ);
 8004220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004224:	4903      	ldr	r1, [pc, #12]	@ (8004234 <LIDAR_Start+0x1c>)
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f003 fad2 	bl	80077d0 <HAL_UART_Receive_DMA>
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20001fe4 	.word	0x20001fe4

08004238 <LIDAR_ProcessPendingData>:
/**
 * @brief 主循环处理函数：解析环形缓冲区中的雷达数据
 * @note 在主循环中周期调用，执行滑动窗口帧同步与逐帧校验
 */
void LIDAR_ProcessPendingData(void)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b08d      	sub	sp, #52	@ 0x34
 800423c:	af00      	add	r7, sp, #0
    /* 快速读取索引（避免在中间被ISR改写） */
    uint16_t tail = proc_tail;
 800423e:	4b50      	ldr	r3, [pc, #320]	@ (8004380 <LIDAR_ProcessPendingData+0x148>)
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t head = proc_head;
 8004244:	4b4f      	ldr	r3, [pc, #316]	@ (8004384 <LIDAR_ProcessPendingData+0x14c>)
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (tail == head) return; // 无数据
 800424a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800424c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800424e:	429a      	cmp	r2, r3
 8004250:	f000 8185 	beq.w	800455e <LIDAR_ProcessPendingData+0x326>

    /* 临时线性缓冲以减少每个字节读取开销 */
    static uint8_t temp_buf[1024];
    uint16_t temp_len = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* 把环形缓冲的数据一次性拉成线性块 */
    while (tail != head && temp_len < sizeof(temp_buf)) {
 8004258:	e011      	b.n	800427e <LIDAR_ProcessPendingData+0x46>
        temp_buf[temp_len++] = proc_ring[tail++];
 800425a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8004260:	4619      	mov	r1, r3
 8004262:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8004268:	461a      	mov	r2, r3
 800426a:	4b47      	ldr	r3, [pc, #284]	@ (8004388 <LIDAR_ProcessPendingData+0x150>)
 800426c:	5c59      	ldrb	r1, [r3, r1]
 800426e:	4b47      	ldr	r3, [pc, #284]	@ (800438c <LIDAR_ProcessPendingData+0x154>)
 8004270:	5499      	strb	r1, [r3, r2]
        if (tail >= LIDAR_PEND_RING_SZ) tail = 0;
 8004272:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004278:	d301      	bcc.n	800427e <LIDAR_ProcessPendingData+0x46>
 800427a:	2300      	movs	r3, #0
 800427c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    while (tail != head && temp_len < sizeof(temp_buf)) {
 800427e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004282:	429a      	cmp	r2, r3
 8004284:	d003      	beq.n	800428e <LIDAR_ProcessPendingData+0x56>
 8004286:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428c:	d3e5      	bcc.n	800425a <LIDAR_ProcessPendingData+0x22>
    }
    proc_tail = tail; // 更新全局tail
 800428e:	4a3c      	ldr	r2, [pc, #240]	@ (8004380 <LIDAR_ProcessPendingData+0x148>)
 8004290:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004292:	8013      	strh	r3, [r2, #0]
    /* 将temp_buf串接到解析缓冲区 */
    static uint8_t parse_buf[1024];
    static uint16_t parse_len = 0;

    /* 防止溢出 */
    if (parse_len + temp_len > sizeof(parse_buf)) {
 8004294:	4b3e      	ldr	r3, [pc, #248]	@ (8004390 <LIDAR_ProcessPendingData+0x158>)
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800429c:	4413      	add	r3, r2
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d902      	bls.n	80042aa <LIDAR_ProcessPendingData+0x72>
        parse_len = 0; // 放弃旧数据，重新开始
 80042a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004390 <LIDAR_ProcessPendingData+0x158>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	801a      	strh	r2, [r3, #0]
    }
    memcpy(parse_buf + parse_len, temp_buf, temp_len);
 80042aa:	4b39      	ldr	r3, [pc, #228]	@ (8004390 <LIDAR_ProcessPendingData+0x158>)
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b38      	ldr	r3, [pc, #224]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 80042b2:	4413      	add	r3, r2
 80042b4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80042b6:	4935      	ldr	r1, [pc, #212]	@ (800438c <LIDAR_ProcessPendingData+0x154>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f005 fa5e 	bl	800977a <memcpy>
    parse_len += temp_len;
 80042be:	4b34      	ldr	r3, [pc, #208]	@ (8004390 <LIDAR_ProcessPendingData+0x158>)
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80042c4:	4413      	add	r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <LIDAR_ProcessPendingData+0x158>)
 80042ca:	801a      	strh	r2, [r3, #0]

    /* 滑动窗口解析（逐字节尝试） */
    uint16_t pos = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	857b      	strh	r3, [r7, #42]	@ 0x2a

    while (parse_len - pos >= 2) {
 80042d0:	e11f      	b.n	8004512 <LIDAR_ProcessPendingData+0x2da>
        if (parser_state == WAIT_START_RESP) {
 80042d2:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <LIDAR_ProcessPendingData+0x160>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d146      	bne.n	8004368 <LIDAR_ProcessPendingData+0x130>
            /* 查找 0xA5 0x5A 起始应答 */
            if (parse_buf[pos] == 0xA5 && parse_buf[pos+1] == 0x5A) {
 80042da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80042dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	2ba5      	cmp	r3, #165	@ 0xa5
 80042e2:	d13d      	bne.n	8004360 <LIDAR_ProcessPendingData+0x128>
 80042e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	2b5a      	cmp	r3, #90	@ 0x5a
 80042ee:	d137      	bne.n	8004360 <LIDAR_ProcessPendingData+0x128>
                /* 确保起始应答完整（7字节） */
                if (parse_len - pos >= 7) {
 80042f0:	4b27      	ldr	r3, [pc, #156]	@ (8004390 <LIDAR_ProcessPendingData+0x158>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	f340 8112 	ble.w	8004524 <LIDAR_ProcessPendingData+0x2ec>
                    /* 解析DataLen & DataType
                     * 手册格式：A5 5A [len_low] [len_mid] [len_high] [mode] [dtype]
                     */
                    uint32_t data_len_raw = ((uint32_t)parse_buf[pos+2]) |
 8004300:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004302:	3302      	adds	r3, #2
 8004304:	4a23      	ldr	r2, [pc, #140]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 8004306:	5cd3      	ldrb	r3, [r2, r3]
 8004308:	4619      	mov	r1, r3
                                            ((uint32_t)parse_buf[pos+3] << 8) |
 800430a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800430c:	3303      	adds	r3, #3
 800430e:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
 8004312:	021b      	lsls	r3, r3, #8
                    uint32_t data_len_raw = ((uint32_t)parse_buf[pos+2]) |
 8004314:	ea41 0203 	orr.w	r2, r1, r3
                                            ((uint32_t)parse_buf[pos+4] << 16);
 8004318:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800431a:	3304      	adds	r3, #4
 800431c:	491d      	ldr	r1, [pc, #116]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	041b      	lsls	r3, r3, #16
                    uint32_t data_len_raw = ((uint32_t)parse_buf[pos+2]) |
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
                    uint8_t dtype = parse_buf[pos+6];
 8004326:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004328:	3306      	adds	r3, #6
 800432a:	4a1a      	ldr	r2, [pc, #104]	@ (8004394 <LIDAR_ProcessPendingData+0x15c>)
 800432c:	5cd3      	ldrb	r3, [r2, r3]
 800432e:	73fb      	strb	r3, [r7, #15]

                    /* SCAN模式：dtype=0x81, data_len=5 */
                    if (data_len_raw > 0 && dtype == 0x81) {
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d010      	beq.n	8004358 <LIDAR_ProcessPendingData+0x120>
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b81      	cmp	r3, #129	@ 0x81
 800433a:	d10d      	bne.n	8004358 <LIDAR_ProcessPendingData+0x120>
                        frame_len = (uint8_t)data_len_raw;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b16      	ldr	r3, [pc, #88]	@ (800439c <LIDAR_ProcessPendingData+0x164>)
 8004342:	701a      	strb	r2, [r3, #0]
                        parser_state = RECEIVING_DATA;
 8004344:	4b14      	ldr	r3, [pc, #80]	@ (8004398 <LIDAR_ProcessPendingData+0x160>)
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
                        data_type = dtype;
 800434a:	4a15      	ldr	r2, [pc, #84]	@ (80043a0 <LIDAR_ProcessPendingData+0x168>)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	7013      	strb	r3, [r2, #0]
                        pos += 7; // 消费起始应答
 8004350:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004352:	3307      	adds	r3, #7
 8004354:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        continue;
 8004356:	e0dc      	b.n	8004512 <LIDAR_ProcessPendingData+0x2da>
                    } else {
                        pos++; // 跳过1字节继续找
 8004358:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800435a:	3301      	adds	r3, #1
 800435c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                if (parse_len - pos >= 7) {
 800435e:	e0d8      	b.n	8004512 <LIDAR_ProcessPendingData+0x2da>
                    }
                } else {
                    break; // 等待更多字节
                }
            } else {
                pos++; // 未找到头
 8004360:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004362:	3301      	adds	r3, #1
 8004364:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004366:	e0d4      	b.n	8004512 <LIDAR_ProcessPendingData+0x2da>
            }
        } else { /* RECEIVING_DATA */
            if (frame_len == 0 || frame_len != 5) {
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <LIDAR_ProcessPendingData+0x164>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <LIDAR_ProcessPendingData+0x140>
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <LIDAR_ProcessPendingData+0x164>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d015      	beq.n	80043a4 <LIDAR_ProcessPendingData+0x16c>
                parser_state = WAIT_START_RESP;
 8004378:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <LIDAR_ProcessPendingData+0x160>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
                break;
 800437e:	e0d4      	b.n	800452a <LIDAR_ProcessPendingData+0x2f2>
 8004380:	200029e6 	.word	0x200029e6
 8004384:	200029e4 	.word	0x200029e4
 8004388:	200021e4 	.word	0x200021e4
 800438c:	20005900 	.word	0x20005900
 8004390:	20005d00 	.word	0x20005d00
 8004394:	20005d04 	.word	0x20005d04
 8004398:	200058e0 	.word	0x200058e0
 800439c:	200058e1 	.word	0x200058e1
 80043a0:	200058e2 	.word	0x200058e2
            }

            /* 确保有完整帧 */
            if (parse_len - pos < frame_len) break;
 80043a4:	4b70      	ldr	r3, [pc, #448]	@ (8004568 <LIDAR_ProcessPendingData+0x330>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4a6f      	ldr	r2, [pc, #444]	@ (800456c <LIDAR_ProcessPendingData+0x334>)
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f2c0 80b8 	blt.w	8004528 <LIDAR_ProcessPendingData+0x2f0>

            total_frames_received++;
 80043b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004570 <LIDAR_ProcessPendingData+0x338>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	4a6c      	ldr	r2, [pc, #432]	@ (8004570 <LIDAR_ProcessPendingData+0x338>)
 80043c0:	6013      	str	r3, [r2, #0]

            /* 提取字节 */
            uint8_t *f = &parse_buf[pos];
 80043c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80043c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004574 <LIDAR_ProcessPendingData+0x33c>)
 80043c6:	4413      	add	r3, r2
 80043c8:	623b      	str	r3, [r7, #32]
            uint8_t b0 = f[0];
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	77fb      	strb	r3, [r7, #31]
            uint8_t quality = b0 >> 2;
 80043d0:	7ffb      	ldrb	r3, [r7, #31]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	77bb      	strb	r3, [r7, #30]
            uint8_t s = b0 & 0x1;
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	777b      	strb	r3, [r7, #29]
            uint8_t s_inv = (b0 & 0x2) >> 1;
 80043de:	7ffb      	ldrb	r3, [r7, #31]
 80043e0:	105b      	asrs	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	773b      	strb	r3, [r7, #28]
            uint16_t angle_q6 = (uint16_t)f[1] | ((uint16_t)f[2] << 8);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	3301      	adds	r3, #1
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b21a      	sxth	r2, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	3302      	adds	r3, #2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	b21b      	sxth	r3, r3
 8004402:	837b      	strh	r3, [r7, #26]
            uint16_t distance_q2 = (uint16_t)f[3] | ((uint16_t)f[4] << 8);
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	3303      	adds	r3, #3
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b21a      	sxth	r2, r3
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	3304      	adds	r3, #4
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b21b      	sxth	r3, r3
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	b21b      	sxth	r3, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	b21b      	sxth	r3, r3
 800441c:	833b      	strh	r3, [r7, #24]

            /* 数据有效性检查（组合多因子） */
            uint8_t valid = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            /* S/Sbar一致性（可选，不强制）*/
            if (s == s_inv) {
 8004424:	7f7a      	ldrb	r2, [r7, #29]
 8004426:	7f3b      	ldrb	r3, [r7, #28]
 8004428:	429a      	cmp	r2, r3
 800442a:	d104      	bne.n	8004436 <LIDAR_ProcessPendingData+0x1fe>
                sync_errors++;
 800442c:	4b52      	ldr	r3, [pc, #328]	@ (8004578 <LIDAR_ProcessPendingData+0x340>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	4a51      	ldr	r2, [pc, #324]	@ (8004578 <LIDAR_ProcessPendingData+0x340>)
 8004434:	6013      	str	r3, [r2, #0]
                // 不强制丢弃，只统计
            }

            /* 质量检查（可配置阈值） */
            if (quality < 5) {
 8004436:	7fbb      	ldrb	r3, [r7, #30]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d807      	bhi.n	800444c <LIDAR_ProcessPendingData+0x214>
                valid = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                quality_filtered++;
 8004442:	4b4e      	ldr	r3, [pc, #312]	@ (800457c <LIDAR_ProcessPendingData+0x344>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	4a4c      	ldr	r2, [pc, #304]	@ (800457c <LIDAR_ProcessPendingData+0x344>)
 800444a:	6013      	str	r3, [r2, #0]
            }

            /* 角度范围（23040对应360°，允许小误差） */
            if (angle_q6 > 23500) {
 800444c:	8b7b      	ldrh	r3, [r7, #26]
 800444e:	f645 32cc 	movw	r2, #23500	@ 0x5bcc
 8004452:	4293      	cmp	r3, r2
 8004454:	d907      	bls.n	8004466 <LIDAR_ProcessPendingData+0x22e>
                valid = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                range_filtered++;
 800445c:	4b48      	ldr	r3, [pc, #288]	@ (8004580 <LIDAR_ProcessPendingData+0x348>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	4a47      	ldr	r2, [pc, #284]	@ (8004580 <LIDAR_ProcessPendingData+0x348>)
 8004464:	6013      	str	r3, [r2, #0]
            }

            /* 距离范围（Q2格式->mm） */
            uint32_t dist_mm = distance_q2 >> 2;
 8004466:	8b3b      	ldrh	r3, [r7, #24]
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	b29b      	uxth	r3, r3
 800446c:	617b      	str	r3, [r7, #20]
            if (dist_mm == 0 || dist_mm < 30 || dist_mm > 16000) {
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <LIDAR_ProcessPendingData+0x24a>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b1d      	cmp	r3, #29
 8004478:	d903      	bls.n	8004482 <LIDAR_ProcessPendingData+0x24a>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8004480:	d907      	bls.n	8004492 <LIDAR_ProcessPendingData+0x25a>
                valid = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                range_filtered++;
 8004488:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <LIDAR_ProcessPendingData+0x348>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	4a3c      	ldr	r2, [pc, #240]	@ (8004580 <LIDAR_ProcessPendingData+0x348>)
 8004490:	6013      	str	r3, [r2, #0]
            }

            if (valid) {
 8004492:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004496:	2b00      	cmp	r3, #0
 8004498:	d038      	beq.n	800450c <LIDAR_ProcessPendingData+0x2d4>
                /* 存储有效点 */
                if (lidar_point_index < LIDAR_MAX_POINTS) {
 800449a:	4b3a      	ldr	r3, [pc, #232]	@ (8004584 <LIDAR_ProcessPendingData+0x34c>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80044a4:	d222      	bcs.n	80044ec <LIDAR_ProcessPendingData+0x2b4>
                    LidarPoint_t pt;
                    pt.angle_q6 = angle_q6;
 80044a6:	8b7b      	ldrh	r3, [r7, #26]
 80044a8:	803b      	strh	r3, [r7, #0]
                    pt.distance_q2 = distance_q2;
 80044aa:	8b3b      	ldrh	r3, [r7, #24]
 80044ac:	807b      	strh	r3, [r7, #2]
                    pt.quality = quality;
 80044ae:	7fbb      	ldrb	r3, [r7, #30]
 80044b0:	713b      	strb	r3, [r7, #4]
                    pt.timestamp = HAL_GetTick();
 80044b2:	f000 fb5d 	bl	8004b70 <HAL_GetTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	60bb      	str	r3, [r7, #8]

                    lidar_points[lidar_point_index++] = pt;
 80044ba:	4b32      	ldr	r3, [pc, #200]	@ (8004584 <LIDAR_ProcessPendingData+0x34c>)
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	b291      	uxth	r1, r2
 80044c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004584 <LIDAR_ProcessPendingData+0x34c>)
 80044c6:	8011      	strh	r1, [r2, #0]
 80044c8:	4619      	mov	r1, r3
 80044ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004588 <LIDAR_ProcessPendingData+0x350>)
 80044cc:	460b      	mov	r3, r1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	440b      	add	r3, r1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	461c      	mov	r4, r3
 80044d8:	463b      	mov	r3, r7
 80044da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                    point_counter_total++;
 80044e2:	4b2a      	ldr	r3, [pc, #168]	@ (800458c <LIDAR_ProcessPendingData+0x354>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <LIDAR_ProcessPendingData+0x354>)
 80044ea:	6013      	str	r3, [r2, #0]
                }

                /* 尝试触发旋转完成 */
                try_emit_rotation_by_angle_wrap(angle_q6);
 80044ec:	8b7b      	ldrh	r3, [r7, #26]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f850 	bl	8004594 <try_emit_rotation_by_angle_wrap>
                valid_frames_count++;
 80044f4:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <LIDAR_ProcessPendingData+0x358>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	4a25      	ldr	r2, [pc, #148]	@ (8004590 <LIDAR_ProcessPendingData+0x358>)
 80044fc:	6013      	str	r3, [r2, #0]

                pos += frame_len; // 消费帧
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <LIDAR_ProcessPendingData+0x334>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004506:	4413      	add	r3, r2
 8004508:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800450a:	e002      	b.n	8004512 <LIDAR_ProcessPendingData+0x2da>
            } else {
                /* 无效帧：滑动1字节继续找同步点 */
                pos += 1;
 800450c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800450e:	3301      	adds	r3, #1
 8004510:	857b      	strh	r3, [r7, #42]	@ 0x2a
    while (parse_len - pos >= 2) {
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <LIDAR_ProcessPendingData+0x330>)
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	f73f aed8 	bgt.w	80042d2 <LIDAR_ProcessPendingData+0x9a>
 8004522:	e002      	b.n	800452a <LIDAR_ProcessPendingData+0x2f2>
                    break; // 等待更多字节
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <LIDAR_ProcessPendingData+0x2f2>
            if (parse_len - pos < frame_len) break;
 8004528:	bf00      	nop
            }
        }
    } /* end while parsing */

    /* 保留未消费的字节到下次处理 */
    if (pos < parse_len) {
 800452a:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <LIDAR_ProcessPendingData+0x330>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004530:	429a      	cmp	r2, r3
 8004532:	d210      	bcs.n	8004556 <LIDAR_ProcessPendingData+0x31e>
        uint16_t remain = parse_len - pos;
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <LIDAR_ProcessPendingData+0x330>)
 8004536:	881a      	ldrh	r2, [r3, #0]
 8004538:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	81bb      	strh	r3, [r7, #12]
        memmove(parse_buf, parse_buf + pos, remain);
 800453e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004540:	4a0c      	ldr	r2, [pc, #48]	@ (8004574 <LIDAR_ProcessPendingData+0x33c>)
 8004542:	4413      	add	r3, r2
 8004544:	89ba      	ldrh	r2, [r7, #12]
 8004546:	4619      	mov	r1, r3
 8004548:	480a      	ldr	r0, [pc, #40]	@ (8004574 <LIDAR_ProcessPendingData+0x33c>)
 800454a:	f005 f85e 	bl	800960a <memmove>
        parse_len = remain;
 800454e:	4a06      	ldr	r2, [pc, #24]	@ (8004568 <LIDAR_ProcessPendingData+0x330>)
 8004550:	89bb      	ldrh	r3, [r7, #12]
 8004552:	8013      	strh	r3, [r2, #0]
 8004554:	e004      	b.n	8004560 <LIDAR_ProcessPendingData+0x328>
    } else {
        parse_len = 0;
 8004556:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <LIDAR_ProcessPendingData+0x330>)
 8004558:	2200      	movs	r2, #0
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e000      	b.n	8004560 <LIDAR_ProcessPendingData+0x328>
    if (tail == head) return; // 无数据
 800455e:	bf00      	nop
    }
}
 8004560:	3734      	adds	r7, #52	@ 0x34
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}
 8004566:	bf00      	nop
 8004568:	20005d00 	.word	0x20005d00
 800456c:	200058e1 	.word	0x200058e1
 8004570:	200058e4 	.word	0x200058e4
 8004574:	20005d04 	.word	0x20005d04
 8004578:	200058ec 	.word	0x200058ec
 800457c:	200058f0 	.word	0x200058f0
 8004580:	200058f4 	.word	0x200058f4
 8004584:	2000415c 	.word	0x2000415c
 8004588:	200029ec 	.word	0x200029ec
 800458c:	200058d8 	.word	0x200058d8
 8004590:	200058e8 	.word	0x200058e8

08004594 <try_emit_rotation_by_angle_wrap>:
/**
 * @brief 角度回绕检测触发旋转完成（优化版）
 * @note 使用更合理的角度阈值 + 时间保护
 */
static void try_emit_rotation_by_angle_wrap(uint16_t angle_q6)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	80fb      	strh	r3, [r7, #6]
    /* 首次初始化 */
    if (last_angle_q6 == 0xFFFF) {
 800459e:	4b5b      	ldr	r3, [pc, #364]	@ (800470c <try_emit_rotation_by_angle_wrap+0x178>)
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <try_emit_rotation_by_angle_wrap+0x28>
        last_angle_q6 = angle_q6;
 80045aa:	4a58      	ldr	r2, [pc, #352]	@ (800470c <try_emit_rotation_by_angle_wrap+0x178>)
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	8013      	strh	r3, [r2, #0]
        last_rotation_tick = HAL_GetTick();
 80045b0:	f000 fade 	bl	8004b70 <HAL_GetTick>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a56      	ldr	r2, [pc, #344]	@ (8004710 <try_emit_rotation_by_angle_wrap+0x17c>)
 80045b8:	6013      	str	r3, [r2, #0]
        return;
 80045ba:	e0a3      	b.n	8004704 <try_emit_rotation_by_angle_wrap+0x170>
    }

    uint32_t points_since_last = point_counter_total - last_rotation_point_counter;
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <try_emit_rotation_by_angle_wrap+0x180>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b55      	ldr	r3, [pc, #340]	@ (8004718 <try_emit_rotation_by_angle_wrap+0x184>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	61bb      	str	r3, [r7, #24]

    /* 角度回绕检测（Q6格式：0-23040对应0-360°）
     * 优化参数：从接近360°回绕到接近0°
     */
    const uint16_t wrap_high_q6 = 22000;  // ~343°
 80045c8:	f245 53f0 	movw	r3, #22000	@ 0x55f0
 80045cc:	82fb      	strh	r3, [r7, #22]
    const uint16_t wrap_low_q6  = 3000;   // ~47°
 80045ce:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80045d2:	82bb      	strh	r3, [r7, #20]

    /* 条件1：角度回绕 + 点数足够 */
    if ((last_angle_q6 > wrap_high_q6) &&
 80045d4:	4b4d      	ldr	r3, [pc, #308]	@ (800470c <try_emit_rotation_by_angle_wrap+0x178>)
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	8afa      	ldrh	r2, [r7, #22]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d245      	bcs.n	800466a <try_emit_rotation_by_angle_wrap+0xd6>
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	8abb      	ldrh	r3, [r7, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d241      	bcs.n	800466a <try_emit_rotation_by_angle_wrap+0xd6>
        (angle_q6 < wrap_low_q6) &&
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b63      	cmp	r3, #99	@ 0x63
 80045ea:	d93e      	bls.n	800466a <try_emit_rotation_by_angle_wrap+0xd6>
  __ASM volatile ("cpsid i" : : : "memory");
 80045ec:	b672      	cpsid	i
}
 80045ee:	bf00      	nop
        (points_since_last >= LIDAR_MIN_POINTS_PER_ROTATION)) {

        /* 原子复制到完成缓冲区 */
        __disable_irq();
        uint16_t ncopy = (lidar_point_index <= LIDAR_MAX_POINTS) ? lidar_point_index : LIDAR_MAX_POINTS;
 80045f0:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <try_emit_rotation_by_angle_wrap+0x188>)
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80045fa:	d803      	bhi.n	8004604 <try_emit_rotation_by_angle_wrap+0x70>
 80045fc:	4b47      	ldr	r3, [pc, #284]	@ (800471c <try_emit_rotation_by_angle_wrap+0x188>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	e001      	b.n	8004608 <try_emit_rotation_by_angle_wrap+0x74>
 8004604:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004608:	827b      	strh	r3, [r7, #18]
        for (uint16_t i = 0; i < ncopy; ++i) {
 800460a:	2300      	movs	r3, #0
 800460c:	83fb      	strh	r3, [r7, #30]
 800460e:	e014      	b.n	800463a <try_emit_rotation_by_angle_wrap+0xa6>
            completed_rotation[i] = lidar_points[i];
 8004610:	8bfa      	ldrh	r2, [r7, #30]
 8004612:	8bf9      	ldrh	r1, [r7, #30]
 8004614:	4842      	ldr	r0, [pc, #264]	@ (8004720 <try_emit_rotation_by_angle_wrap+0x18c>)
 8004616:	460b      	mov	r3, r1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	440b      	add	r3, r1
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4418      	add	r0, r3
 8004620:	4940      	ldr	r1, [pc, #256]	@ (8004724 <try_emit_rotation_by_angle_wrap+0x190>)
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	18ca      	adds	r2, r1, r3
 800462c:	4603      	mov	r3, r0
 800462e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004630:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (uint16_t i = 0; i < ncopy; ++i) {
 8004634:	8bfb      	ldrh	r3, [r7, #30]
 8004636:	3301      	adds	r3, #1
 8004638:	83fb      	strh	r3, [r7, #30]
 800463a:	8bfa      	ldrh	r2, [r7, #30]
 800463c:	8a7b      	ldrh	r3, [r7, #18]
 800463e:	429a      	cmp	r2, r3
 8004640:	d3e6      	bcc.n	8004610 <try_emit_rotation_by_angle_wrap+0x7c>
        }
        completed_count = ncopy;
 8004642:	4a39      	ldr	r2, [pc, #228]	@ (8004728 <try_emit_rotation_by_angle_wrap+0x194>)
 8004644:	8a7b      	ldrh	r3, [r7, #18]
 8004646:	8013      	strh	r3, [r2, #0]
        rotation_ready = 1;
 8004648:	4b38      	ldr	r3, [pc, #224]	@ (800472c <try_emit_rotation_by_angle_wrap+0x198>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]

        /* 重置下一圈 */
        lidar_point_index = 0;
 800464e:	4b33      	ldr	r3, [pc, #204]	@ (800471c <try_emit_rotation_by_angle_wrap+0x188>)
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
        last_rotation_point_counter = point_counter_total;
 8004654:	4b2f      	ldr	r3, [pc, #188]	@ (8004714 <try_emit_rotation_by_angle_wrap+0x180>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2f      	ldr	r2, [pc, #188]	@ (8004718 <try_emit_rotation_by_angle_wrap+0x184>)
 800465a:	6013      	str	r3, [r2, #0]
        last_rotation_tick = HAL_GetTick();
 800465c:	f000 fa88 	bl	8004b70 <HAL_GetTick>
 8004660:	4603      	mov	r3, r0
 8004662:	4a2b      	ldr	r2, [pc, #172]	@ (8004710 <try_emit_rotation_by_angle_wrap+0x17c>)
 8004664:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004666:	b662      	cpsie	i
}
 8004668:	bf00      	nop
        __enable_irq();
    }

    /* 条件2：时间保护（1秒超时） */
    uint32_t now = HAL_GetTick();
 800466a:	f000 fa81 	bl	8004b70 <HAL_GetTick>
 800466e:	60f8      	str	r0, [r7, #12]
    if ((now - last_rotation_tick) >= 1000 &&
 8004670:	4b27      	ldr	r3, [pc, #156]	@ (8004710 <try_emit_rotation_by_angle_wrap+0x17c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800467c:	d33f      	bcc.n	80046fe <try_emit_rotation_by_angle_wrap+0x16a>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b63      	cmp	r3, #99	@ 0x63
 8004682:	d93c      	bls.n	80046fe <try_emit_rotation_by_angle_wrap+0x16a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004684:	b672      	cpsid	i
}
 8004686:	bf00      	nop
        (points_since_last >= LIDAR_MIN_POINTS_PER_ROTATION)) {

        __disable_irq();
        uint16_t ncopy = (lidar_point_index <= LIDAR_MAX_POINTS) ? lidar_point_index : LIDAR_MAX_POINTS;
 8004688:	4b24      	ldr	r3, [pc, #144]	@ (800471c <try_emit_rotation_by_angle_wrap+0x188>)
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004692:	d803      	bhi.n	800469c <try_emit_rotation_by_angle_wrap+0x108>
 8004694:	4b21      	ldr	r3, [pc, #132]	@ (800471c <try_emit_rotation_by_angle_wrap+0x188>)
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	e001      	b.n	80046a0 <try_emit_rotation_by_angle_wrap+0x10c>
 800469c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80046a0:	817b      	strh	r3, [r7, #10]
        for (uint16_t i = 0; i < ncopy; ++i) {
 80046a2:	2300      	movs	r3, #0
 80046a4:	83bb      	strh	r3, [r7, #28]
 80046a6:	e014      	b.n	80046d2 <try_emit_rotation_by_angle_wrap+0x13e>
            completed_rotation[i] = lidar_points[i];
 80046a8:	8bba      	ldrh	r2, [r7, #28]
 80046aa:	8bb9      	ldrh	r1, [r7, #28]
 80046ac:	481c      	ldr	r0, [pc, #112]	@ (8004720 <try_emit_rotation_by_angle_wrap+0x18c>)
 80046ae:	460b      	mov	r3, r1
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	440b      	add	r3, r1
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4418      	add	r0, r3
 80046b8:	491a      	ldr	r1, [pc, #104]	@ (8004724 <try_emit_rotation_by_angle_wrap+0x190>)
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	18ca      	adds	r2, r1, r3
 80046c4:	4603      	mov	r3, r0
 80046c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80046c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (uint16_t i = 0; i < ncopy; ++i) {
 80046cc:	8bbb      	ldrh	r3, [r7, #28]
 80046ce:	3301      	adds	r3, #1
 80046d0:	83bb      	strh	r3, [r7, #28]
 80046d2:	8bba      	ldrh	r2, [r7, #28]
 80046d4:	897b      	ldrh	r3, [r7, #10]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d3e6      	bcc.n	80046a8 <try_emit_rotation_by_angle_wrap+0x114>
        }
        completed_count = ncopy;
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <try_emit_rotation_by_angle_wrap+0x194>)
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	8013      	strh	r3, [r2, #0]
        rotation_ready = 1;
 80046e0:	4b12      	ldr	r3, [pc, #72]	@ (800472c <try_emit_rotation_by_angle_wrap+0x198>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]

        lidar_point_index = 0;
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <try_emit_rotation_by_angle_wrap+0x188>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	801a      	strh	r2, [r3, #0]
        last_rotation_point_counter = point_counter_total;
 80046ec:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <try_emit_rotation_by_angle_wrap+0x180>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a09      	ldr	r2, [pc, #36]	@ (8004718 <try_emit_rotation_by_angle_wrap+0x184>)
 80046f2:	6013      	str	r3, [r2, #0]
        last_rotation_tick = now;
 80046f4:	4a06      	ldr	r2, [pc, #24]	@ (8004710 <try_emit_rotation_by_angle_wrap+0x17c>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046fa:	b662      	cpsie	i
}
 80046fc:	bf00      	nop
        __enable_irq();
    }

    last_angle_q6 = angle_q6;
 80046fe:	4a03      	ldr	r2, [pc, #12]	@ (800470c <try_emit_rotation_by_angle_wrap+0x178>)
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	8013      	strh	r3, [r2, #0]
}
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	2000000c 	.word	0x2000000c
 8004710:	200058d4 	.word	0x200058d4
 8004714:	200058d8 	.word	0x200058d8
 8004718:	200058dc 	.word	0x200058dc
 800471c:	2000415c 	.word	0x2000415c
 8004720:	20004160 	.word	0x20004160
 8004724:	200029ec 	.word	0x200029ec
 8004728:	200058d0 	.word	0x200058d0
 800472c:	200058d2 	.word	0x200058d2

08004730 <LIDAR_GetCompletedRotation>:

/* 上层调用以获取完成的一圈数据；返回点数（若无准备则返回0） */
uint16_t LIDAR_GetCompletedRotation(LidarPoint_t *out_buffer, uint16_t max_count)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
    uint16_t ret = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	81bb      	strh	r3, [r7, #12]
    if (!rotation_ready) return 0;
 8004740:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <LIDAR_GetCompletedRotation+0x98>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <LIDAR_GetCompletedRotation+0x1e>
 800474a:	2300      	movs	r3, #0
 800474c:	e035      	b.n	80047ba <LIDAR_GetCompletedRotation+0x8a>
  __ASM volatile ("cpsid i" : : : "memory");
 800474e:	b672      	cpsid	i
}
 8004750:	bf00      	nop

    __disable_irq();
    uint16_t n = (completed_count <= max_count) ? completed_count : max_count;
 8004752:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <LIDAR_GetCompletedRotation+0x9c>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	887a      	ldrh	r2, [r7, #2]
 800475a:	429a      	cmp	r2, r3
 800475c:	d303      	bcc.n	8004766 <LIDAR_GetCompletedRotation+0x36>
 800475e:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <LIDAR_GetCompletedRotation+0x9c>)
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	e000      	b.n	8004768 <LIDAR_GetCompletedRotation+0x38>
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < n; ++i) {
 800476a:	2300      	movs	r3, #0
 800476c:	81fb      	strh	r3, [r7, #14]
 800476e:	e015      	b.n	800479c <LIDAR_GetCompletedRotation+0x6c>
        out_buffer[i] = completed_rotation[i];
 8004770:	89fa      	ldrh	r2, [r7, #14]
 8004772:	89f9      	ldrh	r1, [r7, #14]
 8004774:	460b      	mov	r3, r1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	440b      	add	r3, r1
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4619      	mov	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	1858      	adds	r0, r3, r1
 8004782:	4913      	ldr	r1, [pc, #76]	@ (80047d0 <LIDAR_GetCompletedRotation+0xa0>)
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	18ca      	adds	r2, r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	ca07      	ldmia	r2, {r0, r1, r2}
 8004792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (uint16_t i = 0; i < n; ++i) {
 8004796:	89fb      	ldrh	r3, [r7, #14]
 8004798:	3301      	adds	r3, #1
 800479a:	81fb      	strh	r3, [r7, #14]
 800479c:	89fa      	ldrh	r2, [r7, #14]
 800479e:	897b      	ldrh	r3, [r7, #10]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3e5      	bcc.n	8004770 <LIDAR_GetCompletedRotation+0x40>
    }
    /* 复位准备标志 */
    rotation_ready = 0;
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <LIDAR_GetCompletedRotation+0x98>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
    completed_count = 0;
 80047aa:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <LIDAR_GetCompletedRotation+0x9c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047b0:	b662      	cpsie	i
}
 80047b2:	bf00      	nop
    __enable_irq();

    ret = n;
 80047b4:	897b      	ldrh	r3, [r7, #10]
 80047b6:	81bb      	strh	r3, [r7, #12]
    return ret;
 80047b8:	89bb      	ldrh	r3, [r7, #12]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	200058d2 	.word	0x200058d2
 80047cc:	200058d0 	.word	0x200058d0
 80047d0:	20004160 	.word	0x20004160

080047d4 <write_u16_le>:
#define LIDAR_POINT_COUNT 500U
#define ANGLE_PER_INDEX 0.72f    // 度/索引

/* helper - write little-endian */
static void write_u16_le(uint8_t *dst, uint16_t v)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
    dst[0] = (uint8_t)(v & 0xFF);
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	701a      	strb	r2, [r3, #0]
    dst[1] = (uint8_t)((v >> 8) & 0xFF);
 80047e8:	887b      	ldrh	r3, [r7, #2]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3301      	adds	r3, #1
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <write_u32_le>:

static void write_u32_le(uint8_t *dst, uint32_t v)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
    dst[0] = (uint8_t)(v & 0xFF);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	701a      	strb	r2, [r3, #0]
    dst[1] = (uint8_t)((v >> 8) & 0xFF);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	0a1a      	lsrs	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
    dst[2] = (uint8_t)((v >> 16) & 0xFF);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	0c1a      	lsrs	r2, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3302      	adds	r3, #2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
    dst[3] = (uint8_t)((v >> 24) & 0xFF);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	0e1a      	lsrs	r2, r3, #24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3303      	adds	r3, #3
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LIDAR_TxCpltCallback>:
/**
 * @brief UART4 DMA发送完成回调
 * @note 在 HAL_UART_TxCpltCallback 中调用
 */
void LIDAR_TxCpltCallback(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
    uart4_tx_busy = 0;  // 标记发送完成
 8004848:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <LIDAR_TxCpltCallback+0x14>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	200029e8 	.word	0x200029e8

0800485c <LIDAR_ShouldSendFrame>:
/**
 * @brief 检查是否应该发送新的雷达帧（帧率控制）
 * @retval 1=应该发送, 0=还未到发送时间
 */
uint8_t LIDAR_ShouldSendFrame(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8004862:	f000 f985 	bl	8004b70 <HAL_GetTick>
 8004866:	6078      	str	r0, [r7, #4]
    
    // 每500ms发送一次（2Hz）
    if (now - last_send_time >= 500) {
 8004868:	4b08      	ldr	r3, [pc, #32]	@ (800488c <LIDAR_ShouldSendFrame+0x30>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004874:	d304      	bcc.n	8004880 <LIDAR_ShouldSendFrame+0x24>
        last_send_time = now;
 8004876:	4a05      	ldr	r2, [pc, #20]	@ (800488c <LIDAR_ShouldSendFrame+0x30>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]
        return 1;
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LIDAR_ShouldSendFrame+0x26>
    }
    
    return 0;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200058f8 	.word	0x200058f8

08004890 <LIDAR_PackAndSendRawFrame>:
 * @param points 点云数据数组
 * @param n_points 点数
 * @retval 0=成功, -1=UART忙, -2=参数错误, -3=点数为0
 */
int LIDAR_PackAndSendRawFrame(const PackPoint_t *points, uint16_t n_points)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
    if (points == NULL || n_points == 0) {
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <LIDAR_PackAndSendRawFrame+0x18>
 80048a2:	887b      	ldrh	r3, [r7, #2]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <LIDAR_PackAndSendRawFrame+0x1e>
        return -3;
 80048a8:	f06f 0302 	mvn.w	r3, #2
 80048ac:	e0bf      	b.n	8004a2e <LIDAR_PackAndSendRawFrame+0x19e>
    }
    
    // 检查 UART4 空闲
    if (uart4_tx_busy != 0) {
 80048ae:	4b62      	ldr	r3, [pc, #392]	@ (8004a38 <LIDAR_PackAndSendRawFrame+0x1a8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <LIDAR_PackAndSendRawFrame+0x2e>
        return -1;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e0b7      	b.n	8004a2e <LIDAR_PackAndSendRawFrame+0x19e>
    }
    
    // 静态缓冲区（最大支持700个点：26 + 700×5 = 3526字节）
    static uint8_t txbuf[4096];
    uint16_t offset = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	83fb      	strh	r3, [r7, #30]
    
    // 1. 包头（8字节）
    memcpy(&txbuf[offset], RAW_FRAME_HEADER, RAW_FRAME_HEADER_SIZE);
 80048c2:	8bfb      	ldrh	r3, [r7, #30]
 80048c4:	4a5d      	ldr	r2, [pc, #372]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80048c6:	4413      	add	r3, r2
 80048c8:	495d      	ldr	r1, [pc, #372]	@ (8004a40 <LIDAR_PackAndSendRawFrame+0x1b0>)
 80048ca:	461a      	mov	r2, r3
 80048cc:	460b      	mov	r3, r1
 80048ce:	cb03      	ldmia	r3!, {r0, r1}
 80048d0:	6010      	str	r0, [r2, #0]
 80048d2:	6051      	str	r1, [r2, #4]
    offset += RAW_FRAME_HEADER_SIZE;
 80048d4:	8bfb      	ldrh	r3, [r7, #30]
 80048d6:	3308      	adds	r3, #8
 80048d8:	83fb      	strh	r3, [r7, #30]
    
    // 2. 帧类型（1字节）
    txbuf[offset++] = FRAME_TYPE_LIDAR_RAW;
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	83fa      	strh	r2, [r7, #30]
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b56      	ldr	r3, [pc, #344]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80048e4:	2101      	movs	r1, #1
 80048e6:	5499      	strb	r1, [r3, r2]
    
    // 3. 帧序号（1字节，循环0-255）
    txbuf[offset++] = frame_sequence++;
 80048e8:	4b56      	ldr	r3, [pc, #344]	@ (8004a44 <LIDAR_PackAndSendRawFrame+0x1b4>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	b2d1      	uxtb	r1, r2
 80048f0:	4a54      	ldr	r2, [pc, #336]	@ (8004a44 <LIDAR_PackAndSendRawFrame+0x1b4>)
 80048f2:	7011      	strb	r1, [r2, #0]
 80048f4:	8bfa      	ldrh	r2, [r7, #30]
 80048f6:	1c51      	adds	r1, r2, #1
 80048f8:	83f9      	strh	r1, [r7, #30]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4a4f      	ldr	r2, [pc, #316]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80048fe:	5453      	strb	r3, [r2, r1]
    
    // 4. 时间戳（4字节，小端）
    uint32_t timestamp = HAL_GetTick();
 8004900:	f000 f936 	bl	8004b70 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]
    write_u32_le(&txbuf[offset], timestamp);
 8004906:	8bfb      	ldrh	r3, [r7, #30]
 8004908:	4a4c      	ldr	r2, [pc, #304]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 800490a:	4413      	add	r3, r2
 800490c:	6979      	ldr	r1, [r7, #20]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff77 	bl	8004802 <write_u32_le>
    offset += 4;
 8004914:	8bfb      	ldrh	r3, [r7, #30]
 8004916:	3304      	adds	r3, #4
 8004918:	83fb      	strh	r3, [r7, #30]
    
    // 5. 点数（2字节，小端）
    write_u16_le(&txbuf[offset], n_points);
 800491a:	8bfb      	ldrh	r3, [r7, #30]
 800491c:	4a47      	ldr	r2, [pc, #284]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 800491e:	4413      	add	r3, r2
 8004920:	887a      	ldrh	r2, [r7, #2]
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff ff55 	bl	80047d4 <write_u16_le>
    offset += 2;
 800492a:	8bfb      	ldrh	r3, [r7, #30]
 800492c:	3302      	adds	r3, #2
 800492e:	83fb      	strh	r3, [r7, #30]
    
    // 6. 原始5字节数据（N×5字节）
    for (uint16_t i = 0; i < n_points; ++i) {
 8004930:	2300      	movs	r3, #0
 8004932:	83bb      	strh	r3, [r7, #28]
 8004934:	e044      	b.n	80049c0 <LIDAR_PackAndSendRawFrame+0x130>
        const PackPoint_t *pt = &points[i];
 8004936:	8bba      	ldrh	r2, [r7, #28]
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
        // 按照RPLIDAR协议重构5字节格式：
        // byte0: [Start(1bit) | NotStart(1bit) | Quality(6bits)]
        // byte1-2: angle_q6 (小端)
        // byte3-4: distance_q2 (小端)
        
        uint8_t quality = pt->quality;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	76fb      	strb	r3, [r7, #27]
        if (quality > 63) quality = 63;  // 限制在6位范围
 800494e:	7efb      	ldrb	r3, [r7, #27]
 8004950:	2b3f      	cmp	r3, #63	@ 0x3f
 8004952:	d901      	bls.n	8004958 <LIDAR_PackAndSendRawFrame+0xc8>
 8004954:	233f      	movs	r3, #63	@ 0x3f
 8004956:	76fb      	strb	r3, [r7, #27]
        
        // byte0: quality占低6位，高2位设为0（简化处理）
        txbuf[offset++] = (quality << 2) & 0xFC;
 8004958:	8bfb      	ldrh	r3, [r7, #30]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	83fa      	strh	r2, [r7, #30]
 800495e:	461a      	mov	r2, r3
 8004960:	7efb      	ldrb	r3, [r7, #27]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	b2d9      	uxtb	r1, r3
 8004966:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 8004968:	5499      	strb	r1, [r3, r2]
        
        // byte1-2: angle_q6（小端）
        txbuf[offset++] = (uint8_t)(pt->angle_q6 & 0xFF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8819      	ldrh	r1, [r3, #0]
 800496e:	8bfb      	ldrh	r3, [r7, #30]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	83fa      	strh	r2, [r7, #30]
 8004974:	461a      	mov	r2, r3
 8004976:	b2c9      	uxtb	r1, r1
 8004978:	4b30      	ldr	r3, [pc, #192]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 800497a:	5499      	strb	r1, [r3, r2]
        txbuf[offset++] = (uint8_t)((pt->angle_q6 >> 8) & 0xFF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	b299      	uxth	r1, r3
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	83fa      	strh	r2, [r7, #30]
 800498a:	461a      	mov	r2, r3
 800498c:	b2c9      	uxtb	r1, r1
 800498e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 8004990:	5499      	strb	r1, [r3, r2]
        
        // byte3-4: distance_q2（小端）
        txbuf[offset++] = (uint8_t)(pt->distance_q2 & 0xFF);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8859      	ldrh	r1, [r3, #2]
 8004996:	8bfb      	ldrh	r3, [r7, #30]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	83fa      	strh	r2, [r7, #30]
 800499c:	461a      	mov	r2, r3
 800499e:	b2c9      	uxtb	r1, r1
 80049a0:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80049a2:	5499      	strb	r1, [r3, r2]
        txbuf[offset++] = (uint8_t)((pt->distance_q2 >> 8) & 0xFF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	885b      	ldrh	r3, [r3, #2]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	b299      	uxth	r1, r3
 80049ac:	8bfb      	ldrh	r3, [r7, #30]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	83fa      	strh	r2, [r7, #30]
 80049b2:	461a      	mov	r2, r3
 80049b4:	b2c9      	uxtb	r1, r1
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80049b8:	5499      	strb	r1, [r3, r2]
    for (uint16_t i = 0; i < n_points; ++i) {
 80049ba:	8bbb      	ldrh	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	83bb      	strh	r3, [r7, #28]
 80049c0:	8bba      	ldrh	r2, [r7, #28]
 80049c2:	887b      	ldrh	r3, [r7, #2]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d3b6      	bcc.n	8004936 <LIDAR_PackAndSendRawFrame+0xa6>
    }
    
    // 7. CRC-16/MODBUS（对从包头到数据末尾的所有字节计算）
    uint16_t crc = Radar_CalculateCRC16(txbuf, offset);
 80049c8:	8bfb      	ldrh	r3, [r7, #30]
 80049ca:	4619      	mov	r1, r3
 80049cc:	481b      	ldr	r0, [pc, #108]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80049ce:	f7ff fb93 	bl	80040f8 <Radar_CalculateCRC16>
 80049d2:	4603      	mov	r3, r0
 80049d4:	827b      	strh	r3, [r7, #18]
    write_u16_le(&txbuf[offset], crc);
 80049d6:	8bfb      	ldrh	r3, [r7, #30]
 80049d8:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80049da:	4413      	add	r3, r2
 80049dc:	8a7a      	ldrh	r2, [r7, #18]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fef7 	bl	80047d4 <write_u16_le>
    offset += 2;
 80049e6:	8bfb      	ldrh	r3, [r7, #30]
 80049e8:	3302      	adds	r3, #2
 80049ea:	83fb      	strh	r3, [r7, #30]
    
    // 8. 包尾（8字节）
    memcpy(&txbuf[offset], RAW_FRAME_TRAILER, RAW_FRAME_TRAILER_SIZE);
 80049ec:	8bfb      	ldrh	r3, [r7, #30]
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 80049f0:	4413      	add	r3, r2
 80049f2:	4915      	ldr	r1, [pc, #84]	@ (8004a48 <LIDAR_PackAndSendRawFrame+0x1b8>)
 80049f4:	461a      	mov	r2, r3
 80049f6:	460b      	mov	r3, r1
 80049f8:	cb03      	ldmia	r3!, {r0, r1}
 80049fa:	6010      	str	r0, [r2, #0]
 80049fc:	6051      	str	r1, [r2, #4]
    offset += RAW_FRAME_TRAILER_SIZE;
 80049fe:	8bfb      	ldrh	r3, [r7, #30]
 8004a00:	3308      	adds	r3, #8
 8004a02:	83fb      	strh	r3, [r7, #30]
    
    // 9. 触发 UART4 DMA 发送
    uart4_tx_busy = 1;
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <LIDAR_PackAndSendRawFrame+0x1a8>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef st = HAL_UART_Transmit_DMA(&huart4, txbuf, offset);
 8004a0a:	8bfb      	ldrh	r3, [r7, #30]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	490b      	ldr	r1, [pc, #44]	@ (8004a3c <LIDAR_PackAndSendRawFrame+0x1ac>)
 8004a10:	480e      	ldr	r0, [pc, #56]	@ (8004a4c <LIDAR_PackAndSendRawFrame+0x1bc>)
 8004a12:	f002 fe71 	bl	80076f8 <HAL_UART_Transmit_DMA>
 8004a16:	4603      	mov	r3, r0
 8004a18:	747b      	strb	r3, [r7, #17]
    
    if (st == HAL_OK) {
 8004a1a:	7c7b      	ldrb	r3, [r7, #17]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <LIDAR_PackAndSendRawFrame+0x194>
        return 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e004      	b.n	8004a2e <LIDAR_PackAndSendRawFrame+0x19e>
    } else {
        uart4_tx_busy = 0;
 8004a24:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <LIDAR_PackAndSendRawFrame+0x1a8>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
        return -1;
 8004a2a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200029e8 	.word	0x200029e8
 8004a3c:	20006104 	.word	0x20006104
 8004a40:	0800c5b8 	.word	0x0800c5b8
 8004a44:	200058fc 	.word	0x200058fc
 8004a48:	0800c5c0 	.word	0x0800c5c0
 8004a4c:	200002d0 	.word	0x200002d0

08004a50 <Reset_Handler>:
 8004a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a88 <LoopFillZerobss+0x14>
 8004a54:	2100      	movs	r1, #0
 8004a56:	e003      	b.n	8004a60 <LoopCopyDataInit>

08004a58 <CopyDataInit>:
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <LoopFillZerobss+0x18>)
 8004a5a:	585b      	ldr	r3, [r3, r1]
 8004a5c:	5043      	str	r3, [r0, r1]
 8004a5e:	3104      	adds	r1, #4

08004a60 <LoopCopyDataInit>:
 8004a60:	480b      	ldr	r0, [pc, #44]	@ (8004a90 <LoopFillZerobss+0x1c>)
 8004a62:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <LoopFillZerobss+0x20>)
 8004a64:	1842      	adds	r2, r0, r1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3f6      	bcc.n	8004a58 <CopyDataInit>
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004a98 <LoopFillZerobss+0x24>)
 8004a6c:	e002      	b.n	8004a74 <LoopFillZerobss>

08004a6e <FillZerobss>:
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f842 3b04 	str.w	r3, [r2], #4

08004a74 <LoopFillZerobss>:
 8004a74:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <LoopFillZerobss+0x28>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3f9      	bcc.n	8004a6e <FillZerobss>
 8004a7a:	f7fd fceb 	bl	8002454 <SystemInit>
 8004a7e:	f004 fe55 	bl	800972c <__libc_init_array>
 8004a82:	f7fc fba9 	bl	80011d8 <main>
 8004a86:	4770      	bx	lr
 8004a88:	20020000 	.word	0x20020000
 8004a8c:	0800c950 	.word	0x0800c950
 8004a90:	20000000 	.word	0x20000000
 8004a94:	200001e0 	.word	0x200001e0
 8004a98:	200001e0 	.word	0x200001e0
 8004a9c:	20007254 	.word	0x20007254

08004aa0 <ADC_IRQHandler>:
 8004aa0:	e7fe      	b.n	8004aa0 <ADC_IRQHandler>
	...

08004aa4 <HAL_Init>:
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <HAL_Init+0x40>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae4 <HAL_Init+0x40>)
 8004aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <HAL_Init+0x40>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <HAL_Init+0x40>)
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <HAL_Init+0x40>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a07      	ldr	r2, [pc, #28]	@ (8004ae4 <HAL_Init+0x40>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	2003      	movs	r0, #3
 8004ace:	f000 f94f 	bl	8004d70 <HAL_NVIC_SetPriorityGrouping>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 f808 	bl	8004ae8 <HAL_InitTick>
 8004ad8:	f7fd fb30 	bl	800213c <HAL_MspInit>
 8004adc:	2300      	movs	r3, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00

08004ae8 <HAL_InitTick>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <HAL_InitTick+0x54>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_InitTick+0x58>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f967 	bl	8004dda <HAL_SYSTICK_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_InitTick+0x2e>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00e      	b.n	8004b34 <HAL_InitTick+0x4c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d80a      	bhi.n	8004b32 <HAL_InitTick+0x4a>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	f000 f92f 	bl	8004d86 <HAL_NVIC_SetPriority>
 8004b28:	4a06      	ldr	r2, [pc, #24]	@ (8004b44 <HAL_InitTick+0x5c>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_InitTick+0x4c>
 8004b32:	2301      	movs	r3, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000014 	.word	0x20000014
 8004b44:	20000010 	.word	0x20000010

08004b48 <HAL_IncTick>:
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000014 	.word	0x20000014
 8004b6c:	20007104 	.word	0x20007104

08004b70 <HAL_GetTick>:
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4b03      	ldr	r3, [pc, #12]	@ (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20007104 	.word	0x20007104

08004b88 <HAL_Delay>:
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	f7ff ffee 	bl	8004b70 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d005      	beq.n	8004bae <HAL_Delay+0x26>
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <HAL_Delay+0x44>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	bf00      	nop
 8004bb0:	f7ff ffde 	bl	8004b70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d8f7      	bhi.n	8004bb0 <HAL_Delay+0x28>
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000014 	.word	0x20000014

08004bd0 <__NVIC_SetPriorityGrouping>:
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	60d3      	str	r3, [r2, #12]
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_GetPriorityGrouping>:
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <__NVIC_GetPriorityGrouping+0x18>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <__NVIC_EnableIRQ>:
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	db0b      	blt.n	8004c5e <__NVIC_EnableIRQ+0x2a>
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	f003 021f 	and.w	r2, r3, #31
 8004c4c:	4907      	ldr	r1, [pc, #28]	@ (8004c6c <__NVIC_EnableIRQ+0x38>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2001      	movs	r0, #1
 8004c56:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_SetPriority>:
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	6039      	str	r1, [r7, #0]
 8004c7a:	71fb      	strb	r3, [r7, #7]
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db0a      	blt.n	8004c9a <__NVIC_SetPriority+0x2a>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	490c      	ldr	r1, [pc, #48]	@ (8004cbc <__NVIC_SetPriority+0x4c>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	440b      	add	r3, r1
 8004c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8004c98:	e00a      	b.n	8004cb0 <__NVIC_SetPriority+0x40>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4908      	ldr	r1, [pc, #32]	@ (8004cc0 <__NVIC_SetPriority+0x50>)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	0112      	lsls	r2, r2, #4
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	440b      	add	r3, r1
 8004cae:	761a      	strb	r2, [r3, #24]
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000e100 	.word	0xe000e100
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <NVIC_EncodePriority>:
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	@ 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf28      	it	cs
 8004ce2:	2304      	movcs	r3, #4
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d902      	bls.n	8004cf4 <NVIC_EncodePriority+0x30>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	e000      	b.n	8004cf6 <NVIC_EncodePriority+0x32>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	401a      	ands	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	43d9      	mvns	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	@ 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <SysTick_Config>:
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d3c:	d301      	bcc.n	8004d42 <SysTick_Config+0x16>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e00f      	b.n	8004d62 <SysTick_Config+0x36>
 8004d42:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <SysTick_Config+0x40>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	210f      	movs	r1, #15
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	f7ff ff8e 	bl	8004c70 <__NVIC_SetPriority>
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <SysTick_Config+0x40>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <SysTick_Config+0x40>)
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	e000e010 	.word	0xe000e010

08004d70 <HAL_NVIC_SetPriorityGrouping>:
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff29 	bl	8004bd0 <__NVIC_SetPriorityGrouping>
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_SetPriority>:
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	f7ff ff3e 	bl	8004c18 <__NVIC_GetPriorityGrouping>
 8004d9c:	6178      	str	r0, [r7, #20]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	f7ff ff8e 	bl	8004cc4 <NVIC_EncodePriority>
 8004da8:	4602      	mov	r2, r0
 8004daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff5d 	bl	8004c70 <__NVIC_SetPriority>
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_EnableIRQ>:
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	71fb      	strb	r3, [r7, #7]
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff31 	bl	8004c34 <__NVIC_EnableIRQ>
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_SYSTICK_Config>:
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ffa2 	bl	8004d2c <SysTick_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_DMA_Init>:
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	f7ff feb6 	bl	8004b70 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_DMA_Init+0x1c>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e099      	b.n	8004f44 <HAL_DMA_Init+0x150>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e00f      	b.n	8004e52 <HAL_DMA_Init+0x5e>
 8004e32:	f7ff fe9d 	bl	8004b70 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d908      	bls.n	8004e52 <HAL_DMA_Init+0x5e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e078      	b.n	8004f44 <HAL_DMA_Init+0x150>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e8      	bne.n	8004e32 <HAL_DMA_Init+0x3e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4b38      	ldr	r3, [pc, #224]	@ (8004f4c <HAL_DMA_Init+0x158>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d107      	bne.n	8004ebc <HAL_DMA_Init+0xc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f023 0307 	bic.w	r3, r3, #7
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d117      	bne.n	8004f16 <HAL_DMA_Init+0x122>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <HAL_DMA_Init+0x122>
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb01 	bl	8005500 <DMA_CheckFifoParam>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_DMA_Init+0x122>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2240      	movs	r2, #64	@ 0x40
 8004f08:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004f12:	2301      	movs	r3, #1
 8004f14:	e016      	b.n	8004f44 <HAL_DMA_Init+0x150>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	615a      	str	r2, [r3, #20]
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fab8 	bl	8005494 <DMA_CalcBaseAndBitshift>
 8004f24:	4603      	mov	r3, r0
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	223f      	movs	r2, #63	@ 0x3f
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004f42:	2300      	movs	r3, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	f010803f 	.word	0xf010803f

08004f50 <HAL_DMA_Start_IT>:
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_DMA_Start_IT+0x26>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e040      	b.n	8004ff8 <HAL_DMA_Start_IT+0xa8>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d12f      	bne.n	8004fea <HAL_DMA_Start_IT+0x9a>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa4a 	bl	8005438 <DMA_SetConfig>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	223f      	movs	r2, #63	@ 0x3f
 8004faa:	409a      	lsls	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0216 	orr.w	r2, r2, #22
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x88>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e005      	b.n	8004ff6 <HAL_DMA_Start_IT+0xa6>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	75fb      	strb	r3, [r7, #23]
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_DMA_Abort>:
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	f7ff fdaf 	bl	8004b70 <HAL_GetTick>
 8005012:	60b8      	str	r0, [r7, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d008      	beq.n	8005032 <HAL_DMA_Abort+0x32>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2280      	movs	r2, #128	@ 0x80
 8005024:	655a      	str	r2, [r3, #84]	@ 0x54
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800502e:	2301      	movs	r3, #1
 8005030:	e052      	b.n	80050d8 <HAL_DMA_Abort+0xd8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0216 	bic.w	r2, r2, #22
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005050:	615a      	str	r2, [r3, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <HAL_DMA_Abort+0x62>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_DMA_Abort+0x72>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0208 	bic.w	r2, r2, #8
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e013      	b.n	80050ac <HAL_DMA_Abort+0xac>
 8005084:	f7ff fd74 	bl	8004b70 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b05      	cmp	r3, #5
 8005090:	d90c      	bls.n	80050ac <HAL_DMA_Abort+0xac>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2203      	movs	r2, #3
 80050a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050a8:	2303      	movs	r3, #3
 80050aa:	e015      	b.n	80050d8 <HAL_DMA_Abort+0xd8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e4      	bne.n	8005084 <HAL_DMA_Abort+0x84>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050be:	223f      	movs	r2, #63	@ 0x3f
 80050c0:	409a      	lsls	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050d6:	2300      	movs	r3, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_DMA_Abort_IT>:
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d004      	beq.n	80050fe <HAL_DMA_Abort_IT+0x1e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2280      	movs	r2, #128	@ 0x80
 80050f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80050fa:	2301      	movs	r3, #1
 80050fc:	e00c      	b.n	8005118 <HAL_DMA_Abort_IT+0x38>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2205      	movs	r2, #5
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	2300      	movs	r3, #0
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_DMA_IRQHandler>:
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	2300      	movs	r3, #0
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	4b8e      	ldr	r3, [pc, #568]	@ (800536c <HAL_DMA_IRQHandler+0x248>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a8e      	ldr	r2, [pc, #568]	@ (8005370 <HAL_DMA_IRQHandler+0x24c>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514e:	2208      	movs	r2, #8
 8005150:	409a      	lsls	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01a      	beq.n	8005190 <HAL_DMA_IRQHandler+0x6c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_DMA_IRQHandler+0x6c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	2208      	movs	r2, #8
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <HAL_DMA_IRQHandler+0xa2>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_DMA_IRQHandler+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b2:	2201      	movs	r2, #1
 80051b4:	409a      	lsls	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f043 0202 	orr.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ca:	2204      	movs	r2, #4
 80051cc:	409a      	lsls	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d012      	beq.n	80051fc <HAL_DMA_IRQHandler+0xd8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_DMA_IRQHandler+0xd8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	2204      	movs	r2, #4
 80051ea:	409a      	lsls	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f043 0204 	orr.w	r2, r3, #4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005200:	2210      	movs	r2, #16
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d043      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d03c      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521e:	2210      	movs	r2, #16
 8005220:	409a      	lsls	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d018      	beq.n	8005266 <HAL_DMA_IRQHandler+0x142>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <HAL_DMA_IRQHandler+0x130>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d024      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
 8005252:	e01f      	b.n	8005294 <HAL_DMA_IRQHandler+0x170>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
 8005264:	e016      	b.n	8005294 <HAL_DMA_IRQHandler+0x170>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d107      	bne.n	8005284 <HAL_DMA_IRQHandler+0x160>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0208 	bic.w	r2, r2, #8
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005298:	2220      	movs	r2, #32
 800529a:	409a      	lsls	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 808f 	beq.w	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8087 	beq.w	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ba:	2220      	movs	r2, #32
 80052bc:	409a      	lsls	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d136      	bne.n	800533c <HAL_DMA_IRQHandler+0x218>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0216 	bic.w	r2, r2, #22
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052ec:	615a      	str	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <HAL_DMA_IRQHandler+0x1da>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_DMA_IRQHandler+0x1ea>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0208 	bic.w	r2, r2, #8
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005312:	223f      	movs	r2, #63	@ 0x3f
 8005314:	409a      	lsls	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	2b00      	cmp	r3, #0
 8005330:	d07e      	beq.n	8005430 <HAL_DMA_IRQHandler+0x30c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
 800533a:	e079      	b.n	8005430 <HAL_DMA_IRQHandler+0x30c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01d      	beq.n	8005386 <HAL_DMA_IRQHandler+0x262>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_DMA_IRQHandler+0x250>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535c:	2b00      	cmp	r3, #0
 800535e:	d031      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
 8005368:	e02c      	b.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 800536a:	bf00      	nop
 800536c:	20000000 	.word	0x20000000
 8005370:	1b4e81b5 	.word	0x1b4e81b5
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d023      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
 8005384:	e01e      	b.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10f      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x290>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0210 	bic.w	r2, r2, #16
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d032      	beq.n	8005432 <HAL_DMA_IRQHandler+0x30e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d022      	beq.n	800541e <HAL_DMA_IRQHandler+0x2fa>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2205      	movs	r2, #5
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d307      	bcc.n	800540c <HAL_DMA_IRQHandler+0x2e8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f2      	bne.n	80053f0 <HAL_DMA_IRQHandler+0x2cc>
 800540a:	e000      	b.n	800540e <HAL_DMA_IRQHandler+0x2ea>
 800540c:	bf00      	nop
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_DMA_IRQHandler+0x30e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
 800542e:	e000      	b.n	8005432 <HAL_DMA_IRQHandler+0x30e>
 8005430:	bf00      	nop
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <DMA_SetConfig>:
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d108      	bne.n	8005478 <DMA_SetConfig+0x40>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e007      	b.n	8005488 <DMA_SetConfig+0x50>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <DMA_CalcBaseAndBitshift>:
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	3b10      	subs	r3, #16
 80054a4:	4a14      	ldr	r2, [pc, #80]	@ (80054f8 <DMA_CalcBaseAndBitshift+0x64>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <DMA_CalcBaseAndBitshift+0x68>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d909      	bls.n	80054d6 <DMA_CalcBaseAndBitshift+0x42>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	1d1a      	adds	r2, r3, #4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80054d4:	e007      	b.n	80054e6 <DMA_CalcBaseAndBitshift+0x52>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	aaaaaaab 	.word	0xaaaaaaab
 80054fc:	0800c5c8 	.word	0x0800c5c8

08005500 <DMA_CheckFifoParam>:
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11f      	bne.n	800555a <DMA_CheckFifoParam+0x5a>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d856      	bhi.n	80055ce <DMA_CheckFifoParam+0xce>
 8005520:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <DMA_CheckFifoParam+0x28>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	08005539 	.word	0x08005539
 800552c:	0800554b 	.word	0x0800554b
 8005530:	08005539 	.word	0x08005539
 8005534:	080055cf 	.word	0x080055cf
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d046      	beq.n	80055d2 <DMA_CheckFifoParam+0xd2>
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e043      	b.n	80055d2 <DMA_CheckFifoParam+0xd2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005552:	d140      	bne.n	80055d6 <DMA_CheckFifoParam+0xd6>
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
 8005558:	e03d      	b.n	80055d6 <DMA_CheckFifoParam+0xd6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005562:	d121      	bne.n	80055a8 <DMA_CheckFifoParam+0xa8>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d837      	bhi.n	80055da <DMA_CheckFifoParam+0xda>
 800556a:	a201      	add	r2, pc, #4	@ (adr r2, 8005570 <DMA_CheckFifoParam+0x70>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005581 	.word	0x08005581
 8005574:	08005587 	.word	0x08005587
 8005578:	08005581 	.word	0x08005581
 800557c:	08005599 	.word	0x08005599
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e030      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d025      	beq.n	80055de <DMA_CheckFifoParam+0xde>
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	e022      	b.n	80055de <DMA_CheckFifoParam+0xde>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055a0:	d11f      	bne.n	80055e2 <DMA_CheckFifoParam+0xe2>
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
 80055a6:	e01c      	b.n	80055e2 <DMA_CheckFifoParam+0xe2>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d903      	bls.n	80055b6 <DMA_CheckFifoParam+0xb6>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d003      	beq.n	80055bc <DMA_CheckFifoParam+0xbc>
 80055b4:	e018      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e015      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <DMA_CheckFifoParam+0xe6>
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
 80055cc:	e00b      	b.n	80055e6 <DMA_CheckFifoParam+0xe6>
 80055ce:	bf00      	nop
 80055d0:	e00a      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055d2:	bf00      	nop
 80055d4:	e008      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055d6:	bf00      	nop
 80055d8:	e006      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055da:	bf00      	nop
 80055dc:	e004      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
 80055e6:	bf00      	nop
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <HAL_GPIO_Init>:
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	@ 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	e165      	b.n	80058e0 <HAL_GPIO_Init+0x2e8>
 8005614:	2201      	movs	r2, #1
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	429a      	cmp	r2, r3
 800562e:	f040 8154 	bne.w	80058da <HAL_GPIO_Init+0x2e2>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d00b      	beq.n	8005652 <HAL_GPIO_Init+0x5a>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d007      	beq.n	8005652 <HAL_GPIO_Init+0x5a>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b11      	cmp	r3, #17
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x5a>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b12      	cmp	r3, #18
 8005650:	d130      	bne.n	80056b4 <HAL_GPIO_Init+0xbc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	2201      	movs	r2, #1
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 0201 	and.w	r2, r3, #1
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	2203      	movs	r2, #3
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	60da      	str	r2, [r3, #12]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0xfc>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b12      	cmp	r3, #18
 80056f2:	d123      	bne.n	800573c <HAL_GPIO_Init+0x144>
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	08da      	lsrs	r2, r3, #3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3208      	adds	r2, #8
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	220f      	movs	r2, #15
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	08da      	lsrs	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3208      	adds	r2, #8
 8005736:	69b9      	ldr	r1, [r7, #24]
 8005738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	2203      	movs	r2, #3
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0203 	and.w	r2, r3, #3
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80ae 	beq.w	80058da <HAL_GPIO_Init+0x2e2>
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	4b5d      	ldr	r3, [pc, #372]	@ (80058f8 <HAL_GPIO_Init+0x300>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	4a5c      	ldr	r2, [pc, #368]	@ (80058f8 <HAL_GPIO_Init+0x300>)
 8005788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800578c:	6453      	str	r3, [r2, #68]	@ 0x44
 800578e:	4b5a      	ldr	r3, [pc, #360]	@ (80058f8 <HAL_GPIO_Init+0x300>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a58      	ldr	r2, [pc, #352]	@ (80058fc <HAL_GPIO_Init+0x304>)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	3302      	adds	r3, #2
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005900 <HAL_GPIO_Init+0x308>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d025      	beq.n	8005812 <HAL_GPIO_Init+0x21a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005904 <HAL_GPIO_Init+0x30c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01f      	beq.n	800580e <HAL_GPIO_Init+0x216>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a4d      	ldr	r2, [pc, #308]	@ (8005908 <HAL_GPIO_Init+0x310>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d019      	beq.n	800580a <HAL_GPIO_Init+0x212>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a4c      	ldr	r2, [pc, #304]	@ (800590c <HAL_GPIO_Init+0x314>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_GPIO_Init+0x20e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005910 <HAL_GPIO_Init+0x318>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00d      	beq.n	8005802 <HAL_GPIO_Init+0x20a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005914 <HAL_GPIO_Init+0x31c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <HAL_GPIO_Init+0x206>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a49      	ldr	r2, [pc, #292]	@ (8005918 <HAL_GPIO_Init+0x320>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_GPIO_Init+0x202>
 80057f6:	2306      	movs	r3, #6
 80057f8:	e00c      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 80057fa:	2307      	movs	r3, #7
 80057fc:	e00a      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 80057fe:	2305      	movs	r3, #5
 8005800:	e008      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 8005802:	2304      	movs	r3, #4
 8005804:	e006      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 8005806:	2303      	movs	r3, #3
 8005808:	e004      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 800580a:	2302      	movs	r3, #2
 800580c:	e002      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_GPIO_Init+0x21c>
 8005812:	2300      	movs	r3, #0
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	f002 0203 	and.w	r2, r2, #3
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4093      	lsls	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	4935      	ldr	r1, [pc, #212]	@ (80058fc <HAL_GPIO_Init+0x304>)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005832:	4b3a      	ldr	r3, [pc, #232]	@ (800591c <HAL_GPIO_Init+0x324>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x25e>
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	4a31      	ldr	r2, [pc, #196]	@ (800591c <HAL_GPIO_Init+0x324>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b2f      	ldr	r3, [pc, #188]	@ (800591c <HAL_GPIO_Init+0x324>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x288>
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	4a26      	ldr	r2, [pc, #152]	@ (800591c <HAL_GPIO_Init+0x324>)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	6053      	str	r3, [r2, #4]
 8005886:	4b25      	ldr	r3, [pc, #148]	@ (800591c <HAL_GPIO_Init+0x324>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x2b2>
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <HAL_GPIO_Init+0x324>)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	4b1a      	ldr	r3, [pc, #104]	@ (800591c <HAL_GPIO_Init+0x324>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x2dc>
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	4a11      	ldr	r2, [pc, #68]	@ (800591c <HAL_GPIO_Init+0x324>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	60d3      	str	r3, [r2, #12]
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	3301      	adds	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b0f      	cmp	r3, #15
 80058e4:	f67f ae96 	bls.w	8005614 <HAL_GPIO_Init+0x1c>
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	3724      	adds	r7, #36	@ 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40013800 	.word	0x40013800
 8005900:	40020000 	.word	0x40020000
 8005904:	40020400 	.word	0x40020400
 8005908:	40020800 	.word	0x40020800
 800590c:	40020c00 	.word	0x40020c00
 8005910:	40021000 	.word	0x40021000
 8005914:	40021400 	.word	0x40021400
 8005918:	40021800 	.word	0x40021800
 800591c:	40013c00 	.word	0x40013c00

08005920 <HAL_GPIO_WritePin>:
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
 800592c:	4613      	mov	r3, r2
 800592e:	707b      	strb	r3, [r7, #1]
 8005930:	787b      	ldrb	r3, [r7, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_GPIO_WritePin+0x1e>
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
 800593c:	e003      	b.n	8005946 <HAL_GPIO_WritePin+0x26>
 800593e:	887b      	ldrh	r3, [r7, #2]
 8005940:	041a      	lsls	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_I2C_Init>:
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_I2C_Init+0x12>
 8005962:	2301      	movs	r3, #1
 8005964:	e12b      	b.n	8005bbe <HAL_I2C_Init+0x26a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_I2C_Init+0x2c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fb8e 	bl	800109c <HAL_I2C_MspInit>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	@ 0x24
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f000 fa02 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4a81      	ldr	r2, [pc, #516]	@ (8005bc8 <HAL_I2C_Init+0x274>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d807      	bhi.n	80059d8 <HAL_I2C_Init+0x84>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4a80      	ldr	r2, [pc, #512]	@ (8005bcc <HAL_I2C_Init+0x278>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bf94      	ite	ls
 80059d0:	2301      	movls	r3, #1
 80059d2:	2300      	movhi	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e006      	b.n	80059e6 <HAL_I2C_Init+0x92>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a7d      	ldr	r2, [pc, #500]	@ (8005bd0 <HAL_I2C_Init+0x27c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	bf94      	ite	ls
 80059e0:	2301      	movls	r3, #1
 80059e2:	2300      	movhi	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_Init+0x9a>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0e7      	b.n	8005bbe <HAL_I2C_Init+0x26a>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a78      	ldr	r2, [pc, #480]	@ (8005bd4 <HAL_I2C_Init+0x280>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	0c9b      	lsrs	r3, r3, #18
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc8 <HAL_I2C_Init+0x274>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d802      	bhi.n	8005a28 <HAL_I2C_Init+0xd4>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3301      	adds	r3, #1
 8005a26:	e009      	b.n	8005a3c <HAL_I2C_Init+0xe8>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	4a69      	ldr	r2, [pc, #420]	@ (8005bd8 <HAL_I2C_Init+0x284>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6213      	str	r3, [r2, #32]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	495c      	ldr	r1, [pc, #368]	@ (8005bc8 <HAL_I2C_Init+0x274>)
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	d819      	bhi.n	8005a90 <HAL_I2C_Init+0x13c>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1e59      	subs	r1, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a70:	400b      	ands	r3, r1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_I2C_Init+0x138>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1e59      	subs	r1, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8a:	e051      	b.n	8005b30 <HAL_I2C_Init+0x1dc>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	e04f      	b.n	8005b30 <HAL_I2C_Init+0x1dc>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d111      	bne.n	8005abc <HAL_I2C_Init+0x168>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	1e58      	subs	r0, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	440b      	add	r3, r1
 8005aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e012      	b.n	8005ae2 <HAL_I2C_Init+0x18e>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1e58      	subs	r0, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6859      	ldr	r1, [r3, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	0099      	lsls	r1, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_I2C_Init+0x196>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e022      	b.n	8005b30 <HAL_I2C_Init+0x1dc>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10e      	bne.n	8005b10 <HAL_I2C_Init+0x1bc>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1e58      	subs	r0, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6859      	ldr	r1, [r3, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	440b      	add	r3, r1
 8005b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b04:	3301      	adds	r3, #1
 8005b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0e:	e00f      	b.n	8005b30 <HAL_I2C_Init+0x1dc>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1e58      	subs	r0, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6859      	ldr	r1, [r3, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	0099      	lsls	r1, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b26:	3301      	adds	r3, #1
 8005b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	6809      	ldr	r1, [r1, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61cb      	str	r3, [r1, #28]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6911      	ldr	r1, [r2, #16]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68d2      	ldr	r2, [r2, #12]
 8005b6a:	4311      	orrs	r1, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	6093      	str	r3, [r2, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	000186a0 	.word	0x000186a0
 8005bcc:	001e847f 	.word	0x001e847f
 8005bd0:	003d08ff 	.word	0x003d08ff
 8005bd4:	431bde83 	.word	0x431bde83
 8005bd8:	10624dd3 	.word	0x10624dd3

08005bdc <HAL_RCC_ClockConfig>:
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x14>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0cc      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005bf0:	4b68      	ldr	r3, [pc, #416]	@ (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d90c      	bls.n	8005c18 <HAL_RCC_ClockConfig+0x3c>
 8005bfe:	4b65      	ldr	r3, [pc, #404]	@ (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	4b63      	ldr	r3, [pc, #396]	@ (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x3c>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0b8      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x8a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x60>
 8005c30:	4b59      	ldr	r3, [pc, #356]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a58      	ldr	r2, [pc, #352]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c3a:	6093      	str	r3, [r2, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x78>
 8005c48:	4b53      	ldr	r3, [pc, #332]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a52      	ldr	r2, [pc, #328]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c52:	6093      	str	r3, [r2, #8]
 8005c54:	4b50      	ldr	r3, [pc, #320]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	494d      	ldr	r1, [pc, #308]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d044      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x120>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xae>
 8005c7a:	4b47      	ldr	r3, [pc, #284]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d119      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e07f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d003      	beq.n	8005c9a <HAL_RCC_ClockConfig+0xbe>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xce>
 8005c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e06f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005caa:	4b3b      	ldr	r3, [pc, #236]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e067      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005cba:	4b37      	ldr	r3, [pc, #220]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4934      	ldr	r1, [pc, #208]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	608b      	str	r3, [r1, #8]
 8005ccc:	f7fe ff50 	bl	8004b70 <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_ClockConfig+0x10e>
 8005cd4:	f7fe ff4c 	bl	8004b70 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0x10e>
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e04f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005cea:	4b2b      	ldr	r3, [pc, #172]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 020c 	and.w	r2, r3, #12
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1eb      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0xf8>
 8005cfc:	4b25      	ldr	r3, [pc, #148]	@ (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d20c      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x148>
 8005d0a:	4b22      	ldr	r3, [pc, #136]	@ (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	4b20      	ldr	r3, [pc, #128]	@ (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x148>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e032      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x166>
 8005d30:	4b19      	ldr	r3, [pc, #100]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4916      	ldr	r1, [pc, #88]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x186>
 8005d4e:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	490e      	ldr	r1, [pc, #56]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
 8005d62:	f000 f855 	bl	8005e10 <HAL_RCC_GetSysClockFreq>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	490a      	ldr	r1, [pc, #40]	@ (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	5ccb      	ldrb	r3, [r1, r3]
 8005d76:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7a:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe feb0 	bl	8004ae8 <HAL_InitTick>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40023c00 	.word	0x40023c00
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	0800c5a0 	.word	0x0800c5a0
 8005da0:	20000000 	.word	0x20000000
 8005da4:	20000010 	.word	0x20000010

08005da8 <HAL_RCC_GetHCLKFreq>:
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	4b03      	ldr	r3, [pc, #12]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000000 	.word	0x20000000

08005dc0 <HAL_RCC_GetPCLK1Freq>:
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	f7ff fff0 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0a9b      	lsrs	r3, r3, #10
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4903      	ldr	r1, [pc, #12]	@ (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40023800 	.word	0x40023800
 8005de4:	0800c5b0 	.word	0x0800c5b0

08005de8 <HAL_RCC_GetPCLK2Freq>:
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	f7ff ffdc 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b05      	ldr	r3, [pc, #20]	@ (8005e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	0b5b      	lsrs	r3, r3, #13
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	4903      	ldr	r1, [pc, #12]	@ (8005e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	0800c5b0 	.word	0x0800c5b0

08005e10 <HAL_RCC_GetSysClockFreq>:
 8005e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e14:	b0a6      	sub	sp, #152	@ 0x98
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e36:	4bc8      	ldr	r3, [pc, #800]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	f200 817e 	bhi.w	8006140 <HAL_RCC_GetSysClockFreq+0x330>
 8005e44:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08006141 	.word	0x08006141
 8005e54:	08006141 	.word	0x08006141
 8005e58:	08006141 	.word	0x08006141
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	08006141 	.word	0x08006141
 8005e64:	08006141 	.word	0x08006141
 8005e68:	08006141 	.word	0x08006141
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08006141 	.word	0x08006141
 8005e74:	08006141 	.word	0x08006141
 8005e78:	08006141 	.word	0x08006141
 8005e7c:	08005ffb 	.word	0x08005ffb
 8005e80:	4bb6      	ldr	r3, [pc, #728]	@ (800615c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e86:	e15f      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x338>
 8005e88:	4bb5      	ldr	r3, [pc, #724]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x350>)
 8005e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e8e:	e15b      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x338>
 8005e90:	4bb1      	ldr	r3, [pc, #708]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e9c:	4bae      	ldr	r3, [pc, #696]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d031      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0xfc>
 8005ea8:	4bab      	ldr	r3, [pc, #684]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	099b      	lsrs	r3, r3, #6
 8005eae:	2200      	movs	r2, #0
 8005eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eba:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x350>)
 8005ec2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	fb03 f202 	mul.w	r2, r3, r2
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4621      	mov	r1, r4
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4aa2      	ldr	r2, [pc, #648]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x350>)
 8005ed8:	4621      	mov	r1, r4
 8005eda:	fba1 1202 	umull	r1, r2, r1, r2
 8005ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ee0:	460a      	mov	r2, r1
 8005ee2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005ee4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ee6:	4413      	add	r3, r2
 8005ee8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eee:	2200      	movs	r2, #0
 8005ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ef2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005ef4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ef8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005efc:	f7fa fe74 	bl	8000be8 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f0a:	e064      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x1c6>
 8005f0c:	4b92      	ldr	r3, [pc, #584]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	2200      	movs	r2, #0
 8005f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f16:	657a      	str	r2, [r7, #84]	@ 0x54
 8005f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f20:	2300      	movs	r3, #0
 8005f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005f28:	4622      	mov	r2, r4
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	f04f 0000 	mov.w	r0, #0
 8005f30:	f04f 0100 	mov.w	r1, #0
 8005f34:	0159      	lsls	r1, r3, #5
 8005f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f3a:	0150      	lsls	r0, r2, #5
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4621      	mov	r1, r4
 8005f42:	1a51      	subs	r1, r2, r1
 8005f44:	6139      	str	r1, [r7, #16]
 8005f46:	4629      	mov	r1, r5
 8005f48:	eb63 0301 	sbc.w	r3, r3, r1
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f5a:	4659      	mov	r1, fp
 8005f5c:	018b      	lsls	r3, r1, #6
 8005f5e:	4651      	mov	r1, sl
 8005f60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f64:	4651      	mov	r1, sl
 8005f66:	018a      	lsls	r2, r1, #6
 8005f68:	4651      	mov	r1, sl
 8005f6a:	ebb2 0801 	subs.w	r8, r2, r1
 8005f6e:	4659      	mov	r1, fp
 8005f70:	eb63 0901 	sbc.w	r9, r3, r1
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f88:	4690      	mov	r8, r2
 8005f8a:	4699      	mov	r9, r3
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	eb18 0303 	adds.w	r3, r8, r3
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	462b      	mov	r3, r5
 8005f96:	eb49 0303 	adc.w	r3, r9, r3
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fa8:	4629      	mov	r1, r5
 8005faa:	028b      	lsls	r3, r1, #10
 8005fac:	4621      	mov	r1, r4
 8005fae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	028a      	lsls	r2, r1, #10
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fc8:	f7fa fe0e 	bl	8000be8 <__aeabi_uldivmod>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fd6:	4b60      	ldr	r3, [pc, #384]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	0c1b      	lsrs	r3, r3, #16
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fe8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ff8:	e0a6      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x338>
 8005ffa:	4b57      	ldr	r3, [pc, #348]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006006:	4b54      	ldr	r3, [pc, #336]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d02a      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x258>
 8006012:	4b51      	ldr	r3, [pc, #324]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	2200      	movs	r2, #0
 800601a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800601c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800601e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006020:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006024:	2100      	movs	r1, #0
 8006026:	4b4e      	ldr	r3, [pc, #312]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x350>)
 8006028:	fb03 f201 	mul.w	r2, r3, r1
 800602c:	2300      	movs	r3, #0
 800602e:	fb00 f303 	mul.w	r3, r0, r3
 8006032:	4413      	add	r3, r2
 8006034:	4a4a      	ldr	r2, [pc, #296]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x350>)
 8006036:	fba0 1202 	umull	r1, r2, r0, r2
 800603a:	677a      	str	r2, [r7, #116]	@ 0x74
 800603c:	460a      	mov	r2, r1
 800603e:	673a      	str	r2, [r7, #112]	@ 0x70
 8006040:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006042:	4413      	add	r3, r2
 8006044:	677b      	str	r3, [r7, #116]	@ 0x74
 8006046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800604a:	2200      	movs	r2, #0
 800604c:	633b      	str	r3, [r7, #48]	@ 0x30
 800604e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006050:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006054:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006058:	f7fa fdc6 	bl	8000be8 <__aeabi_uldivmod>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4613      	mov	r3, r2
 8006062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006066:	e05b      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x310>
 8006068:	4b3b      	ldr	r3, [pc, #236]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	099b      	lsrs	r3, r3, #6
 800606e:	2200      	movs	r2, #0
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	623b      	str	r3, [r7, #32]
 800607c:	2300      	movs	r3, #0
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	f04f 0000 	mov.w	r0, #0
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	0159      	lsls	r1, r3, #5
 8006092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006096:	0150      	lsls	r0, r2, #5
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4641      	mov	r1, r8
 800609e:	ebb2 0a01 	subs.w	sl, r2, r1
 80060a2:	4649      	mov	r1, r9
 80060a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060bc:	ebb2 040a 	subs.w	r4, r2, sl
 80060c0:	eb63 050b 	sbc.w	r5, r3, fp
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	00eb      	lsls	r3, r5, #3
 80060ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060d2:	00e2      	lsls	r2, r4, #3
 80060d4:	4614      	mov	r4, r2
 80060d6:	461d      	mov	r5, r3
 80060d8:	4643      	mov	r3, r8
 80060da:	18e3      	adds	r3, r4, r3
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	464b      	mov	r3, r9
 80060e0:	eb45 0303 	adc.w	r3, r5, r3
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060f2:	4629      	mov	r1, r5
 80060f4:	028b      	lsls	r3, r1, #10
 80060f6:	4621      	mov	r1, r4
 80060f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060fc:	4621      	mov	r1, r4
 80060fe:	028a      	lsls	r2, r1, #10
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006108:	2200      	movs	r2, #0
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006112:	f7fa fd69 	bl	8000be8 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4613      	mov	r3, r2
 800611c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006120:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <HAL_RCC_GetSysClockFreq+0x348>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0f1b      	lsrs	r3, r3, #28
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800612e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006132:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800613e:	e003      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x338>
 8006140:	4b06      	ldr	r3, [pc, #24]	@ (800615c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006146:	bf00      	nop
 8006148:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800614c:	4618      	mov	r0, r3
 800614e:	3798      	adds	r7, #152	@ 0x98
 8006150:	46bd      	mov	sp, r7
 8006152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800
 800615c:	00f42400 	.word	0x00f42400
 8006160:	017d7840 	.word	0x017d7840

08006164 <HAL_RCC_OscConfig>:
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8083 	beq.w	8006284 <HAL_RCC_OscConfig+0x120>
 800617e:	4b95      	ldr	r3, [pc, #596]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	2b04      	cmp	r3, #4
 8006188:	d019      	beq.n	80061be <HAL_RCC_OscConfig+0x5a>
 800618a:	4b92      	ldr	r3, [pc, #584]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 030c 	and.w	r3, r3, #12
 8006192:	2b08      	cmp	r3, #8
 8006194:	d106      	bne.n	80061a4 <HAL_RCC_OscConfig+0x40>
 8006196:	4b8f      	ldr	r3, [pc, #572]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800619e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061a2:	d00c      	beq.n	80061be <HAL_RCC_OscConfig+0x5a>
 80061a4:	4b8b      	ldr	r3, [pc, #556]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d112      	bne.n	80061d6 <HAL_RCC_OscConfig+0x72>
 80061b0:	4b88      	ldr	r3, [pc, #544]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061bc:	d10b      	bne.n	80061d6 <HAL_RCC_OscConfig+0x72>
 80061be:	4b85      	ldr	r3, [pc, #532]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d05b      	beq.n	8006282 <HAL_RCC_OscConfig+0x11e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d157      	bne.n	8006282 <HAL_RCC_OscConfig+0x11e>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e216      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061de:	d106      	bne.n	80061ee <HAL_RCC_OscConfig+0x8a>
 80061e0:	4b7c      	ldr	r3, [pc, #496]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a7b      	ldr	r2, [pc, #492]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e01d      	b.n	800622a <HAL_RCC_OscConfig+0xc6>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061f6:	d10c      	bne.n	8006212 <HAL_RCC_OscConfig+0xae>
 80061f8:	4b76      	ldr	r3, [pc, #472]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a75      	ldr	r2, [pc, #468]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4b73      	ldr	r3, [pc, #460]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a72      	ldr	r2, [pc, #456]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e00b      	b.n	800622a <HAL_RCC_OscConfig+0xc6>
 8006212:	4b70      	ldr	r3, [pc, #448]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a6f      	ldr	r2, [pc, #444]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	4b6d      	ldr	r3, [pc, #436]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6c      	ldr	r2, [pc, #432]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006224:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_RCC_OscConfig+0xf6>
 8006232:	f7fe fc9d 	bl	8004b70 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0xe8>
 800623a:	f7fe fc99 	bl	8004b70 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b64      	cmp	r3, #100	@ 0x64
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0xe8>
 8006248:	2303      	movs	r3, #3
 800624a:	e1db      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 800624c:	4b61      	ldr	r3, [pc, #388]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0xd6>
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x120>
 800625a:	f7fe fc89 	bl	8004b70 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x110>
 8006262:	f7fe fc85 	bl	8004b70 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b64      	cmp	r3, #100	@ 0x64
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x110>
 8006270:	2303      	movs	r3, #3
 8006272:	e1c7      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 8006274:	4b57      	ldr	r3, [pc, #348]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0xfe>
 8006280:	e000      	b.n	8006284 <HAL_RCC_OscConfig+0x120>
 8006282:	bf00      	nop
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d06f      	beq.n	8006370 <HAL_RCC_OscConfig+0x20c>
 8006290:	4b50      	ldr	r3, [pc, #320]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b00      	cmp	r3, #0
 800629a:	d017      	beq.n	80062cc <HAL_RCC_OscConfig+0x168>
 800629c:	4b4d      	ldr	r3, [pc, #308]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d105      	bne.n	80062b4 <HAL_RCC_OscConfig+0x150>
 80062a8:	4b4a      	ldr	r3, [pc, #296]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_RCC_OscConfig+0x168>
 80062b4:	4b47      	ldr	r3, [pc, #284]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 030c 	and.w	r3, r3, #12
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d11c      	bne.n	80062fa <HAL_RCC_OscConfig+0x196>
 80062c0:	4b44      	ldr	r3, [pc, #272]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d116      	bne.n	80062fa <HAL_RCC_OscConfig+0x196>
 80062cc:	4b41      	ldr	r3, [pc, #260]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_OscConfig+0x180>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_OscConfig+0x180>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e18f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80062e4:	4b3b      	ldr	r3, [pc, #236]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4938      	ldr	r1, [pc, #224]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]
 80062f8:	e03a      	b.n	8006370 <HAL_RCC_OscConfig+0x20c>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d020      	beq.n	8006344 <HAL_RCC_OscConfig+0x1e0>
 8006302:	4b35      	ldr	r3, [pc, #212]	@ (80063d8 <HAL_RCC_OscConfig+0x274>)
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f7fe fc32 	bl	8004b70 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x1be>
 8006310:	f7fe fc2e 	bl	8004b70 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x1be>
 800631e:	2303      	movs	r3, #3
 8006320:	e170      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 8006322:	4b2c      	ldr	r3, [pc, #176]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x1ac>
 800632e:	4b29      	ldr	r3, [pc, #164]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4925      	ldr	r1, [pc, #148]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
 8006342:	e015      	b.n	8006370 <HAL_RCC_OscConfig+0x20c>
 8006344:	4b24      	ldr	r3, [pc, #144]	@ (80063d8 <HAL_RCC_OscConfig+0x274>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f7fe fc11 	bl	8004b70 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x200>
 8006352:	f7fe fc0d 	bl	8004b70 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x200>
 8006360:	2303      	movs	r3, #3
 8006362:	e14f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 8006364:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <HAL_RCC_OscConfig+0x1ee>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d037      	beq.n	80063ec <HAL_RCC_OscConfig+0x288>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d016      	beq.n	80063b2 <HAL_RCC_OscConfig+0x24e>
 8006384:	4b15      	ldr	r3, [pc, #84]	@ (80063dc <HAL_RCC_OscConfig+0x278>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	f7fe fbf1 	bl	8004b70 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x240>
 8006392:	f7fe fbed 	bl	8004b70 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x240>
 80063a0:	2303      	movs	r3, #3
 80063a2:	e12f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <HAL_RCC_OscConfig+0x270>)
 80063a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x22e>
 80063b0:	e01c      	b.n	80063ec <HAL_RCC_OscConfig+0x288>
 80063b2:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <HAL_RCC_OscConfig+0x278>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f7fe fbda 	bl	8004b70 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]
 80063be:	e00f      	b.n	80063e0 <HAL_RCC_OscConfig+0x27c>
 80063c0:	f7fe fbd6 	bl	8004b70 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d908      	bls.n	80063e0 <HAL_RCC_OscConfig+0x27c>
 80063ce:	2303      	movs	r3, #3
 80063d0:	e118      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800
 80063d8:	42470000 	.word	0x42470000
 80063dc:	42470e80 	.word	0x42470e80
 80063e0:	4b8a      	ldr	r3, [pc, #552]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80063e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e9      	bne.n	80063c0 <HAL_RCC_OscConfig+0x25c>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8097 	beq.w	8006528 <HAL_RCC_OscConfig+0x3c4>
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
 80063fe:	4b83      	ldr	r3, [pc, #524]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <HAL_RCC_OscConfig+0x2c6>
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b7f      	ldr	r3, [pc, #508]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006412:	4a7e      	ldr	r2, [pc, #504]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006418:	6413      	str	r3, [r2, #64]	@ 0x40
 800641a:	4b7c      	ldr	r3, [pc, #496]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
 800642a:	4b79      	ldr	r3, [pc, #484]	@ (8006610 <HAL_RCC_OscConfig+0x4ac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d118      	bne.n	8006468 <HAL_RCC_OscConfig+0x304>
 8006436:	4b76      	ldr	r3, [pc, #472]	@ (8006610 <HAL_RCC_OscConfig+0x4ac>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a75      	ldr	r2, [pc, #468]	@ (8006610 <HAL_RCC_OscConfig+0x4ac>)
 800643c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	f7fe fb95 	bl	8004b70 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x2f8>
 800644a:	f7fe fb91 	bl	8004b70 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x2f8>
 8006458:	2303      	movs	r3, #3
 800645a:	e0d3      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 800645c:	4b6c      	ldr	r3, [pc, #432]	@ (8006610 <HAL_RCC_OscConfig+0x4ac>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x2e6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x31a>
 8006470:	4b66      	ldr	r3, [pc, #408]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006474:	4a65      	ldr	r2, [pc, #404]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6713      	str	r3, [r2, #112]	@ 0x70
 800647c:	e01c      	b.n	80064b8 <HAL_RCC_OscConfig+0x354>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b05      	cmp	r3, #5
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x33c>
 8006486:	4b61      	ldr	r3, [pc, #388]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648a:	4a60      	ldr	r2, [pc, #384]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 800648c:	f043 0304 	orr.w	r3, r3, #4
 8006490:	6713      	str	r3, [r2, #112]	@ 0x70
 8006492:	4b5e      	ldr	r3, [pc, #376]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006496:	4a5d      	ldr	r2, [pc, #372]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6713      	str	r3, [r2, #112]	@ 0x70
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0x354>
 80064a0:	4b5a      	ldr	r3, [pc, #360]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a4:	4a59      	ldr	r2, [pc, #356]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ac:	4b57      	ldr	r3, [pc, #348]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b0:	4a56      	ldr	r2, [pc, #344]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064b2:	f023 0304 	bic.w	r3, r3, #4
 80064b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d015      	beq.n	80064ec <HAL_RCC_OscConfig+0x388>
 80064c0:	f7fe fb56 	bl	8004b70 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]
 80064c6:	e00a      	b.n	80064de <HAL_RCC_OscConfig+0x37a>
 80064c8:	f7fe fb52 	bl	8004b70 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x37a>
 80064da:	2303      	movs	r3, #3
 80064dc:	e092      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80064de:	4b4b      	ldr	r3, [pc, #300]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0ee      	beq.n	80064c8 <HAL_RCC_OscConfig+0x364>
 80064ea:	e014      	b.n	8006516 <HAL_RCC_OscConfig+0x3b2>
 80064ec:	f7fe fb40 	bl	8004b70 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]
 80064f2:	e00a      	b.n	800650a <HAL_RCC_OscConfig+0x3a6>
 80064f4:	f7fe fb3c 	bl	8004b70 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x3a6>
 8006506:	2303      	movs	r3, #3
 8006508:	e07c      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 800650a:	4b40      	ldr	r3, [pc, #256]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1ee      	bne.n	80064f4 <HAL_RCC_OscConfig+0x390>
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <HAL_RCC_OscConfig+0x3c4>
 800651c:	4b3b      	ldr	r3, [pc, #236]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	4a3a      	ldr	r2, [pc, #232]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006526:	6413      	str	r3, [r2, #64]	@ 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d068      	beq.n	8006602 <HAL_RCC_OscConfig+0x49e>
 8006530:	4b36      	ldr	r3, [pc, #216]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b08      	cmp	r3, #8
 800653a:	d060      	beq.n	80065fe <HAL_RCC_OscConfig+0x49a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d145      	bne.n	80065d0 <HAL_RCC_OscConfig+0x46c>
 8006544:	4b33      	ldr	r3, [pc, #204]	@ (8006614 <HAL_RCC_OscConfig+0x4b0>)
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f7fe fb11 	bl	8004b70 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x400>
 8006552:	f7fe fb0d 	bl	8004b70 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x400>
 8006560:	2303      	movs	r3, #3
 8006562:	e04f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 8006564:	4b29      	ldr	r3, [pc, #164]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f0      	bne.n	8006552 <HAL_RCC_OscConfig+0x3ee>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	019b      	lsls	r3, r3, #6
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	3b01      	subs	r3, #1
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	071b      	lsls	r3, r3, #28
 800659c:	491b      	ldr	r1, [pc, #108]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	604b      	str	r3, [r1, #4]
 80065a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006614 <HAL_RCC_OscConfig+0x4b0>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	f7fe fae2 	bl	8004b70 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x45e>
 80065b0:	f7fe fade 	bl	8004b70 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x45e>
 80065be:	2303      	movs	r3, #3
 80065c0:	e020      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x44c>
 80065ce:	e018      	b.n	8006602 <HAL_RCC_OscConfig+0x49e>
 80065d0:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <HAL_RCC_OscConfig+0x4b0>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f7fe facb 	bl	8004b70 <HAL_GetTick>
 80065da:	6138      	str	r0, [r7, #16]
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x48c>
 80065de:	f7fe fac7 	bl	8004b70 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x48c>
 80065ec:	2303      	movs	r3, #3
 80065ee:	e009      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80065f0:	4b06      	ldr	r3, [pc, #24]	@ (800660c <HAL_RCC_OscConfig+0x4a8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f0      	bne.n	80065de <HAL_RCC_OscConfig+0x47a>
 80065fc:	e001      	b.n	8006602 <HAL_RCC_OscConfig+0x49e>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 8006602:	2300      	movs	r3, #0
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40023800 	.word	0x40023800
 8006610:	40007000 	.word	0x40007000
 8006614:	42470060 	.word	0x42470060

08006618 <HAL_SPI_Init>:
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_SPI_Init+0x12>
 8006626:	2301      	movs	r3, #1
 8006628:	e056      	b.n	80066d8 <HAL_SPI_Init+0xc0>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <HAL_SPI_Init+0x32>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fb fd31 	bl	80020ac <HAL_SPI_MspInit>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	ea42 0103 	orr.w	r1, r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	f003 0104 	and.w	r1, r3, #4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066c6:	61da      	str	r2, [r3, #28]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80066d6:	2300      	movs	r3, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_TIM_Base_Init>:
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_Base_Init+0x12>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e01d      	b.n	800672e <HAL_TIM_Base_Init+0x4e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_TIM_Base_Init+0x2c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fc f84e 	bl	80027a8 <HAL_TIM_Base_MspInit>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f000 fad0 	bl	8006cc4 <TIM_Base_SetConfig>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800672c:	2300      	movs	r3, #0
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_TIM_PWM_Init>:
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_TIM_PWM_Init+0x12>
 8006744:	2301      	movs	r3, #1
 8006746:	e01d      	b.n	8006784 <HAL_TIM_PWM_Init+0x4e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <HAL_TIM_PWM_Init+0x2c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f815 	bl	800678c <HAL_TIM_PWM_MspInit>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f000 faa5 	bl	8006cc4 <TIM_Base_SetConfig>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006782:	2300      	movs	r3, #0
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_PWM_MspInit>:
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIM_PWM_Start>:
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2201      	movs	r2, #1
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fd70 	bl	8007298 <TIM_CCxChannelCmd>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <HAL_TIM_PWM_Start+0x74>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d004      	beq.n	80067cc <HAL_TIM_PWM_Start+0x2c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a14      	ldr	r2, [pc, #80]	@ (8006818 <HAL_TIM_PWM_Start+0x78>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d101      	bne.n	80067d0 <HAL_TIM_PWM_Start+0x30>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <HAL_TIM_PWM_Start+0x32>
 80067d0:	2300      	movs	r3, #0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x46>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d007      	beq.n	8006808 <HAL_TIM_PWM_Start+0x68>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400

0800681c <HAL_TIM_Encoder_Init>:
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_TIM_Encoder_Init+0x14>
 800682c:	2301      	movs	r3, #1
 800682e:	e083      	b.n	8006938 <HAL_TIM_Encoder_Init+0x11c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <HAL_TIM_Encoder_Init+0x2e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fc f8d7 	bl	80029f8 <HAL_TIM_Encoder_MspInit>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	6093      	str	r3, [r2, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f000 fa27 	bl	8006cc4 <TIM_Base_SetConfig>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	4313      	orrs	r3, r2
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80068bc:	f023 030c 	bic.w	r3, r3, #12
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	4313      	orrs	r3, r2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	011a      	lsls	r2, r3, #4
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	031b      	lsls	r3, r3, #12
 80068ec:	4313      	orrs	r3, r2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4313      	orrs	r3, r2
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	609a      	str	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	619a      	str	r2, [r3, #24]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006936:	2300      	movs	r3, #0
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_Encoder_Start>:
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_TIM_Encoder_Start+0x18>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b04      	cmp	r3, #4
 8006954:	d008      	beq.n	8006968 <HAL_TIM_Encoder_Start+0x28>
 8006956:	e00f      	b.n	8006978 <HAL_TIM_Encoder_Start+0x38>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2201      	movs	r2, #1
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fc99 	bl	8007298 <TIM_CCxChannelCmd>
 8006966:	e016      	b.n	8006996 <HAL_TIM_Encoder_Start+0x56>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2201      	movs	r2, #1
 800696e:	2104      	movs	r1, #4
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fc91 	bl	8007298 <TIM_CCxChannelCmd>
 8006976:	e00e      	b.n	8006996 <HAL_TIM_Encoder_Start+0x56>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2201      	movs	r2, #1
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fc89 	bl	8007298 <TIM_CCxChannelCmd>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2201      	movs	r2, #1
 800698c:	2104      	movs	r1, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fc82 	bl	8007298 <TIM_CCxChannelCmd>
 8006994:	bf00      	nop
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	2300      	movs	r3, #0
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_PWM_ConfigChannel>:
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e0b4      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x184>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	f200 809f 	bhi.w	8006b20 <HAL_TIM_PWM_ConfigChannel+0x170>
 80069e2:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006b21 	.word	0x08006b21
 80069f0:	08006b21 	.word	0x08006b21
 80069f4:	08006b21 	.word	0x08006b21
 80069f8:	08006a5d 	.word	0x08006a5d
 80069fc:	08006b21 	.word	0x08006b21
 8006a00:	08006b21 	.word	0x08006b21
 8006a04:	08006b21 	.word	0x08006b21
 8006a08:	08006a9f 	.word	0x08006a9f
 8006a0c:	08006b21 	.word	0x08006b21
 8006a10:	08006b21 	.word	0x08006b21
 8006a14:	08006b21 	.word	0x08006b21
 8006a18:	08006adf 	.word	0x08006adf
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f9ee 	bl	8006e04 <TIM_OC1_SetConfig>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0208 	orr.w	r2, r2, #8
 8006a36:	619a      	str	r2, [r3, #24]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0204 	bic.w	r2, r2, #4
 8006a46:	619a      	str	r2, [r3, #24]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	619a      	str	r2, [r3, #24]
 8006a5a:	e062      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fa3e 	bl	8006ee4 <TIM_OC2_SetConfig>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a76:	619a      	str	r2, [r3, #24]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a86:	619a      	str	r2, [r3, #24]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6999      	ldr	r1, [r3, #24]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	021a      	lsls	r2, r3, #8
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	619a      	str	r2, [r3, #24]
 8006a9c:	e041      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fa93 	bl	8006fd0 <TIM_OC3_SetConfig>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0208 	orr.w	r2, r2, #8
 8006ab8:	61da      	str	r2, [r3, #28]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0204 	bic.w	r2, r2, #4
 8006ac8:	61da      	str	r2, [r3, #28]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	61da      	str	r2, [r3, #28]
 8006adc:	e021      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fae7 	bl	80070b8 <TIM_OC4_SetConfig>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006af8:	61da      	str	r2, [r3, #28]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69da      	ldr	r2, [r3, #28]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b08:	61da      	str	r2, [r3, #28]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69d9      	ldr	r1, [r3, #28]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	021a      	lsls	r2, r3, #8
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	61da      	str	r2, [r3, #28]
 8006b1e:	e000      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006b20:	bf00      	nop
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006b32:	2300      	movs	r3, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_TIM_ConfigClockSource>:
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIM_ConfigClockSource+0x18>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e0b3      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x180>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	609a      	str	r2, [r3, #8]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b8c:	d03e      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0xd0>
 8006b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b92:	f200 8087 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b9a:	f000 8085 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba2:	d87f      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006ba4:	2b70      	cmp	r3, #112	@ 0x70
 8006ba6:	d01a      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0xa2>
 8006ba8:	2b70      	cmp	r3, #112	@ 0x70
 8006baa:	d87b      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bac:	2b60      	cmp	r3, #96	@ 0x60
 8006bae:	d050      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x116>
 8006bb0:	2b60      	cmp	r3, #96	@ 0x60
 8006bb2:	d877      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bb4:	2b50      	cmp	r3, #80	@ 0x50
 8006bb6:	d03c      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0xf6>
 8006bb8:	2b50      	cmp	r3, #80	@ 0x50
 8006bba:	d873      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bbc:	2b40      	cmp	r3, #64	@ 0x40
 8006bbe:	d058      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0x136>
 8006bc0:	2b40      	cmp	r3, #64	@ 0x40
 8006bc2:	d86f      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bc4:	2b30      	cmp	r3, #48	@ 0x30
 8006bc6:	d064      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x156>
 8006bc8:	2b30      	cmp	r3, #48	@ 0x30
 8006bca:	d86b      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d060      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x156>
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d867      	bhi.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d05c      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x156>
 8006bd8:	2b10      	cmp	r3, #16
 8006bda:	d05a      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x156>
 8006bdc:	e062      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x168>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6899      	ldr	r1, [r3, #8]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f000 fb33 	bl	8007258 <TIM_ETR_SetConfig>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	609a      	str	r2, [r3, #8]
 8006c0a:	e04e      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6899      	ldr	r1, [r3, #8]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f000 fb1c 	bl	8007258 <TIM_ETR_SetConfig>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	e03b      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	6859      	ldr	r1, [r3, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f000 fa90 	bl	8007164 <TIM_TI1_ConfigInputStage>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2150      	movs	r1, #80	@ 0x50
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fae9 	bl	8007222 <TIM_ITRx_SetConfig>
 8006c50:	e02b      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6859      	ldr	r1, [r3, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f000 faaf 	bl	80071c2 <TIM_TI2_ConfigInputStage>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2160      	movs	r1, #96	@ 0x60
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fad9 	bl	8007222 <TIM_ITRx_SetConfig>
 8006c70:	e01b      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6859      	ldr	r1, [r3, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f000 fa70 	bl	8007164 <TIM_TI1_ConfigInputStage>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2140      	movs	r1, #64	@ 0x40
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fac9 	bl	8007222 <TIM_ITRx_SetConfig>
 8006c90:	e00b      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f000 fac0 	bl	8007222 <TIM_ITRx_SetConfig>
 8006ca2:	e002      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x16e>
 8006ca8:	bf00      	nop
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <TIM_Base_SetConfig>:
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a40      	ldr	r2, [pc, #256]	@ (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce2:	d00f      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8006ddc <TIM_Base_SetConfig+0x118>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00b      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a3c      	ldr	r2, [pc, #240]	@ (8006de0 <TIM_Base_SetConfig+0x11c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3b      	ldr	r2, [pc, #236]	@ (8006de4 <TIM_Base_SetConfig+0x120>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3a      	ldr	r2, [pc, #232]	@ (8006de8 <TIM_Base_SetConfig+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d108      	bne.n	8006d16 <TIM_Base_SetConfig+0x52>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d02b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d24:	d027      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	@ (8006ddc <TIM_Base_SetConfig+0x118>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d023      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2b      	ldr	r2, [pc, #172]	@ (8006de0 <TIM_Base_SetConfig+0x11c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01f      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	@ (8006de4 <TIM_Base_SetConfig+0x120>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a29      	ldr	r2, [pc, #164]	@ (8006de8 <TIM_Base_SetConfig+0x124>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d017      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a28      	ldr	r2, [pc, #160]	@ (8006dec <TIM_Base_SetConfig+0x128>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a27      	ldr	r2, [pc, #156]	@ (8006df0 <TIM_Base_SetConfig+0x12c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a26      	ldr	r2, [pc, #152]	@ (8006df4 <TIM_Base_SetConfig+0x130>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a25      	ldr	r2, [pc, #148]	@ (8006df8 <TIM_Base_SetConfig+0x134>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a24      	ldr	r2, [pc, #144]	@ (8006dfc <TIM_Base_SetConfig+0x138>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a23      	ldr	r2, [pc, #140]	@ (8006e00 <TIM_Base_SetConfig+0x13c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <TIM_Base_SetConfig+0xc4>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0xf8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a0c      	ldr	r2, [pc, #48]	@ (8006de8 <TIM_Base_SetConfig+0x124>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <TIM_Base_SetConfig+0x100>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40001c00 	.word	0x40001c00
 8006e00:	40002000 	.word	0x40002000

08006e04 <TIM_OC1_SetConfig>:
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f023 0302 	bic.w	r3, r3, #2
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a20      	ldr	r2, [pc, #128]	@ (8006edc <TIM_OC1_SetConfig+0xd8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC1_SetConfig+0x64>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee0 <TIM_OC1_SetConfig+0xdc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10c      	bne.n	8006e82 <TIM_OC1_SetConfig+0x7e>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0308 	bic.w	r3, r3, #8
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 0304 	bic.w	r3, r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <TIM_OC1_SetConfig+0xd8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC1_SetConfig+0x8e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ee0 <TIM_OC1_SetConfig+0xdc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d111      	bne.n	8006eb6 <TIM_OC1_SetConfig+0xb2>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	619a      	str	r2, [r3, #24]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	621a      	str	r2, [r3, #32]
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <TIM_OC2_SetConfig>:
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0210 	bic.w	r2, r3, #16
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a22      	ldr	r2, [pc, #136]	@ (8006fc8 <TIM_OC2_SetConfig+0xe4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC2_SetConfig+0x68>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a21      	ldr	r2, [pc, #132]	@ (8006fcc <TIM_OC2_SetConfig+0xe8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d10d      	bne.n	8006f68 <TIM_OC2_SetConfig+0x84>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a17      	ldr	r2, [pc, #92]	@ (8006fc8 <TIM_OC2_SetConfig+0xe4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_OC2_SetConfig+0x94>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a16      	ldr	r2, [pc, #88]	@ (8006fcc <TIM_OC2_SetConfig+0xe8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d113      	bne.n	8006fa0 <TIM_OC2_SetConfig+0xbc>
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	619a      	str	r2, [r3, #24]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	621a      	str	r2, [r3, #32]
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <TIM_OC3_SetConfig>:
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a21      	ldr	r2, [pc, #132]	@ (80070b0 <TIM_OC3_SetConfig+0xe0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d003      	beq.n	8007036 <TIM_OC3_SetConfig+0x66>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a20      	ldr	r2, [pc, #128]	@ (80070b4 <TIM_OC3_SetConfig+0xe4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d10d      	bne.n	8007052 <TIM_OC3_SetConfig+0x82>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <TIM_OC3_SetConfig+0xe0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC3_SetConfig+0x92>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a15      	ldr	r2, [pc, #84]	@ (80070b4 <TIM_OC3_SetConfig+0xe4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d113      	bne.n	800708a <TIM_OC3_SetConfig+0xba>
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	61da      	str	r2, [r3, #28]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <TIM_OC4_SetConfig>:
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	031b      	lsls	r3, r3, #12
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a12      	ldr	r2, [pc, #72]	@ (800715c <TIM_OC4_SetConfig+0xa4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_OC4_SetConfig+0x68>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a11      	ldr	r2, [pc, #68]	@ (8007160 <TIM_OC4_SetConfig+0xa8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d109      	bne.n	8007134 <TIM_OC4_SetConfig+0x7c>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	61da      	str	r2, [r3, #28]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	641a      	str	r2, [r3, #64]	@ 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	621a      	str	r2, [r3, #32]
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40010000 	.word	0x40010000
 8007160:	40010400 	.word	0x40010400

08007164 <TIM_TI1_ConfigInputStage>:
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 030a 	bic.w	r3, r3, #10
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	619a      	str	r2, [r3, #24]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	621a      	str	r2, [r3, #32]
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <TIM_TI2_ConfigInputStage>:
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	031b      	lsls	r3, r3, #12
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	619a      	str	r2, [r3, #24]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_ITRx_SetConfig>:
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	f043 0307 	orr.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_ETR_SetConfig>:
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_CCxChannelCmd>:
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2201      	movs	r2, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_TIMEx_MasterConfigSynchronization>:
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e05a      	b.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a21      	ldr	r2, [pc, #132]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d022      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007348:	d01d      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1d      	ldr	r2, [pc, #116]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d018      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1b      	ldr	r2, [pc, #108]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1a      	ldr	r2, [pc, #104]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00e      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d009      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a17      	ldr	r2, [pc, #92]	@ (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d10c      	bne.n	80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	609a      	str	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80073b0:	2300      	movs	r3, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40010000 	.word	0x40010000
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800
 80073cc:	40000c00 	.word	0x40000c00
 80073d0:	40010400 	.word	0x40010400
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40001800 	.word	0x40001800

080073dc <HAL_TIMEx_ConfigBreakDeadTime>:
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e03d      	b.n	8007474 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	645a      	str	r2, [r3, #68]	@ 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007472:	2300      	movs	r3, #0
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UART_Init>:
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_UART_Init+0x12>
 800748e:	2301      	movs	r3, #1
 8007490:	e03f      	b.n	8007512 <HAL_UART_Init+0x92>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_UART_Init+0x2c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb fc02 	bl	8002cb0 <HAL_UART_MspInit>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	@ 0x24
 80074b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074c2:	60da      	str	r2, [r3, #12]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fdb7 	bl	8008038 <UART_SetConfig>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074d8:	611a      	str	r2, [r3, #16]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074e8:	615a      	str	r2, [r3, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007510:	2300      	movs	r3, #0
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_UART_Transmit>:
 800751a:	b580      	push	{r7, lr}
 800751c:	b088      	sub	sp, #32
 800751e:	af02      	add	r7, sp, #8
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	603b      	str	r3, [r7, #0]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b20      	cmp	r3, #32
 8007538:	f040 8083 	bne.w	8007642 <HAL_UART_Transmit+0x128>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_UART_Transmit+0x2e>
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_UART_Transmit+0x32>
 8007548:	2301      	movs	r3, #1
 800754a:	e07b      	b.n	8007644 <HAL_UART_Transmit+0x12a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_UART_Transmit+0x40>
 8007556:	2302      	movs	r3, #2
 8007558:	e074      	b.n	8007644 <HAL_UART_Transmit+0x12a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2221      	movs	r2, #33	@ 0x21
 800756c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007570:	f7fd fafe 	bl	8004b70 <HAL_GetTick>
 8007574:	6178      	str	r0, [r7, #20]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	84da      	strh	r2, [r3, #38]	@ 0x26
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800758a:	e042      	b.n	8007612 <HAL_UART_Transmit+0xf8>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	84da      	strh	r2, [r3, #38]	@ 0x26
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a2:	d122      	bne.n	80075ea <HAL_UART_Transmit+0xd0>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2200      	movs	r2, #0
 80075ac:	2180      	movs	r1, #128	@ 0x80
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fbc1 	bl	8007d36 <UART_WaitOnFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_UART_Transmit+0xa4>
 80075ba:	2303      	movs	r3, #3
 80075bc:	e042      	b.n	8007644 <HAL_UART_Transmit+0x12a>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <HAL_UART_Transmit+0xc8>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3302      	adds	r3, #2
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	e017      	b.n	8007612 <HAL_UART_Transmit+0xf8>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	e013      	b.n	8007612 <HAL_UART_Transmit+0xf8>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2180      	movs	r1, #128	@ 0x80
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fb9e 	bl	8007d36 <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_UART_Transmit+0xea>
 8007600:	2303      	movs	r3, #3
 8007602:	e01f      	b.n	8007644 <HAL_UART_Transmit+0x12a>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	60ba      	str	r2, [r7, #8]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1b7      	bne.n	800758c <HAL_UART_Transmit+0x72>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2200      	movs	r2, #0
 8007624:	2140      	movs	r1, #64	@ 0x40
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fb85 	bl	8007d36 <UART_WaitOnFlagUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_UART_Transmit+0x11c>
 8007632:	2303      	movs	r3, #3
 8007634:	e006      	b.n	8007644 <HAL_UART_Transmit+0x12a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <HAL_UART_Transmit+0x12a>
 8007642:	2302      	movs	r3, #2
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_Receive_IT>:
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b20      	cmp	r3, #32
 8007664:	d140      	bne.n	80076e8 <HAL_UART_Receive_IT+0x9c>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_UART_Receive_IT+0x26>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_UART_Receive_IT+0x2a>
 8007672:	2301      	movs	r3, #1
 8007674:	e039      	b.n	80076ea <HAL_UART_Receive_IT+0x9e>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_UART_Receive_IT+0x38>
 8007680:	2302      	movs	r3, #2
 8007682:	e032      	b.n	80076ea <HAL_UART_Receive_IT+0x9e>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	629a      	str	r2, [r3, #40]	@ 0x28
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	88fa      	ldrh	r2, [r7, #6]
 800769c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2222      	movs	r2, #34	@ 0x22
 80076a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695a      	ldr	r2, [r3, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	615a      	str	r2, [r3, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0220 	orr.w	r2, r2, #32
 80076e2:	60da      	str	r2, [r3, #12]
 80076e4:	2300      	movs	r3, #0
 80076e6:	e000      	b.n	80076ea <HAL_UART_Receive_IT+0x9e>
 80076e8:	2302      	movs	r3, #2
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <HAL_UART_Transmit_DMA>:
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b20      	cmp	r3, #32
 8007710:	d153      	bne.n	80077ba <HAL_UART_Transmit_DMA+0xc2>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_UART_Transmit_DMA+0x26>
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Transmit_DMA+0x2a>
 800771e:	2301      	movs	r3, #1
 8007720:	e04c      	b.n	80077bc <HAL_UART_Transmit_DMA+0xc4>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <HAL_UART_Transmit_DMA+0x38>
 800772c:	2302      	movs	r3, #2
 800772e:	e045      	b.n	80077bc <HAL_UART_Transmit_DMA+0xc4>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	849a      	strh	r2, [r3, #36]	@ 0x24
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	84da      	strh	r2, [r3, #38]	@ 0x26
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2221      	movs	r2, #33	@ 0x21
 8007754:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775c:	4a19      	ldr	r2, [pc, #100]	@ (80077c4 <HAL_UART_Transmit_DMA+0xcc>)
 800775e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007764:	4a18      	ldr	r2, [pc, #96]	@ (80077c8 <HAL_UART_Transmit_DMA+0xd0>)
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776c:	4a17      	ldr	r2, [pc, #92]	@ (80077cc <HAL_UART_Transmit_DMA+0xd4>)
 800776e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007774:	2200      	movs	r2, #0
 8007776:	651a      	str	r2, [r3, #80]	@ 0x50
 8007778:	f107 0308 	add.w	r3, r7, #8
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	6819      	ldr	r1, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3304      	adds	r3, #4
 800778c:	461a      	mov	r2, r3
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	f7fd fbde 	bl	8004f50 <HAL_DMA_Start_IT>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695a      	ldr	r2, [r3, #20]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077b4:	615a      	str	r2, [r3, #20]
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_UART_Transmit_DMA+0xc4>
 80077ba:	2302      	movs	r3, #2
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	08007bb1 	.word	0x08007bb1
 80077c8:	08007c03 	.word	0x08007c03
 80077cc:	08007ca3 	.word	0x08007ca3

080077d0 <HAL_UART_Receive_DMA>:
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d166      	bne.n	80078b8 <HAL_UART_Receive_DMA+0xe8>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <HAL_UART_Receive_DMA+0x26>
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Receive_DMA+0x2a>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e05f      	b.n	80078ba <HAL_UART_Receive_DMA+0xea>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_UART_Receive_DMA+0x38>
 8007804:	2302      	movs	r3, #2
 8007806:	e058      	b.n	80078ba <HAL_UART_Receive_DMA+0xea>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	629a      	str	r2, [r3, #40]	@ 0x28
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	88fa      	ldrh	r2, [r7, #6]
 800781a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2222      	movs	r2, #34	@ 0x22
 8007826:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782e:	4a25      	ldr	r2, [pc, #148]	@ (80078c4 <HAL_UART_Receive_DMA+0xf4>)
 8007830:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007836:	4a24      	ldr	r2, [pc, #144]	@ (80078c8 <HAL_UART_Receive_DMA+0xf8>)
 8007838:	641a      	str	r2, [r3, #64]	@ 0x40
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783e:	4a23      	ldr	r2, [pc, #140]	@ (80078cc <HAL_UART_Receive_DMA+0xfc>)
 8007840:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007846:	2200      	movs	r2, #0
 8007848:	651a      	str	r2, [r3, #80]	@ 0x50
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3304      	adds	r3, #4
 800785a:	4619      	mov	r1, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	f7fd fb75 	bl	8004f50 <HAL_DMA_Start_IT>
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695a      	ldr	r2, [r3, #20]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0201 	orr.w	r2, r2, #1
 80078a2:	615a      	str	r2, [r3, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695a      	ldr	r2, [r3, #20]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078b2:	615a      	str	r2, [r3, #20]
 80078b4:	2300      	movs	r3, #0
 80078b6:	e000      	b.n	80078ba <HAL_UART_Receive_DMA+0xea>
 80078b8:	2302      	movs	r3, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	08007c1f 	.word	0x08007c1f
 80078c8:	08007c87 	.word	0x08007c87
 80078cc:	08007ca3 	.word	0x08007ca3

080078d0 <HAL_UART_DMAStop>:
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e6:	2b80      	cmp	r3, #128	@ 0x80
 80078e8:	bf0c      	ite	eq
 80078ea:	2301      	moveq	r3, #1
 80078ec:	2300      	movne	r3, #0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b21      	cmp	r3, #33	@ 0x21
 80078fc:	d116      	bne.n	800792c <HAL_UART_DMAStop+0x5c>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d013      	beq.n	800792c <HAL_UART_DMAStop+0x5c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695a      	ldr	r2, [r3, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007912:	615a      	str	r2, [r3, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <HAL_UART_DMAStop+0x56>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fb6d 	bl	8005000 <HAL_DMA_Abort>
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa4f 	bl	8007dca <UART_EndTxTransfer>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007936:	2b40      	cmp	r3, #64	@ 0x40
 8007938:	bf0c      	ite	eq
 800793a:	2301      	moveq	r3, #1
 800793c:	2300      	movne	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b22      	cmp	r3, #34	@ 0x22
 800794c:	d116      	bne.n	800797c <HAL_UART_DMAStop+0xac>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d013      	beq.n	800797c <HAL_UART_DMAStop+0xac>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007962:	615a      	str	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <HAL_UART_DMAStop+0xa6>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007970:	4618      	mov	r0, r3
 8007972:	f7fd fb45 	bl	8005000 <HAL_DMA_Abort>
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa3d 	bl	8007df6 <UART_EndRxTransfer>
 800797c:	2300      	movs	r3, #0
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <HAL_UART_IRQHandler>:
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	613b      	str	r3, [r7, #16]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <HAL_UART_IRQHandler+0x52>
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <HAL_UART_IRQHandler+0x52>
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_UART_IRQHandler+0x52>
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 faaf 	bl	8007f36 <UART_Receive_IT>
 80079d8:	e0d0      	b.n	8007b7c <HAL_UART_IRQHandler+0x1f4>
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80b0 	beq.w	8007b42 <HAL_UART_IRQHandler+0x1ba>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d105      	bne.n	80079f8 <HAL_UART_IRQHandler+0x70>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 80a5 	beq.w	8007b42 <HAL_UART_IRQHandler+0x1ba>
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <HAL_UART_IRQHandler+0x90>
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <HAL_UART_IRQHandler+0x90>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a10:	f043 0201 	orr.w	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_UART_IRQHandler+0xb0>
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <HAL_UART_IRQHandler+0xb0>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	f043 0202 	orr.w	r2, r3, #2
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <HAL_UART_IRQHandler+0xd0>
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <HAL_UART_IRQHandler+0xd0>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a50:	f043 0204 	orr.w	r2, r3, #4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00f      	beq.n	8007a82 <HAL_UART_IRQHandler+0xfa>
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <HAL_UART_IRQHandler+0xee>
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_UART_IRQHandler+0xfa>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7a:	f043 0208 	orr.w	r2, r3, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d077      	beq.n	8007b7a <HAL_UART_IRQHandler+0x1f2>
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x11c>
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x11c>
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa49 	bl	8007f36 <UART_Receive_IT>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b40      	cmp	r3, #64	@ 0x40
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d102      	bne.n	8007acc <HAL_UART_IRQHandler+0x144>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d031      	beq.n	8007b30 <HAL_UART_IRQHandler+0x1a8>
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f992 	bl	8007df6 <UART_EndRxTransfer>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007adc:	2b40      	cmp	r3, #64	@ 0x40
 8007ade:	d123      	bne.n	8007b28 <HAL_UART_IRQHandler+0x1a0>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aee:	615a      	str	r2, [r3, #20]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d013      	beq.n	8007b20 <HAL_UART_IRQHandler+0x198>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afc:	4a21      	ldr	r2, [pc, #132]	@ (8007b84 <HAL_UART_IRQHandler+0x1fc>)
 8007afe:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fd faeb 	bl	80050e0 <HAL_DMA_Abort_IT>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d016      	beq.n	8007b3e <HAL_UART_IRQHandler+0x1b6>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4798      	blx	r3
 8007b1e:	e00e      	b.n	8007b3e <HAL_UART_IRQHandler+0x1b6>
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7f9 ff79 	bl	8001a18 <HAL_UART_ErrorCallback>
 8007b26:	e00a      	b.n	8007b3e <HAL_UART_IRQHandler+0x1b6>
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7f9 ff75 	bl	8001a18 <HAL_UART_ErrorCallback>
 8007b2e:	e006      	b.n	8007b3e <HAL_UART_IRQHandler+0x1b6>
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7f9 ff71 	bl	8001a18 <HAL_UART_ErrorCallback>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b3c:	e01d      	b.n	8007b7a <HAL_UART_IRQHandler+0x1f2>
 8007b3e:	bf00      	nop
 8007b40:	e01b      	b.n	8007b7a <HAL_UART_IRQHandler+0x1f2>
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_UART_IRQHandler+0x1d6>
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_UART_IRQHandler+0x1d6>
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f97f 	bl	8007e5a <UART_Transmit_IT>
 8007b5c:	e00e      	b.n	8007b7c <HAL_UART_IRQHandler+0x1f4>
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HAL_UART_IRQHandler+0x1f4>
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <HAL_UART_IRQHandler+0x1f4>
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f9c7 	bl	8007f06 <UART_EndTransmit_IT>
 8007b78:	e000      	b.n	8007b7c <HAL_UART_IRQHandler+0x1f4>
 8007b7a:	bf00      	nop
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	08007e33 	.word	0x08007e33

08007b88 <HAL_UART_TxHalfCpltCallback>:
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UART_RxHalfCpltCallback>:
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <UART_DMATransmitCplt>:
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d113      	bne.n	8007bf4 <UART_DMATransmitCplt+0x44>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	84da      	strh	r2, [r3, #38]	@ 0x26
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695a      	ldr	r2, [r3, #20]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007be0:	615a      	str	r2, [r3, #20]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bf0:	60da      	str	r2, [r3, #12]
 8007bf2:	e002      	b.n	8007bfa <UART_DMATransmitCplt+0x4a>
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7fa fb55 	bl	80022a4 <HAL_UART_TxCpltCallback>
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <UART_DMATxHalfCplt>:
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff ffb9 	bl	8007b88 <HAL_UART_TxHalfCpltCallback>
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_DMAReceiveCplt>:
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d11e      	bne.n	8007c78 <UART_DMAReceiveCplt+0x5a>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c4e:	60da      	str	r2, [r3, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695a      	ldr	r2, [r3, #20]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0201 	bic.w	r2, r2, #1
 8007c5e:	615a      	str	r2, [r3, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c6e:	615a      	str	r2, [r3, #20]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7f9 fd7b 	bl	8001774 <HAL_UART_RxCpltCallback>
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_DMARxHalfCplt>:
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff81 	bl	8007b9c <HAL_UART_RxHalfCpltCallback>
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <UART_DMAError>:
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb2:	60bb      	str	r3, [r7, #8]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cbe:	2b80      	cmp	r3, #128	@ 0x80
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b21      	cmp	r3, #33	@ 0x21
 8007cd4:	d108      	bne.n	8007ce8 <UART_DMAError+0x46>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <UART_DMAError+0x46>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	84da      	strh	r2, [r3, #38]	@ 0x26
 8007ce2:	68b8      	ldr	r0, [r7, #8]
 8007ce4:	f000 f871 	bl	8007dca <UART_EndTxTransfer>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf2:	2b40      	cmp	r3, #64	@ 0x40
 8007cf4:	bf0c      	ite	eq
 8007cf6:	2301      	moveq	r3, #1
 8007cf8:	2300      	movne	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b22      	cmp	r3, #34	@ 0x22
 8007d08:	d108      	bne.n	8007d1c <UART_DMAError+0x7a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <UART_DMAError+0x7a>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8007d16:	68b8      	ldr	r0, [r7, #8]
 8007d18:	f000 f86d 	bl	8007df6 <UART_EndRxTransfer>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d20:	f043 0210 	orr.w	r2, r3, #16
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007d28:	68b8      	ldr	r0, [r7, #8]
 8007d2a:	f7f9 fe75 	bl	8001a18 <HAL_UART_ErrorCallback>
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <UART_WaitOnFlagUntilTimeout>:
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	4613      	mov	r3, r2
 8007d44:	71fb      	strb	r3, [r7, #7]
 8007d46:	e02c      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d028      	beq.n	8007da2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d56:	f7fc ff0b 	bl	8004b70 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d21d      	bcs.n	8007da2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8007d74:	60da      	str	r2, [r3, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0201 	bic.w	r2, r2, #1
 8007d84:	615a      	str	r2, [r3, #20]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e00f      	b.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x8c>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4013      	ands	r3, r2
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	bf0c      	ite	eq
 8007db2:	2301      	moveq	r3, #1
 8007db4:	2300      	movne	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d0c3      	beq.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x12>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <UART_EndTxTransfer>:
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007de0:	60da      	str	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <UART_EndRxTransfer>:
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8007e0c:	60da      	str	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0201 	bic.w	r2, r2, #1
 8007e1c:	615a      	str	r2, [r3, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <UART_DMAAbortOnError>:
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	84da      	strh	r2, [r3, #38]	@ 0x26
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7f9 fde3 	bl	8001a18 <HAL_UART_ErrorCallback>
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <UART_Transmit_IT>:
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b21      	cmp	r3, #33	@ 0x21
 8007e6c:	d144      	bne.n	8007ef8 <UART_Transmit_IT+0x9e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e76:	d11a      	bne.n	8007eae <UART_Transmit_IT+0x54>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d105      	bne.n	8007ea2 <UART_Transmit_IT+0x48>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	1c9a      	adds	r2, r3, #2
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]
 8007ea0:	e00e      	b.n	8007ec0 <UART_Transmit_IT+0x66>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	621a      	str	r2, [r3, #32]
 8007eac:	e008      	b.n	8007ec0 <UART_Transmit_IT+0x66>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	1c59      	adds	r1, r3, #1
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6211      	str	r1, [r2, #32]
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	605a      	str	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10f      	bne.n	8007ef4 <UART_Transmit_IT+0x9a>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ee2:	60da      	str	r2, [r3, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef2:	60da      	str	r2, [r3, #12]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e000      	b.n	8007efa <UART_Transmit_IT+0xa0>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <UART_EndTransmit_IT>:
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7fa f9bc 	bl	80022a4 <HAL_UART_TxCpltCallback>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <UART_Receive_IT>:
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b22      	cmp	r3, #34	@ 0x22
 8007f48:	d171      	bne.n	800802e <UART_Receive_IT+0xf8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f52:	d123      	bne.n	8007f9c <UART_Receive_IT+0x66>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10e      	bne.n	8007f80 <UART_Receive_IT+0x4a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f78:	1c9a      	adds	r2, r3, #2
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f7e:	e029      	b.n	8007fd4 <UART_Receive_IT+0x9e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f9a:	e01b      	b.n	8007fd4 <UART_Receive_IT+0x9e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <UART_Receive_IT+0x84>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6858      	ldr	r0, [r3, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	1c59      	adds	r1, r3, #1
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6291      	str	r1, [r2, #40]	@ 0x28
 8007fb4:	b2c2      	uxtb	r2, r0
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e00c      	b.n	8007fd4 <UART_Receive_IT+0x9e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	1c58      	adds	r0, r3, #1
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	6288      	str	r0, [r1, #40]	@ 0x28
 8007fcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	701a      	strb	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d120      	bne.n	800802a <UART_Receive_IT+0xf4>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0220 	bic.w	r2, r2, #32
 8007ff6:	60da      	str	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008006:	60da      	str	r2, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	615a      	str	r2, [r3, #20]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7f9 fba7 	bl	8001774 <HAL_UART_RxCpltCallback>
 8008026:	2300      	movs	r3, #0
 8008028:	e002      	b.n	8008030 <UART_Receive_IT+0xfa>
 800802a:	2300      	movs	r3, #0
 800802c:	e000      	b.n	8008030 <UART_Receive_IT+0xfa>
 800802e:	2302      	movs	r3, #2
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <UART_SetConfig>:
 8008038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800803c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8008040:	af00      	add	r7, sp, #0
 8008042:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
 8008046:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008052:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008056:	68d9      	ldr	r1, [r3, #12]
 8008058:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	ea40 0301 	orr.w	r3, r0, r1
 8008062:	6113      	str	r3, [r2, #16]
 8008064:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	431a      	orrs	r2, r3
 8008072:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	431a      	orrs	r2, r3
 800807a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	4313      	orrs	r3, r2
 8008082:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8008086:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008092:	f021 010c 	bic.w	r1, r1, #12
 8008096:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80080a0:	430b      	orrs	r3, r1
 80080a2:	60d3      	str	r3, [r2, #12]
 80080a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80080b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080b4:	6999      	ldr	r1, [r3, #24]
 80080b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	ea40 0301 	orr.w	r3, r0, r1
 80080c0:	6153      	str	r3, [r2, #20]
 80080c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080cc:	f040 824a 	bne.w	8008564 <UART_SetConfig+0x52c>
 80080d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b96      	ldr	r3, [pc, #600]	@ (8008330 <UART_SetConfig+0x2f8>)
 80080d8:	429a      	cmp	r2, r3
 80080da:	d006      	beq.n	80080ea <UART_SetConfig+0xb2>
 80080dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b94      	ldr	r3, [pc, #592]	@ (8008334 <UART_SetConfig+0x2fc>)
 80080e4:	429a      	cmp	r2, r3
 80080e6:	f040 8129 	bne.w	800833c <UART_SetConfig+0x304>
 80080ea:	f7fd fe7d 	bl	8005de8 <HAL_RCC_GetPCLK2Freq>
 80080ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
 80080f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80080fc:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8008100:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8008104:	4622      	mov	r2, r4
 8008106:	462b      	mov	r3, r5
 8008108:	1891      	adds	r1, r2, r2
 800810a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800810e:	415b      	adcs	r3, r3
 8008110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008114:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008118:	4621      	mov	r1, r4
 800811a:	1851      	adds	r1, r2, r1
 800811c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8008120:	4629      	mov	r1, r5
 8008122:	414b      	adcs	r3, r1
 8008124:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8008134:	4649      	mov	r1, r9
 8008136:	00cb      	lsls	r3, r1, #3
 8008138:	4641      	mov	r1, r8
 800813a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800813e:	4641      	mov	r1, r8
 8008140:	00ca      	lsls	r2, r1, #3
 8008142:	4610      	mov	r0, r2
 8008144:	4619      	mov	r1, r3
 8008146:	4603      	mov	r3, r0
 8008148:	4622      	mov	r2, r4
 800814a:	189b      	adds	r3, r3, r2
 800814c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008150:	462b      	mov	r3, r5
 8008152:	460a      	mov	r2, r1
 8008154:	eb42 0303 	adc.w	r3, r2, r3
 8008158:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800815c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8008168:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800816c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8008170:	460b      	mov	r3, r1
 8008172:	18db      	adds	r3, r3, r3
 8008174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008178:	4613      	mov	r3, r2
 800817a:	eb42 0303 	adc.w	r3, r2, r3
 800817e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008182:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8008186:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800818a:	f7f8 fd2d 	bl	8000be8 <__aeabi_uldivmod>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4b69      	ldr	r3, [pc, #420]	@ (8008338 <UART_SetConfig+0x300>)
 8008194:	fba3 2302 	umull	r2, r3, r3, r2
 8008198:	095b      	lsrs	r3, r3, #5
 800819a:	011c      	lsls	r4, r3, #4
 800819c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80081a6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80081aa:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80081ae:	4642      	mov	r2, r8
 80081b0:	464b      	mov	r3, r9
 80081b2:	1891      	adds	r1, r2, r2
 80081b4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80081b8:	415b      	adcs	r3, r3
 80081ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081be:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80081c2:	4641      	mov	r1, r8
 80081c4:	1851      	adds	r1, r2, r1
 80081c6:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80081ca:	4649      	mov	r1, r9
 80081cc:	414b      	adcs	r3, r1
 80081ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80081de:	4659      	mov	r1, fp
 80081e0:	00cb      	lsls	r3, r1, #3
 80081e2:	4651      	mov	r1, sl
 80081e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081e8:	4651      	mov	r1, sl
 80081ea:	00ca      	lsls	r2, r1, #3
 80081ec:	4610      	mov	r0, r2
 80081ee:	4619      	mov	r1, r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	4642      	mov	r2, r8
 80081f4:	189b      	adds	r3, r3, r2
 80081f6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80081fa:	464b      	mov	r3, r9
 80081fc:	460a      	mov	r2, r1
 80081fe:	eb42 0303 	adc.w	r3, r2, r3
 8008202:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8008206:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8008212:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8008216:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800821a:	460b      	mov	r3, r1
 800821c:	18db      	adds	r3, r3, r3
 800821e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008222:	4613      	mov	r3, r2
 8008224:	eb42 0303 	adc.w	r3, r2, r3
 8008228:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800822c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8008230:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8008234:	f7f8 fcd8 	bl	8000be8 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4611      	mov	r1, r2
 800823e:	4b3e      	ldr	r3, [pc, #248]	@ (8008338 <UART_SetConfig+0x300>)
 8008240:	fba3 2301 	umull	r2, r3, r3, r1
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	2264      	movs	r2, #100	@ 0x64
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	1acb      	subs	r3, r1, r3
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008254:	4b38      	ldr	r3, [pc, #224]	@ (8008338 <UART_SetConfig+0x300>)
 8008256:	fba3 2302 	umull	r2, r3, r3, r2
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008262:	441c      	add	r4, r3
 8008264:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008268:	2200      	movs	r2, #0
 800826a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800826e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8008272:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8008276:	4642      	mov	r2, r8
 8008278:	464b      	mov	r3, r9
 800827a:	1891      	adds	r1, r2, r2
 800827c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008280:	415b      	adcs	r3, r3
 8008282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008286:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800828a:	4641      	mov	r1, r8
 800828c:	1851      	adds	r1, r2, r1
 800828e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008292:	4649      	mov	r1, r9
 8008294:	414b      	adcs	r3, r1
 8008296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80082a6:	4659      	mov	r1, fp
 80082a8:	00cb      	lsls	r3, r1, #3
 80082aa:	4651      	mov	r1, sl
 80082ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082b0:	4651      	mov	r1, sl
 80082b2:	00ca      	lsls	r2, r1, #3
 80082b4:	4610      	mov	r0, r2
 80082b6:	4619      	mov	r1, r3
 80082b8:	4603      	mov	r3, r0
 80082ba:	4642      	mov	r2, r8
 80082bc:	189b      	adds	r3, r3, r2
 80082be:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80082c2:	464b      	mov	r3, r9
 80082c4:	460a      	mov	r2, r1
 80082c6:	eb42 0303 	adc.w	r3, r2, r3
 80082ca:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80082ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80082da:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80082de:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80082e2:	460b      	mov	r3, r1
 80082e4:	18db      	adds	r3, r3, r3
 80082e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082ea:	4613      	mov	r3, r2
 80082ec:	eb42 0303 	adc.w	r3, r2, r3
 80082f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80082f8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80082fc:	f7f8 fc74 	bl	8000be8 <__aeabi_uldivmod>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <UART_SetConfig+0x300>)
 8008306:	fba3 1302 	umull	r1, r3, r3, r2
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	2164      	movs	r1, #100	@ 0x64
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	3332      	adds	r3, #50	@ 0x32
 8008318:	4a07      	ldr	r2, [pc, #28]	@ (8008338 <UART_SetConfig+0x300>)
 800831a:	fba2 2303 	umull	r2, r3, r2, r3
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	f003 0207 	and.w	r2, r3, #7
 8008324:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4422      	add	r2, r4
 800832c:	609a      	str	r2, [r3, #8]
 800832e:	e34a      	b.n	80089c6 <UART_SetConfig+0x98e>
 8008330:	40011000 	.word	0x40011000
 8008334:	40011400 	.word	0x40011400
 8008338:	51eb851f 	.word	0x51eb851f
 800833c:	f7fd fd40 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8008340:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
 8008344:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008348:	2200      	movs	r2, #0
 800834a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800834e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8008352:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8008356:	4622      	mov	r2, r4
 8008358:	462b      	mov	r3, r5
 800835a:	1891      	adds	r1, r2, r2
 800835c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8008360:	415b      	adcs	r3, r3
 8008362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008366:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800836a:	4621      	mov	r1, r4
 800836c:	eb12 0a01 	adds.w	sl, r2, r1
 8008370:	4629      	mov	r1, r5
 8008372:	eb43 0b01 	adc.w	fp, r3, r1
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008382:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008386:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800838a:	4692      	mov	sl, r2
 800838c:	469b      	mov	fp, r3
 800838e:	4623      	mov	r3, r4
 8008390:	eb1a 0303 	adds.w	r3, sl, r3
 8008394:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8008398:	462b      	mov	r3, r5
 800839a:	eb4b 0303 	adc.w	r3, fp, r3
 800839e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80083a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80083ae:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80083b2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80083b6:	460b      	mov	r3, r1
 80083b8:	18db      	adds	r3, r3, r3
 80083ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083be:	4613      	mov	r3, r2
 80083c0:	eb42 0303 	adc.w	r3, r2, r3
 80083c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80083cc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80083d0:	f7f8 fc0a 	bl	8000be8 <__aeabi_uldivmod>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4b61      	ldr	r3, [pc, #388]	@ (8008560 <UART_SetConfig+0x528>)
 80083da:	fba3 2302 	umull	r2, r3, r3, r2
 80083de:	095b      	lsrs	r3, r3, #5
 80083e0:	011c      	lsls	r4, r3, #4
 80083e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80083ec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80083f0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80083f4:	4642      	mov	r2, r8
 80083f6:	464b      	mov	r3, r9
 80083f8:	1891      	adds	r1, r2, r2
 80083fa:	67b9      	str	r1, [r7, #120]	@ 0x78
 80083fc:	415b      	adcs	r3, r3
 80083fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008400:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8008404:	4641      	mov	r1, r8
 8008406:	1851      	adds	r1, r2, r1
 8008408:	6739      	str	r1, [r7, #112]	@ 0x70
 800840a:	4649      	mov	r1, r9
 800840c:	414b      	adcs	r3, r1
 800840e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 800841c:	4659      	mov	r1, fp
 800841e:	00cb      	lsls	r3, r1, #3
 8008420:	4651      	mov	r1, sl
 8008422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008426:	4651      	mov	r1, sl
 8008428:	00ca      	lsls	r2, r1, #3
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	4603      	mov	r3, r0
 8008430:	4642      	mov	r2, r8
 8008432:	189b      	adds	r3, r3, r2
 8008434:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8008438:	464b      	mov	r3, r9
 800843a:	460a      	mov	r2, r1
 800843c:	eb42 0303 	adc.w	r3, r2, r3
 8008440:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8008444:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008450:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8008454:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8008458:	460b      	mov	r3, r1
 800845a:	18db      	adds	r3, r3, r3
 800845c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800845e:	4613      	mov	r3, r2
 8008460:	eb42 0303 	adc.w	r3, r2, r3
 8008464:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008466:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800846a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800846e:	f7f8 fbbb 	bl	8000be8 <__aeabi_uldivmod>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4611      	mov	r1, r2
 8008478:	4b39      	ldr	r3, [pc, #228]	@ (8008560 <UART_SetConfig+0x528>)
 800847a:	fba3 2301 	umull	r2, r3, r3, r1
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	2264      	movs	r2, #100	@ 0x64
 8008482:	fb02 f303 	mul.w	r3, r2, r3
 8008486:	1acb      	subs	r3, r1, r3
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800848e:	4b34      	ldr	r3, [pc, #208]	@ (8008560 <UART_SetConfig+0x528>)
 8008490:	fba3 2302 	umull	r2, r3, r3, r2
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800849c:	441c      	add	r4, r3
 800849e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80084a8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80084ac:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80084b0:	4642      	mov	r2, r8
 80084b2:	464b      	mov	r3, r9
 80084b4:	1891      	adds	r1, r2, r2
 80084b6:	6639      	str	r1, [r7, #96]	@ 0x60
 80084b8:	415b      	adcs	r3, r3
 80084ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80084bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80084c0:	4641      	mov	r1, r8
 80084c2:	1851      	adds	r1, r2, r1
 80084c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80084c6:	4649      	mov	r1, r9
 80084c8:	414b      	adcs	r3, r1
 80084ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80084d8:	4659      	mov	r1, fp
 80084da:	00cb      	lsls	r3, r1, #3
 80084dc:	4651      	mov	r1, sl
 80084de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084e2:	4651      	mov	r1, sl
 80084e4:	00ca      	lsls	r2, r1, #3
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	4603      	mov	r3, r0
 80084ec:	4642      	mov	r2, r8
 80084ee:	189b      	adds	r3, r3, r2
 80084f0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80084f4:	464b      	mov	r3, r9
 80084f6:	460a      	mov	r2, r1
 80084f8:	eb42 0303 	adc.w	r3, r2, r3
 80084fc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8008500:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800850c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8008510:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8008514:	460b      	mov	r3, r1
 8008516:	18db      	adds	r3, r3, r3
 8008518:	653b      	str	r3, [r7, #80]	@ 0x50
 800851a:	4613      	mov	r3, r2
 800851c:	eb42 0303 	adc.w	r3, r2, r3
 8008520:	657b      	str	r3, [r7, #84]	@ 0x54
 8008522:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008526:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800852a:	f7f8 fb5d 	bl	8000be8 <__aeabi_uldivmod>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <UART_SetConfig+0x528>)
 8008534:	fba3 1302 	umull	r1, r3, r3, r2
 8008538:	095b      	lsrs	r3, r3, #5
 800853a:	2164      	movs	r1, #100	@ 0x64
 800853c:	fb01 f303 	mul.w	r3, r1, r3
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	3332      	adds	r3, #50	@ 0x32
 8008546:	4a06      	ldr	r2, [pc, #24]	@ (8008560 <UART_SetConfig+0x528>)
 8008548:	fba2 2303 	umull	r2, r3, r2, r3
 800854c:	095b      	lsrs	r3, r3, #5
 800854e:	f003 0207 	and.w	r2, r3, #7
 8008552:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4422      	add	r2, r4
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	e233      	b.n	80089c6 <UART_SetConfig+0x98e>
 800855e:	bf00      	nop
 8008560:	51eb851f 	.word	0x51eb851f
 8008564:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b8d      	ldr	r3, [pc, #564]	@ (80087a0 <UART_SetConfig+0x768>)
 800856c:	429a      	cmp	r2, r3
 800856e:	d006      	beq.n	800857e <UART_SetConfig+0x546>
 8008570:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	4b8b      	ldr	r3, [pc, #556]	@ (80087a4 <UART_SetConfig+0x76c>)
 8008578:	429a      	cmp	r2, r3
 800857a:	f040 8117 	bne.w	80087ac <UART_SetConfig+0x774>
 800857e:	f7fd fc33 	bl	8005de8 <HAL_RCC_GetPCLK2Freq>
 8008582:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
 8008586:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800858a:	2200      	movs	r2, #0
 800858c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8008590:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8008594:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8008598:	4622      	mov	r2, r4
 800859a:	462b      	mov	r3, r5
 800859c:	1891      	adds	r1, r2, r2
 800859e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085a0:	415b      	adcs	r3, r3
 80085a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085a8:	4621      	mov	r1, r4
 80085aa:	eb12 0801 	adds.w	r8, r2, r1
 80085ae:	4629      	mov	r1, r5
 80085b0:	eb43 0901 	adc.w	r9, r3, r1
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085c8:	4690      	mov	r8, r2
 80085ca:	4699      	mov	r9, r3
 80085cc:	4623      	mov	r3, r4
 80085ce:	eb18 0303 	adds.w	r3, r8, r3
 80085d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80085d6:	462b      	mov	r3, r5
 80085d8:	eb49 0303 	adc.w	r3, r9, r3
 80085dc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80085e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80085ec:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 80085fc:	4629      	mov	r1, r5
 80085fe:	008b      	lsls	r3, r1, #2
 8008600:	4621      	mov	r1, r4
 8008602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008606:	4621      	mov	r1, r4
 8008608:	008a      	lsls	r2, r1, #2
 800860a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800860e:	f7f8 faeb 	bl	8000be8 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4b64      	ldr	r3, [pc, #400]	@ (80087a8 <UART_SetConfig+0x770>)
 8008618:	fba3 2302 	umull	r2, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	011c      	lsls	r4, r3, #4
 8008620:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008624:	2200      	movs	r2, #0
 8008626:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800862a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800862e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8008632:	4642      	mov	r2, r8
 8008634:	464b      	mov	r3, r9
 8008636:	1891      	adds	r1, r2, r2
 8008638:	6439      	str	r1, [r7, #64]	@ 0x40
 800863a:	415b      	adcs	r3, r3
 800863c:	647b      	str	r3, [r7, #68]	@ 0x44
 800863e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008642:	4641      	mov	r1, r8
 8008644:	1851      	adds	r1, r2, r1
 8008646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008648:	4649      	mov	r1, r9
 800864a:	414b      	adcs	r3, r1
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 800865a:	4659      	mov	r1, fp
 800865c:	00cb      	lsls	r3, r1, #3
 800865e:	4651      	mov	r1, sl
 8008660:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008664:	4651      	mov	r1, sl
 8008666:	00ca      	lsls	r2, r1, #3
 8008668:	4610      	mov	r0, r2
 800866a:	4619      	mov	r1, r3
 800866c:	4603      	mov	r3, r0
 800866e:	4642      	mov	r2, r8
 8008670:	189b      	adds	r3, r3, r2
 8008672:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008676:	464b      	mov	r3, r9
 8008678:	460a      	mov	r2, r1
 800867a:	eb42 0303 	adc.w	r3, r2, r3
 800867e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8008682:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800868e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8008692:	f04f 0200 	mov.w	r2, #0
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 800869e:	4649      	mov	r1, r9
 80086a0:	008b      	lsls	r3, r1, #2
 80086a2:	4641      	mov	r1, r8
 80086a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086a8:	4641      	mov	r1, r8
 80086aa:	008a      	lsls	r2, r1, #2
 80086ac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80086b0:	f7f8 fa9a 	bl	8000be8 <__aeabi_uldivmod>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	4b3b      	ldr	r3, [pc, #236]	@ (80087a8 <UART_SetConfig+0x770>)
 80086bc:	fba3 2301 	umull	r2, r3, r3, r1
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	2264      	movs	r2, #100	@ 0x64
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
 80086c8:	1acb      	subs	r3, r1, r3
 80086ca:	011b      	lsls	r3, r3, #4
 80086cc:	3332      	adds	r3, #50	@ 0x32
 80086ce:	4a36      	ldr	r2, [pc, #216]	@ (80087a8 <UART_SetConfig+0x770>)
 80086d0:	fba2 2303 	umull	r2, r3, r2, r3
 80086d4:	095b      	lsrs	r3, r3, #5
 80086d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086da:	441c      	add	r4, r3
 80086dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80086e0:	2200      	movs	r2, #0
 80086e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80086e6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80086ea:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80086ee:	4642      	mov	r2, r8
 80086f0:	464b      	mov	r3, r9
 80086f2:	1891      	adds	r1, r2, r2
 80086f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80086f6:	415b      	adcs	r3, r3
 80086f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80086fe:	4641      	mov	r1, r8
 8008700:	1851      	adds	r1, r2, r1
 8008702:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008704:	4649      	mov	r1, r9
 8008706:	414b      	adcs	r3, r1
 8008708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8008716:	4659      	mov	r1, fp
 8008718:	00cb      	lsls	r3, r1, #3
 800871a:	4651      	mov	r1, sl
 800871c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008720:	4651      	mov	r1, sl
 8008722:	00ca      	lsls	r2, r1, #3
 8008724:	4610      	mov	r0, r2
 8008726:	4619      	mov	r1, r3
 8008728:	4603      	mov	r3, r0
 800872a:	4642      	mov	r2, r8
 800872c:	189b      	adds	r3, r3, r2
 800872e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8008732:	464b      	mov	r3, r9
 8008734:	460a      	mov	r2, r1
 8008736:	eb42 0303 	adc.w	r3, r2, r3
 800873a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800873e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800874a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	f04f 0300 	mov.w	r3, #0
 8008756:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 800875a:	4649      	mov	r1, r9
 800875c:	008b      	lsls	r3, r1, #2
 800875e:	4641      	mov	r1, r8
 8008760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008764:	4641      	mov	r1, r8
 8008766:	008a      	lsls	r2, r1, #2
 8008768:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800876c:	f7f8 fa3c 	bl	8000be8 <__aeabi_uldivmod>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4b0c      	ldr	r3, [pc, #48]	@ (80087a8 <UART_SetConfig+0x770>)
 8008776:	fba3 1302 	umull	r1, r3, r3, r2
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	2164      	movs	r1, #100	@ 0x64
 800877e:	fb01 f303 	mul.w	r3, r1, r3
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	3332      	adds	r3, #50	@ 0x32
 8008788:	4a07      	ldr	r2, [pc, #28]	@ (80087a8 <UART_SetConfig+0x770>)
 800878a:	fba2 2303 	umull	r2, r3, r2, r3
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4422      	add	r2, r4
 800879c:	609a      	str	r2, [r3, #8]
 800879e:	e112      	b.n	80089c6 <UART_SetConfig+0x98e>
 80087a0:	40011000 	.word	0x40011000
 80087a4:	40011400 	.word	0x40011400
 80087a8:	51eb851f 	.word	0x51eb851f
 80087ac:	f7fd fb08 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80087b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
 80087b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80087be:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80087c2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80087c6:	4642      	mov	r2, r8
 80087c8:	464b      	mov	r3, r9
 80087ca:	1891      	adds	r1, r2, r2
 80087cc:	6239      	str	r1, [r7, #32]
 80087ce:	415b      	adcs	r3, r3
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087d6:	4641      	mov	r1, r8
 80087d8:	1854      	adds	r4, r2, r1
 80087da:	4649      	mov	r1, r9
 80087dc:	eb43 0501 	adc.w	r5, r3, r1
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	00eb      	lsls	r3, r5, #3
 80087ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087ee:	00e2      	lsls	r2, r4, #3
 80087f0:	4614      	mov	r4, r2
 80087f2:	461d      	mov	r5, r3
 80087f4:	4643      	mov	r3, r8
 80087f6:	18e3      	adds	r3, r4, r3
 80087f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80087fc:	464b      	mov	r3, r9
 80087fe:	eb45 0303 	adc.w	r3, r5, r3
 8008802:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8008806:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008812:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8008816:	f04f 0200 	mov.w	r2, #0
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8008822:	4629      	mov	r1, r5
 8008824:	008b      	lsls	r3, r1, #2
 8008826:	4621      	mov	r1, r4
 8008828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800882c:	4621      	mov	r1, r4
 800882e:	008a      	lsls	r2, r1, #2
 8008830:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8008834:	f7f8 f9d8 	bl	8000be8 <__aeabi_uldivmod>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4b65      	ldr	r3, [pc, #404]	@ (80089d4 <UART_SetConfig+0x99c>)
 800883e:	fba3 2302 	umull	r2, r3, r3, r2
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	011c      	lsls	r4, r3, #4
 8008846:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800884a:	2200      	movs	r2, #0
 800884c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008850:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8008854:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	1891      	adds	r1, r2, r2
 800885e:	61b9      	str	r1, [r7, #24]
 8008860:	415b      	adcs	r3, r3
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008868:	4641      	mov	r1, r8
 800886a:	1851      	adds	r1, r2, r1
 800886c:	6139      	str	r1, [r7, #16]
 800886e:	4649      	mov	r1, r9
 8008870:	414b      	adcs	r3, r1
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008880:	4659      	mov	r1, fp
 8008882:	00cb      	lsls	r3, r1, #3
 8008884:	4651      	mov	r1, sl
 8008886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800888a:	4651      	mov	r1, sl
 800888c:	00ca      	lsls	r2, r1, #3
 800888e:	4610      	mov	r0, r2
 8008890:	4619      	mov	r1, r3
 8008892:	4603      	mov	r3, r0
 8008894:	4642      	mov	r2, r8
 8008896:	189b      	adds	r3, r3, r2
 8008898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800889c:	464b      	mov	r3, r9
 800889e:	460a      	mov	r2, r1
 80088a0:	eb42 0303 	adc.w	r3, r2, r3
 80088a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80088a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088b4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	f04f 0300 	mov.w	r3, #0
 80088c0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80088c4:	4649      	mov	r1, r9
 80088c6:	008b      	lsls	r3, r1, #2
 80088c8:	4641      	mov	r1, r8
 80088ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ce:	4641      	mov	r1, r8
 80088d0:	008a      	lsls	r2, r1, #2
 80088d2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80088d6:	f7f8 f987 	bl	8000be8 <__aeabi_uldivmod>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	4b3c      	ldr	r3, [pc, #240]	@ (80089d4 <UART_SetConfig+0x99c>)
 80088e2:	fba3 2301 	umull	r2, r3, r3, r1
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	2264      	movs	r2, #100	@ 0x64
 80088ea:	fb02 f303 	mul.w	r3, r2, r3
 80088ee:	1acb      	subs	r3, r1, r3
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	3332      	adds	r3, #50	@ 0x32
 80088f4:	4a37      	ldr	r2, [pc, #220]	@ (80089d4 <UART_SetConfig+0x99c>)
 80088f6:	fba2 2303 	umull	r2, r3, r2, r3
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008900:	441c      	add	r4, r3
 8008902:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008906:	2200      	movs	r2, #0
 8008908:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800890c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008910:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8008914:	4642      	mov	r2, r8
 8008916:	464b      	mov	r3, r9
 8008918:	1891      	adds	r1, r2, r2
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	415b      	adcs	r3, r3
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008924:	4641      	mov	r1, r8
 8008926:	1851      	adds	r1, r2, r1
 8008928:	6039      	str	r1, [r7, #0]
 800892a:	4649      	mov	r1, r9
 800892c:	414b      	adcs	r3, r1
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800893c:	4659      	mov	r1, fp
 800893e:	00cb      	lsls	r3, r1, #3
 8008940:	4651      	mov	r1, sl
 8008942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008946:	4651      	mov	r1, sl
 8008948:	00ca      	lsls	r2, r1, #3
 800894a:	4610      	mov	r0, r2
 800894c:	4619      	mov	r1, r3
 800894e:	4603      	mov	r3, r0
 8008950:	4642      	mov	r2, r8
 8008952:	189b      	adds	r3, r3, r2
 8008954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008958:	464b      	mov	r3, r9
 800895a:	460a      	mov	r2, r1
 800895c:	eb42 0303 	adc.w	r3, r2, r3
 8008960:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008970:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8008980:	4649      	mov	r1, r9
 8008982:	008b      	lsls	r3, r1, #2
 8008984:	4641      	mov	r1, r8
 8008986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800898a:	4641      	mov	r1, r8
 800898c:	008a      	lsls	r2, r1, #2
 800898e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008992:	f7f8 f929 	bl	8000be8 <__aeabi_uldivmod>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4b0e      	ldr	r3, [pc, #56]	@ (80089d4 <UART_SetConfig+0x99c>)
 800899c:	fba3 1302 	umull	r1, r3, r3, r2
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	2164      	movs	r1, #100	@ 0x64
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	3332      	adds	r3, #50	@ 0x32
 80089ae:	4a09      	ldr	r2, [pc, #36]	@ (80089d4 <UART_SetConfig+0x99c>)
 80089b0:	fba2 2303 	umull	r2, r3, r2, r3
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	f003 020f 	and.w	r2, r3, #15
 80089ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4422      	add	r2, r4
 80089c2:	609a      	str	r2, [r3, #8]
 80089c4:	e7ff      	b.n	80089c6 <UART_SetConfig+0x98e>
 80089c6:	bf00      	nop
 80089c8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80089cc:	46bd      	mov	sp, r7
 80089ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089d2:	bf00      	nop
 80089d4:	51eb851f 	.word	0x51eb851f

080089d8 <atoi>:
 80089d8:	220a      	movs	r2, #10
 80089da:	2100      	movs	r1, #0
 80089dc:	f000 b87a 	b.w	8008ad4 <strtol>

080089e0 <_strtol_l.isra.0>:
 80089e0:	2b24      	cmp	r3, #36	@ 0x24
 80089e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e6:	4686      	mov	lr, r0
 80089e8:	4690      	mov	r8, r2
 80089ea:	d801      	bhi.n	80089f0 <_strtol_l.isra.0+0x10>
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d106      	bne.n	80089fe <_strtol_l.isra.0+0x1e>
 80089f0:	f000 fe96 	bl	8009720 <__errno>
 80089f4:	2316      	movs	r3, #22
 80089f6:	6003      	str	r3, [r0, #0]
 80089f8:	2000      	movs	r0, #0
 80089fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fe:	4834      	ldr	r0, [pc, #208]	@ (8008ad0 <_strtol_l.isra.0+0xf0>)
 8008a00:	460d      	mov	r5, r1
 8008a02:	462a      	mov	r2, r5
 8008a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a08:	5d06      	ldrb	r6, [r0, r4]
 8008a0a:	f016 0608 	ands.w	r6, r6, #8
 8008a0e:	d1f8      	bne.n	8008a02 <_strtol_l.isra.0+0x22>
 8008a10:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a12:	d110      	bne.n	8008a36 <_strtol_l.isra.0+0x56>
 8008a14:	782c      	ldrb	r4, [r5, #0]
 8008a16:	2601      	movs	r6, #1
 8008a18:	1c95      	adds	r5, r2, #2
 8008a1a:	f033 0210 	bics.w	r2, r3, #16
 8008a1e:	d115      	bne.n	8008a4c <_strtol_l.isra.0+0x6c>
 8008a20:	2c30      	cmp	r4, #48	@ 0x30
 8008a22:	d10d      	bne.n	8008a40 <_strtol_l.isra.0+0x60>
 8008a24:	782a      	ldrb	r2, [r5, #0]
 8008a26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a2a:	2a58      	cmp	r2, #88	@ 0x58
 8008a2c:	d108      	bne.n	8008a40 <_strtol_l.isra.0+0x60>
 8008a2e:	786c      	ldrb	r4, [r5, #1]
 8008a30:	3502      	adds	r5, #2
 8008a32:	2310      	movs	r3, #16
 8008a34:	e00a      	b.n	8008a4c <_strtol_l.isra.0+0x6c>
 8008a36:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a38:	bf04      	itt	eq
 8008a3a:	782c      	ldrbeq	r4, [r5, #0]
 8008a3c:	1c95      	addeq	r5, r2, #2
 8008a3e:	e7ec      	b.n	8008a1a <_strtol_l.isra.0+0x3a>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f6      	bne.n	8008a32 <_strtol_l.isra.0+0x52>
 8008a44:	2c30      	cmp	r4, #48	@ 0x30
 8008a46:	bf14      	ite	ne
 8008a48:	230a      	movne	r3, #10
 8008a4a:	2308      	moveq	r3, #8
 8008a4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a50:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a54:	2200      	movs	r2, #0
 8008a56:	fbbc f9f3 	udiv	r9, ip, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a64:	2f09      	cmp	r7, #9
 8008a66:	d80f      	bhi.n	8008a88 <_strtol_l.isra.0+0xa8>
 8008a68:	463c      	mov	r4, r7
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	dd1b      	ble.n	8008aa6 <_strtol_l.isra.0+0xc6>
 8008a6e:	1c57      	adds	r7, r2, #1
 8008a70:	d007      	beq.n	8008a82 <_strtol_l.isra.0+0xa2>
 8008a72:	4581      	cmp	r9, r0
 8008a74:	d314      	bcc.n	8008aa0 <_strtol_l.isra.0+0xc0>
 8008a76:	d101      	bne.n	8008a7c <_strtol_l.isra.0+0x9c>
 8008a78:	45a2      	cmp	sl, r4
 8008a7a:	db11      	blt.n	8008aa0 <_strtol_l.isra.0+0xc0>
 8008a7c:	fb00 4003 	mla	r0, r0, r3, r4
 8008a80:	2201      	movs	r2, #1
 8008a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a86:	e7eb      	b.n	8008a60 <_strtol_l.isra.0+0x80>
 8008a88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a8c:	2f19      	cmp	r7, #25
 8008a8e:	d801      	bhi.n	8008a94 <_strtol_l.isra.0+0xb4>
 8008a90:	3c37      	subs	r4, #55	@ 0x37
 8008a92:	e7ea      	b.n	8008a6a <_strtol_l.isra.0+0x8a>
 8008a94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a98:	2f19      	cmp	r7, #25
 8008a9a:	d804      	bhi.n	8008aa6 <_strtol_l.isra.0+0xc6>
 8008a9c:	3c57      	subs	r4, #87	@ 0x57
 8008a9e:	e7e4      	b.n	8008a6a <_strtol_l.isra.0+0x8a>
 8008aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa4:	e7ed      	b.n	8008a82 <_strtol_l.isra.0+0xa2>
 8008aa6:	1c53      	adds	r3, r2, #1
 8008aa8:	d108      	bne.n	8008abc <_strtol_l.isra.0+0xdc>
 8008aaa:	2322      	movs	r3, #34	@ 0x22
 8008aac:	f8ce 3000 	str.w	r3, [lr]
 8008ab0:	4660      	mov	r0, ip
 8008ab2:	f1b8 0f00 	cmp.w	r8, #0
 8008ab6:	d0a0      	beq.n	80089fa <_strtol_l.isra.0+0x1a>
 8008ab8:	1e69      	subs	r1, r5, #1
 8008aba:	e006      	b.n	8008aca <_strtol_l.isra.0+0xea>
 8008abc:	b106      	cbz	r6, 8008ac0 <_strtol_l.isra.0+0xe0>
 8008abe:	4240      	negs	r0, r0
 8008ac0:	f1b8 0f00 	cmp.w	r8, #0
 8008ac4:	d099      	beq.n	80089fa <_strtol_l.isra.0+0x1a>
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	d1f6      	bne.n	8008ab8 <_strtol_l.isra.0+0xd8>
 8008aca:	f8c8 1000 	str.w	r1, [r8]
 8008ace:	e794      	b.n	80089fa <_strtol_l.isra.0+0x1a>
 8008ad0:	0800c5d1 	.word	0x0800c5d1

08008ad4 <strtol>:
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	460a      	mov	r2, r1
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4802      	ldr	r0, [pc, #8]	@ (8008ae4 <strtol+0x10>)
 8008adc:	6800      	ldr	r0, [r0, #0]
 8008ade:	f7ff bf7f 	b.w	80089e0 <_strtol_l.isra.0>
 8008ae2:	bf00      	nop
 8008ae4:	20000024 	.word	0x20000024

08008ae8 <__cvt>:
 8008ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	ec57 6b10 	vmov	r6, r7, d0
 8008af0:	2f00      	cmp	r7, #0
 8008af2:	460c      	mov	r4, r1
 8008af4:	4619      	mov	r1, r3
 8008af6:	463b      	mov	r3, r7
 8008af8:	bfbb      	ittet	lt
 8008afa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008afe:	461f      	movlt	r7, r3
 8008b00:	2300      	movge	r3, #0
 8008b02:	232d      	movlt	r3, #45	@ 0x2d
 8008b04:	700b      	strb	r3, [r1, #0]
 8008b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b0c:	4691      	mov	r9, r2
 8008b0e:	f023 0820 	bic.w	r8, r3, #32
 8008b12:	bfbc      	itt	lt
 8008b14:	4632      	movlt	r2, r6
 8008b16:	4616      	movlt	r6, r2
 8008b18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b1c:	d005      	beq.n	8008b2a <__cvt+0x42>
 8008b1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b22:	d100      	bne.n	8008b26 <__cvt+0x3e>
 8008b24:	3401      	adds	r4, #1
 8008b26:	2102      	movs	r1, #2
 8008b28:	e000      	b.n	8008b2c <__cvt+0x44>
 8008b2a:	2103      	movs	r1, #3
 8008b2c:	ab03      	add	r3, sp, #12
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	ab02      	add	r3, sp, #8
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	ec47 6b10 	vmov	d0, r6, r7
 8008b38:	4653      	mov	r3, sl
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	f000 feb4 	bl	80098a8 <_dtoa_r>
 8008b40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b44:	4605      	mov	r5, r0
 8008b46:	d119      	bne.n	8008b7c <__cvt+0x94>
 8008b48:	f019 0f01 	tst.w	r9, #1
 8008b4c:	d00e      	beq.n	8008b6c <__cvt+0x84>
 8008b4e:	eb00 0904 	add.w	r9, r0, r4
 8008b52:	2200      	movs	r2, #0
 8008b54:	2300      	movs	r3, #0
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	f7f7 ffd5 	bl	8000b08 <__aeabi_dcmpeq>
 8008b5e:	b108      	cbz	r0, 8008b64 <__cvt+0x7c>
 8008b60:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b64:	2230      	movs	r2, #48	@ 0x30
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	454b      	cmp	r3, r9
 8008b6a:	d31e      	bcc.n	8008baa <__cvt+0xc2>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b70:	1b5b      	subs	r3, r3, r5
 8008b72:	4628      	mov	r0, r5
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	b004      	add	sp, #16
 8008b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b80:	eb00 0904 	add.w	r9, r0, r4
 8008b84:	d1e5      	bne.n	8008b52 <__cvt+0x6a>
 8008b86:	7803      	ldrb	r3, [r0, #0]
 8008b88:	2b30      	cmp	r3, #48	@ 0x30
 8008b8a:	d10a      	bne.n	8008ba2 <__cvt+0xba>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 ffb8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b98:	b918      	cbnz	r0, 8008ba2 <__cvt+0xba>
 8008b9a:	f1c4 0401 	rsb	r4, r4, #1
 8008b9e:	f8ca 4000 	str.w	r4, [sl]
 8008ba2:	f8da 3000 	ldr.w	r3, [sl]
 8008ba6:	4499      	add	r9, r3
 8008ba8:	e7d3      	b.n	8008b52 <__cvt+0x6a>
 8008baa:	1c59      	adds	r1, r3, #1
 8008bac:	9103      	str	r1, [sp, #12]
 8008bae:	701a      	strb	r2, [r3, #0]
 8008bb0:	e7d9      	b.n	8008b66 <__cvt+0x7e>

08008bb2 <__exponent>:
 8008bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	bfba      	itte	lt
 8008bb8:	4249      	neglt	r1, r1
 8008bba:	232d      	movlt	r3, #45	@ 0x2d
 8008bbc:	232b      	movge	r3, #43	@ 0x2b
 8008bbe:	2909      	cmp	r1, #9
 8008bc0:	7002      	strb	r2, [r0, #0]
 8008bc2:	7043      	strb	r3, [r0, #1]
 8008bc4:	dd29      	ble.n	8008c1a <__exponent+0x68>
 8008bc6:	f10d 0307 	add.w	r3, sp, #7
 8008bca:	461d      	mov	r5, r3
 8008bcc:	270a      	movs	r7, #10
 8008bce:	461a      	mov	r2, r3
 8008bd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bd4:	fb07 1416 	mls	r4, r7, r6, r1
 8008bd8:	3430      	adds	r4, #48	@ 0x30
 8008bda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bde:	460c      	mov	r4, r1
 8008be0:	2c63      	cmp	r4, #99	@ 0x63
 8008be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008be6:	4631      	mov	r1, r6
 8008be8:	dcf1      	bgt.n	8008bce <__exponent+0x1c>
 8008bea:	3130      	adds	r1, #48	@ 0x30
 8008bec:	1e94      	subs	r4, r2, #2
 8008bee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bf2:	1c41      	adds	r1, r0, #1
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	42ab      	cmp	r3, r5
 8008bf8:	d30a      	bcc.n	8008c10 <__exponent+0x5e>
 8008bfa:	f10d 0309 	add.w	r3, sp, #9
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	42ac      	cmp	r4, r5
 8008c02:	bf88      	it	hi
 8008c04:	2300      	movhi	r3, #0
 8008c06:	3302      	adds	r3, #2
 8008c08:	4403      	add	r3, r0
 8008c0a:	1a18      	subs	r0, r3, r0
 8008c0c:	b003      	add	sp, #12
 8008c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c18:	e7ed      	b.n	8008bf6 <__exponent+0x44>
 8008c1a:	2330      	movs	r3, #48	@ 0x30
 8008c1c:	3130      	adds	r1, #48	@ 0x30
 8008c1e:	7083      	strb	r3, [r0, #2]
 8008c20:	70c1      	strb	r1, [r0, #3]
 8008c22:	1d03      	adds	r3, r0, #4
 8008c24:	e7f1      	b.n	8008c0a <__exponent+0x58>
	...

08008c28 <_printf_float>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	b08d      	sub	sp, #52	@ 0x34
 8008c2e:	460c      	mov	r4, r1
 8008c30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c34:	4616      	mov	r6, r2
 8008c36:	461f      	mov	r7, r3
 8008c38:	4605      	mov	r5, r0
 8008c3a:	f000 fd27 	bl	800968c <_localeconv_r>
 8008c3e:	6803      	ldr	r3, [r0, #0]
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f7 fb34 	bl	80002b0 <strlen>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c50:	9005      	str	r0, [sp, #20]
 8008c52:	3307      	adds	r3, #7
 8008c54:	f023 0307 	bic.w	r3, r3, #7
 8008c58:	f103 0208 	add.w	r2, r3, #8
 8008c5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c60:	f8d4 b000 	ldr.w	fp, [r4]
 8008c64:	f8c8 2000 	str.w	r2, [r8]
 8008c68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c70:	9307      	str	r3, [sp, #28]
 8008c72:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ef0 <_printf_float+0x2c8>)
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	f7f7 ff72 	bl	8000b6c <__aeabi_dcmpun>
 8008c88:	bb70      	cbnz	r0, 8008ce8 <_printf_float+0xc0>
 8008c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8e:	4b98      	ldr	r3, [pc, #608]	@ (8008ef0 <_printf_float+0x2c8>)
 8008c90:	f04f 32ff 	mov.w	r2, #4294967295
 8008c94:	f7f7 ff4c 	bl	8000b30 <__aeabi_dcmple>
 8008c98:	bb30      	cbnz	r0, 8008ce8 <_printf_float+0xc0>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	f7f7 ff3b 	bl	8000b1c <__aeabi_dcmplt>
 8008ca6:	b110      	cbz	r0, 8008cae <_printf_float+0x86>
 8008ca8:	232d      	movs	r3, #45	@ 0x2d
 8008caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cae:	4a91      	ldr	r2, [pc, #580]	@ (8008ef4 <_printf_float+0x2cc>)
 8008cb0:	4b91      	ldr	r3, [pc, #580]	@ (8008ef8 <_printf_float+0x2d0>)
 8008cb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cb6:	bf8c      	ite	hi
 8008cb8:	4690      	movhi	r8, r2
 8008cba:	4698      	movls	r8, r3
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	6123      	str	r3, [r4, #16]
 8008cc0:	f02b 0304 	bic.w	r3, fp, #4
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	f04f 0900 	mov.w	r9, #0
 8008cca:	9700      	str	r7, [sp, #0]
 8008ccc:	4633      	mov	r3, r6
 8008cce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f9d2 	bl	800907c <_printf_common>
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f040 808d 	bne.w	8008df8 <_printf_float+0x1d0>
 8008cde:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce2:	b00d      	add	sp, #52	@ 0x34
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 ff3c 	bl	8000b6c <__aeabi_dcmpun>
 8008cf4:	b140      	cbz	r0, 8008d08 <_printf_float+0xe0>
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bfbc      	itt	lt
 8008cfc:	232d      	movlt	r3, #45	@ 0x2d
 8008cfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d02:	4a7e      	ldr	r2, [pc, #504]	@ (8008efc <_printf_float+0x2d4>)
 8008d04:	4b7e      	ldr	r3, [pc, #504]	@ (8008f00 <_printf_float+0x2d8>)
 8008d06:	e7d4      	b.n	8008cb2 <_printf_float+0x8a>
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d0e:	9206      	str	r2, [sp, #24]
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	d13b      	bne.n	8008d8c <_printf_float+0x164>
 8008d14:	2306      	movs	r3, #6
 8008d16:	6063      	str	r3, [r4, #4]
 8008d18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6022      	str	r2, [r4, #0]
 8008d20:	9303      	str	r3, [sp, #12]
 8008d22:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d28:	ab09      	add	r3, sp, #36	@ 0x24
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	ec49 8b10 	vmov	d0, r8, r9
 8008d32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7ff fed6 	bl	8008ae8 <__cvt>
 8008d3c:	9b06      	ldr	r3, [sp, #24]
 8008d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d40:	2b47      	cmp	r3, #71	@ 0x47
 8008d42:	4680      	mov	r8, r0
 8008d44:	d129      	bne.n	8008d9a <_printf_float+0x172>
 8008d46:	1cc8      	adds	r0, r1, #3
 8008d48:	db02      	blt.n	8008d50 <_printf_float+0x128>
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	dd41      	ble.n	8008dd4 <_printf_float+0x1ac>
 8008d50:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d54:	fa5f fa8a 	uxtb.w	sl, sl
 8008d58:	3901      	subs	r1, #1
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d60:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d62:	f7ff ff26 	bl	8008bb2 <__exponent>
 8008d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d68:	1813      	adds	r3, r2, r0
 8008d6a:	2a01      	cmp	r2, #1
 8008d6c:	4681      	mov	r9, r0
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	dc02      	bgt.n	8008d78 <_printf_float+0x150>
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	07d2      	lsls	r2, r2, #31
 8008d76:	d501      	bpl.n	8008d7c <_printf_float+0x154>
 8008d78:	3301      	adds	r3, #1
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0a2      	beq.n	8008cca <_printf_float+0xa2>
 8008d84:	232d      	movs	r3, #45	@ 0x2d
 8008d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d8a:	e79e      	b.n	8008cca <_printf_float+0xa2>
 8008d8c:	9a06      	ldr	r2, [sp, #24]
 8008d8e:	2a47      	cmp	r2, #71	@ 0x47
 8008d90:	d1c2      	bne.n	8008d18 <_printf_float+0xf0>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1c0      	bne.n	8008d18 <_printf_float+0xf0>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e7bd      	b.n	8008d16 <_printf_float+0xee>
 8008d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d9e:	d9db      	bls.n	8008d58 <_printf_float+0x130>
 8008da0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008da4:	d118      	bne.n	8008dd8 <_printf_float+0x1b0>
 8008da6:	2900      	cmp	r1, #0
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	dd0b      	ble.n	8008dc4 <_printf_float+0x19c>
 8008dac:	6121      	str	r1, [r4, #16]
 8008dae:	b913      	cbnz	r3, 8008db6 <_printf_float+0x18e>
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	07d0      	lsls	r0, r2, #31
 8008db4:	d502      	bpl.n	8008dbc <_printf_float+0x194>
 8008db6:	3301      	adds	r3, #1
 8008db8:	440b      	add	r3, r1
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008dbe:	f04f 0900 	mov.w	r9, #0
 8008dc2:	e7db      	b.n	8008d7c <_printf_float+0x154>
 8008dc4:	b913      	cbnz	r3, 8008dcc <_printf_float+0x1a4>
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	07d2      	lsls	r2, r2, #31
 8008dca:	d501      	bpl.n	8008dd0 <_printf_float+0x1a8>
 8008dcc:	3302      	adds	r3, #2
 8008dce:	e7f4      	b.n	8008dba <_printf_float+0x192>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7f2      	b.n	8008dba <_printf_float+0x192>
 8008dd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	db05      	blt.n	8008dea <_printf_float+0x1c2>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6121      	str	r1, [r4, #16]
 8008de2:	07d8      	lsls	r0, r3, #31
 8008de4:	d5ea      	bpl.n	8008dbc <_printf_float+0x194>
 8008de6:	1c4b      	adds	r3, r1, #1
 8008de8:	e7e7      	b.n	8008dba <_printf_float+0x192>
 8008dea:	2900      	cmp	r1, #0
 8008dec:	bfd4      	ite	le
 8008dee:	f1c1 0202 	rsble	r2, r1, #2
 8008df2:	2201      	movgt	r2, #1
 8008df4:	4413      	add	r3, r2
 8008df6:	e7e0      	b.n	8008dba <_printf_float+0x192>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	055a      	lsls	r2, r3, #21
 8008dfc:	d407      	bmi.n	8008e0e <_printf_float+0x1e6>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	4642      	mov	r2, r8
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b8      	blx	r7
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d12b      	bne.n	8008e64 <_printf_float+0x23c>
 8008e0c:	e767      	b.n	8008cde <_printf_float+0xb6>
 8008e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e12:	f240 80dd 	bls.w	8008fd0 <_printf_float+0x3a8>
 8008e16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f7f7 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d033      	beq.n	8008e8e <_printf_float+0x266>
 8008e26:	4a37      	ldr	r2, [pc, #220]	@ (8008f04 <_printf_float+0x2dc>)
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	f43f af54 	beq.w	8008cde <_printf_float+0xb6>
 8008e36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e3a:	4543      	cmp	r3, r8
 8008e3c:	db02      	blt.n	8008e44 <_printf_float+0x21c>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	07d8      	lsls	r0, r3, #31
 8008e42:	d50f      	bpl.n	8008e64 <_printf_float+0x23c>
 8008e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f af45 	beq.w	8008cde <_printf_float+0xb6>
 8008e54:	f04f 0900 	mov.w	r9, #0
 8008e58:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e5c:	f104 0a1a 	add.w	sl, r4, #26
 8008e60:	45c8      	cmp	r8, r9
 8008e62:	dc09      	bgt.n	8008e78 <_printf_float+0x250>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	079b      	lsls	r3, r3, #30
 8008e68:	f100 8103 	bmi.w	8009072 <_printf_float+0x44a>
 8008e6c:	68e0      	ldr	r0, [r4, #12]
 8008e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e70:	4298      	cmp	r0, r3
 8008e72:	bfb8      	it	lt
 8008e74:	4618      	movlt	r0, r3
 8008e76:	e734      	b.n	8008ce2 <_printf_float+0xba>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4628      	mov	r0, r5
 8008e80:	47b8      	blx	r7
 8008e82:	3001      	adds	r0, #1
 8008e84:	f43f af2b 	beq.w	8008cde <_printf_float+0xb6>
 8008e88:	f109 0901 	add.w	r9, r9, #1
 8008e8c:	e7e8      	b.n	8008e60 <_printf_float+0x238>
 8008e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dc39      	bgt.n	8008f08 <_printf_float+0x2e0>
 8008e94:	4a1b      	ldr	r2, [pc, #108]	@ (8008f04 <_printf_float+0x2dc>)
 8008e96:	2301      	movs	r3, #1
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f af1d 	beq.w	8008cde <_printf_float+0xb6>
 8008ea4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ea8:	ea59 0303 	orrs.w	r3, r9, r3
 8008eac:	d102      	bne.n	8008eb4 <_printf_float+0x28c>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	07d9      	lsls	r1, r3, #31
 8008eb2:	d5d7      	bpl.n	8008e64 <_printf_float+0x23c>
 8008eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4628      	mov	r0, r5
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f43f af0d 	beq.w	8008cde <_printf_float+0xb6>
 8008ec4:	f04f 0a00 	mov.w	sl, #0
 8008ec8:	f104 0b1a 	add.w	fp, r4, #26
 8008ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ece:	425b      	negs	r3, r3
 8008ed0:	4553      	cmp	r3, sl
 8008ed2:	dc01      	bgt.n	8008ed8 <_printf_float+0x2b0>
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	e793      	b.n	8008e00 <_printf_float+0x1d8>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	465a      	mov	r2, fp
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f43f aefb 	beq.w	8008cde <_printf_float+0xb6>
 8008ee8:	f10a 0a01 	add.w	sl, sl, #1
 8008eec:	e7ee      	b.n	8008ecc <_printf_float+0x2a4>
 8008eee:	bf00      	nop
 8008ef0:	7fefffff 	.word	0x7fefffff
 8008ef4:	0800c6d5 	.word	0x0800c6d5
 8008ef8:	0800c6d1 	.word	0x0800c6d1
 8008efc:	0800c6dd 	.word	0x0800c6dd
 8008f00:	0800c6d9 	.word	0x0800c6d9
 8008f04:	0800c6e1 	.word	0x0800c6e1
 8008f08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f0e:	4553      	cmp	r3, sl
 8008f10:	bfa8      	it	ge
 8008f12:	4653      	movge	r3, sl
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	4699      	mov	r9, r3
 8008f18:	dc36      	bgt.n	8008f88 <_printf_float+0x360>
 8008f1a:	f04f 0b00 	mov.w	fp, #0
 8008f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f22:	f104 021a 	add.w	r2, r4, #26
 8008f26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f28:	9306      	str	r3, [sp, #24]
 8008f2a:	eba3 0309 	sub.w	r3, r3, r9
 8008f2e:	455b      	cmp	r3, fp
 8008f30:	dc31      	bgt.n	8008f96 <_printf_float+0x36e>
 8008f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f34:	459a      	cmp	sl, r3
 8008f36:	dc3a      	bgt.n	8008fae <_printf_float+0x386>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	07da      	lsls	r2, r3, #31
 8008f3c:	d437      	bmi.n	8008fae <_printf_float+0x386>
 8008f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f40:	ebaa 0903 	sub.w	r9, sl, r3
 8008f44:	9b06      	ldr	r3, [sp, #24]
 8008f46:	ebaa 0303 	sub.w	r3, sl, r3
 8008f4a:	4599      	cmp	r9, r3
 8008f4c:	bfa8      	it	ge
 8008f4e:	4699      	movge	r9, r3
 8008f50:	f1b9 0f00 	cmp.w	r9, #0
 8008f54:	dc33      	bgt.n	8008fbe <_printf_float+0x396>
 8008f56:	f04f 0800 	mov.w	r8, #0
 8008f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f5e:	f104 0b1a 	add.w	fp, r4, #26
 8008f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f64:	ebaa 0303 	sub.w	r3, sl, r3
 8008f68:	eba3 0309 	sub.w	r3, r3, r9
 8008f6c:	4543      	cmp	r3, r8
 8008f6e:	f77f af79 	ble.w	8008e64 <_printf_float+0x23c>
 8008f72:	2301      	movs	r3, #1
 8008f74:	465a      	mov	r2, fp
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	f43f aeae 	beq.w	8008cde <_printf_float+0xb6>
 8008f82:	f108 0801 	add.w	r8, r8, #1
 8008f86:	e7ec      	b.n	8008f62 <_printf_float+0x33a>
 8008f88:	4642      	mov	r2, r8
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	d1c2      	bne.n	8008f1a <_printf_float+0x2f2>
 8008f94:	e6a3      	b.n	8008cde <_printf_float+0xb6>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	9206      	str	r2, [sp, #24]
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	f43f ae9c 	beq.w	8008cde <_printf_float+0xb6>
 8008fa6:	9a06      	ldr	r2, [sp, #24]
 8008fa8:	f10b 0b01 	add.w	fp, fp, #1
 8008fac:	e7bb      	b.n	8008f26 <_printf_float+0x2fe>
 8008fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1c0      	bne.n	8008f3e <_printf_float+0x316>
 8008fbc:	e68f      	b.n	8008cde <_printf_float+0xb6>
 8008fbe:	9a06      	ldr	r2, [sp, #24]
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	4442      	add	r2, r8
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b8      	blx	r7
 8008fca:	3001      	adds	r0, #1
 8008fcc:	d1c3      	bne.n	8008f56 <_printf_float+0x32e>
 8008fce:	e686      	b.n	8008cde <_printf_float+0xb6>
 8008fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fd4:	f1ba 0f01 	cmp.w	sl, #1
 8008fd8:	dc01      	bgt.n	8008fde <_printf_float+0x3b6>
 8008fda:	07db      	lsls	r3, r3, #31
 8008fdc:	d536      	bpl.n	800904c <_printf_float+0x424>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b8      	blx	r7
 8008fe8:	3001      	adds	r0, #1
 8008fea:	f43f ae78 	beq.w	8008cde <_printf_float+0xb6>
 8008fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	f43f ae70 	beq.w	8008cde <_printf_float+0xb6>
 8008ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800900a:	f7f7 fd7d 	bl	8000b08 <__aeabi_dcmpeq>
 800900e:	b9c0      	cbnz	r0, 8009042 <_printf_float+0x41a>
 8009010:	4653      	mov	r3, sl
 8009012:	f108 0201 	add.w	r2, r8, #1
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	d10c      	bne.n	800903a <_printf_float+0x412>
 8009020:	e65d      	b.n	8008cde <_printf_float+0xb6>
 8009022:	2301      	movs	r3, #1
 8009024:	465a      	mov	r2, fp
 8009026:	4631      	mov	r1, r6
 8009028:	4628      	mov	r0, r5
 800902a:	47b8      	blx	r7
 800902c:	3001      	adds	r0, #1
 800902e:	f43f ae56 	beq.w	8008cde <_printf_float+0xb6>
 8009032:	f108 0801 	add.w	r8, r8, #1
 8009036:	45d0      	cmp	r8, sl
 8009038:	dbf3      	blt.n	8009022 <_printf_float+0x3fa>
 800903a:	464b      	mov	r3, r9
 800903c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009040:	e6df      	b.n	8008e02 <_printf_float+0x1da>
 8009042:	f04f 0800 	mov.w	r8, #0
 8009046:	f104 0b1a 	add.w	fp, r4, #26
 800904a:	e7f4      	b.n	8009036 <_printf_float+0x40e>
 800904c:	2301      	movs	r3, #1
 800904e:	4642      	mov	r2, r8
 8009050:	e7e1      	b.n	8009016 <_printf_float+0x3ee>
 8009052:	2301      	movs	r3, #1
 8009054:	464a      	mov	r2, r9
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	47b8      	blx	r7
 800905c:	3001      	adds	r0, #1
 800905e:	f43f ae3e 	beq.w	8008cde <_printf_float+0xb6>
 8009062:	f108 0801 	add.w	r8, r8, #1
 8009066:	68e3      	ldr	r3, [r4, #12]
 8009068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800906a:	1a5b      	subs	r3, r3, r1
 800906c:	4543      	cmp	r3, r8
 800906e:	dcf0      	bgt.n	8009052 <_printf_float+0x42a>
 8009070:	e6fc      	b.n	8008e6c <_printf_float+0x244>
 8009072:	f04f 0800 	mov.w	r8, #0
 8009076:	f104 0919 	add.w	r9, r4, #25
 800907a:	e7f4      	b.n	8009066 <_printf_float+0x43e>

0800907c <_printf_common>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	4616      	mov	r6, r2
 8009082:	4698      	mov	r8, r3
 8009084:	688a      	ldr	r2, [r1, #8]
 8009086:	690b      	ldr	r3, [r1, #16]
 8009088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800908c:	4293      	cmp	r3, r2
 800908e:	bfb8      	it	lt
 8009090:	4613      	movlt	r3, r2
 8009092:	6033      	str	r3, [r6, #0]
 8009094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009098:	4607      	mov	r7, r0
 800909a:	460c      	mov	r4, r1
 800909c:	b10a      	cbz	r2, 80090a2 <_printf_common+0x26>
 800909e:	3301      	adds	r3, #1
 80090a0:	6033      	str	r3, [r6, #0]
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	0699      	lsls	r1, r3, #26
 80090a6:	bf42      	ittt	mi
 80090a8:	6833      	ldrmi	r3, [r6, #0]
 80090aa:	3302      	addmi	r3, #2
 80090ac:	6033      	strmi	r3, [r6, #0]
 80090ae:	6825      	ldr	r5, [r4, #0]
 80090b0:	f015 0506 	ands.w	r5, r5, #6
 80090b4:	d106      	bne.n	80090c4 <_printf_common+0x48>
 80090b6:	f104 0a19 	add.w	sl, r4, #25
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	6832      	ldr	r2, [r6, #0]
 80090be:	1a9b      	subs	r3, r3, r2
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	dc26      	bgt.n	8009112 <_printf_common+0x96>
 80090c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	3b00      	subs	r3, #0
 80090cc:	bf18      	it	ne
 80090ce:	2301      	movne	r3, #1
 80090d0:	0692      	lsls	r2, r2, #26
 80090d2:	d42b      	bmi.n	800912c <_printf_common+0xb0>
 80090d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090d8:	4641      	mov	r1, r8
 80090da:	4638      	mov	r0, r7
 80090dc:	47c8      	blx	r9
 80090de:	3001      	adds	r0, #1
 80090e0:	d01e      	beq.n	8009120 <_printf_common+0xa4>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	6922      	ldr	r2, [r4, #16]
 80090e6:	f003 0306 	and.w	r3, r3, #6
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	bf02      	ittt	eq
 80090ee:	68e5      	ldreq	r5, [r4, #12]
 80090f0:	6833      	ldreq	r3, [r6, #0]
 80090f2:	1aed      	subeq	r5, r5, r3
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	bf0c      	ite	eq
 80090f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090fc:	2500      	movne	r5, #0
 80090fe:	4293      	cmp	r3, r2
 8009100:	bfc4      	itt	gt
 8009102:	1a9b      	subgt	r3, r3, r2
 8009104:	18ed      	addgt	r5, r5, r3
 8009106:	2600      	movs	r6, #0
 8009108:	341a      	adds	r4, #26
 800910a:	42b5      	cmp	r5, r6
 800910c:	d11a      	bne.n	8009144 <_printf_common+0xc8>
 800910e:	2000      	movs	r0, #0
 8009110:	e008      	b.n	8009124 <_printf_common+0xa8>
 8009112:	2301      	movs	r3, #1
 8009114:	4652      	mov	r2, sl
 8009116:	4641      	mov	r1, r8
 8009118:	4638      	mov	r0, r7
 800911a:	47c8      	blx	r9
 800911c:	3001      	adds	r0, #1
 800911e:	d103      	bne.n	8009128 <_printf_common+0xac>
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	3501      	adds	r5, #1
 800912a:	e7c6      	b.n	80090ba <_printf_common+0x3e>
 800912c:	18e1      	adds	r1, r4, r3
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	2030      	movs	r0, #48	@ 0x30
 8009132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009136:	4422      	add	r2, r4
 8009138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800913c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009140:	3302      	adds	r3, #2
 8009142:	e7c7      	b.n	80090d4 <_printf_common+0x58>
 8009144:	2301      	movs	r3, #1
 8009146:	4622      	mov	r2, r4
 8009148:	4641      	mov	r1, r8
 800914a:	4638      	mov	r0, r7
 800914c:	47c8      	blx	r9
 800914e:	3001      	adds	r0, #1
 8009150:	d0e6      	beq.n	8009120 <_printf_common+0xa4>
 8009152:	3601      	adds	r6, #1
 8009154:	e7d9      	b.n	800910a <_printf_common+0x8e>
	...

08009158 <_printf_i>:
 8009158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	7e0f      	ldrb	r7, [r1, #24]
 800915e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009160:	2f78      	cmp	r7, #120	@ 0x78
 8009162:	4691      	mov	r9, r2
 8009164:	4680      	mov	r8, r0
 8009166:	460c      	mov	r4, r1
 8009168:	469a      	mov	sl, r3
 800916a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800916e:	d807      	bhi.n	8009180 <_printf_i+0x28>
 8009170:	2f62      	cmp	r7, #98	@ 0x62
 8009172:	d80a      	bhi.n	800918a <_printf_i+0x32>
 8009174:	2f00      	cmp	r7, #0
 8009176:	f000 80d1 	beq.w	800931c <_printf_i+0x1c4>
 800917a:	2f58      	cmp	r7, #88	@ 0x58
 800917c:	f000 80b8 	beq.w	80092f0 <_printf_i+0x198>
 8009180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009188:	e03a      	b.n	8009200 <_printf_i+0xa8>
 800918a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800918e:	2b15      	cmp	r3, #21
 8009190:	d8f6      	bhi.n	8009180 <_printf_i+0x28>
 8009192:	a101      	add	r1, pc, #4	@ (adr r1, 8009198 <_printf_i+0x40>)
 8009194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009198:	080091f1 	.word	0x080091f1
 800919c:	08009205 	.word	0x08009205
 80091a0:	08009181 	.word	0x08009181
 80091a4:	08009181 	.word	0x08009181
 80091a8:	08009181 	.word	0x08009181
 80091ac:	08009181 	.word	0x08009181
 80091b0:	08009205 	.word	0x08009205
 80091b4:	08009181 	.word	0x08009181
 80091b8:	08009181 	.word	0x08009181
 80091bc:	08009181 	.word	0x08009181
 80091c0:	08009181 	.word	0x08009181
 80091c4:	08009303 	.word	0x08009303
 80091c8:	0800922f 	.word	0x0800922f
 80091cc:	080092bd 	.word	0x080092bd
 80091d0:	08009181 	.word	0x08009181
 80091d4:	08009181 	.word	0x08009181
 80091d8:	08009325 	.word	0x08009325
 80091dc:	08009181 	.word	0x08009181
 80091e0:	0800922f 	.word	0x0800922f
 80091e4:	08009181 	.word	0x08009181
 80091e8:	08009181 	.word	0x08009181
 80091ec:	080092c5 	.word	0x080092c5
 80091f0:	6833      	ldr	r3, [r6, #0]
 80091f2:	1d1a      	adds	r2, r3, #4
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6032      	str	r2, [r6, #0]
 80091f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009200:	2301      	movs	r3, #1
 8009202:	e09c      	b.n	800933e <_printf_i+0x1e6>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	1d19      	adds	r1, r3, #4
 800920a:	6031      	str	r1, [r6, #0]
 800920c:	0606      	lsls	r6, r0, #24
 800920e:	d501      	bpl.n	8009214 <_printf_i+0xbc>
 8009210:	681d      	ldr	r5, [r3, #0]
 8009212:	e003      	b.n	800921c <_printf_i+0xc4>
 8009214:	0645      	lsls	r5, r0, #25
 8009216:	d5fb      	bpl.n	8009210 <_printf_i+0xb8>
 8009218:	f9b3 5000 	ldrsh.w	r5, [r3]
 800921c:	2d00      	cmp	r5, #0
 800921e:	da03      	bge.n	8009228 <_printf_i+0xd0>
 8009220:	232d      	movs	r3, #45	@ 0x2d
 8009222:	426d      	negs	r5, r5
 8009224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009228:	4858      	ldr	r0, [pc, #352]	@ (800938c <_printf_i+0x234>)
 800922a:	230a      	movs	r3, #10
 800922c:	e011      	b.n	8009252 <_printf_i+0xfa>
 800922e:	6821      	ldr	r1, [r4, #0]
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	0608      	lsls	r0, r1, #24
 8009234:	f853 5b04 	ldr.w	r5, [r3], #4
 8009238:	d402      	bmi.n	8009240 <_printf_i+0xe8>
 800923a:	0649      	lsls	r1, r1, #25
 800923c:	bf48      	it	mi
 800923e:	b2ad      	uxthmi	r5, r5
 8009240:	2f6f      	cmp	r7, #111	@ 0x6f
 8009242:	4852      	ldr	r0, [pc, #328]	@ (800938c <_printf_i+0x234>)
 8009244:	6033      	str	r3, [r6, #0]
 8009246:	bf14      	ite	ne
 8009248:	230a      	movne	r3, #10
 800924a:	2308      	moveq	r3, #8
 800924c:	2100      	movs	r1, #0
 800924e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009252:	6866      	ldr	r6, [r4, #4]
 8009254:	60a6      	str	r6, [r4, #8]
 8009256:	2e00      	cmp	r6, #0
 8009258:	db05      	blt.n	8009266 <_printf_i+0x10e>
 800925a:	6821      	ldr	r1, [r4, #0]
 800925c:	432e      	orrs	r6, r5
 800925e:	f021 0104 	bic.w	r1, r1, #4
 8009262:	6021      	str	r1, [r4, #0]
 8009264:	d04b      	beq.n	80092fe <_printf_i+0x1a6>
 8009266:	4616      	mov	r6, r2
 8009268:	fbb5 f1f3 	udiv	r1, r5, r3
 800926c:	fb03 5711 	mls	r7, r3, r1, r5
 8009270:	5dc7      	ldrb	r7, [r0, r7]
 8009272:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009276:	462f      	mov	r7, r5
 8009278:	42bb      	cmp	r3, r7
 800927a:	460d      	mov	r5, r1
 800927c:	d9f4      	bls.n	8009268 <_printf_i+0x110>
 800927e:	2b08      	cmp	r3, #8
 8009280:	d10b      	bne.n	800929a <_printf_i+0x142>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	07df      	lsls	r7, r3, #31
 8009286:	d508      	bpl.n	800929a <_printf_i+0x142>
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	6861      	ldr	r1, [r4, #4]
 800928c:	4299      	cmp	r1, r3
 800928e:	bfde      	ittt	le
 8009290:	2330      	movle	r3, #48	@ 0x30
 8009292:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009296:	f106 36ff 	addle.w	r6, r6, #4294967295
 800929a:	1b92      	subs	r2, r2, r6
 800929c:	6122      	str	r2, [r4, #16]
 800929e:	f8cd a000 	str.w	sl, [sp]
 80092a2:	464b      	mov	r3, r9
 80092a4:	aa03      	add	r2, sp, #12
 80092a6:	4621      	mov	r1, r4
 80092a8:	4640      	mov	r0, r8
 80092aa:	f7ff fee7 	bl	800907c <_printf_common>
 80092ae:	3001      	adds	r0, #1
 80092b0:	d14a      	bne.n	8009348 <_printf_i+0x1f0>
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295
 80092b6:	b004      	add	sp, #16
 80092b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	f043 0320 	orr.w	r3, r3, #32
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	4832      	ldr	r0, [pc, #200]	@ (8009390 <_printf_i+0x238>)
 80092c6:	2778      	movs	r7, #120	@ 0x78
 80092c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	6831      	ldr	r1, [r6, #0]
 80092d0:	061f      	lsls	r7, r3, #24
 80092d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80092d6:	d402      	bmi.n	80092de <_printf_i+0x186>
 80092d8:	065f      	lsls	r7, r3, #25
 80092da:	bf48      	it	mi
 80092dc:	b2ad      	uxthmi	r5, r5
 80092de:	6031      	str	r1, [r6, #0]
 80092e0:	07d9      	lsls	r1, r3, #31
 80092e2:	bf44      	itt	mi
 80092e4:	f043 0320 	orrmi.w	r3, r3, #32
 80092e8:	6023      	strmi	r3, [r4, #0]
 80092ea:	b11d      	cbz	r5, 80092f4 <_printf_i+0x19c>
 80092ec:	2310      	movs	r3, #16
 80092ee:	e7ad      	b.n	800924c <_printf_i+0xf4>
 80092f0:	4826      	ldr	r0, [pc, #152]	@ (800938c <_printf_i+0x234>)
 80092f2:	e7e9      	b.n	80092c8 <_printf_i+0x170>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	f023 0320 	bic.w	r3, r3, #32
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	e7f6      	b.n	80092ec <_printf_i+0x194>
 80092fe:	4616      	mov	r6, r2
 8009300:	e7bd      	b.n	800927e <_printf_i+0x126>
 8009302:	6833      	ldr	r3, [r6, #0]
 8009304:	6825      	ldr	r5, [r4, #0]
 8009306:	6961      	ldr	r1, [r4, #20]
 8009308:	1d18      	adds	r0, r3, #4
 800930a:	6030      	str	r0, [r6, #0]
 800930c:	062e      	lsls	r6, r5, #24
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	d501      	bpl.n	8009316 <_printf_i+0x1be>
 8009312:	6019      	str	r1, [r3, #0]
 8009314:	e002      	b.n	800931c <_printf_i+0x1c4>
 8009316:	0668      	lsls	r0, r5, #25
 8009318:	d5fb      	bpl.n	8009312 <_printf_i+0x1ba>
 800931a:	8019      	strh	r1, [r3, #0]
 800931c:	2300      	movs	r3, #0
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	4616      	mov	r6, r2
 8009322:	e7bc      	b.n	800929e <_printf_i+0x146>
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	1d1a      	adds	r2, r3, #4
 8009328:	6032      	str	r2, [r6, #0]
 800932a:	681e      	ldr	r6, [r3, #0]
 800932c:	6862      	ldr	r2, [r4, #4]
 800932e:	2100      	movs	r1, #0
 8009330:	4630      	mov	r0, r6
 8009332:	f7f6 ff6d 	bl	8000210 <memchr>
 8009336:	b108      	cbz	r0, 800933c <_printf_i+0x1e4>
 8009338:	1b80      	subs	r0, r0, r6
 800933a:	6060      	str	r0, [r4, #4]
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	2300      	movs	r3, #0
 8009342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009346:	e7aa      	b.n	800929e <_printf_i+0x146>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	4632      	mov	r2, r6
 800934c:	4649      	mov	r1, r9
 800934e:	4640      	mov	r0, r8
 8009350:	47d0      	blx	sl
 8009352:	3001      	adds	r0, #1
 8009354:	d0ad      	beq.n	80092b2 <_printf_i+0x15a>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	079b      	lsls	r3, r3, #30
 800935a:	d413      	bmi.n	8009384 <_printf_i+0x22c>
 800935c:	68e0      	ldr	r0, [r4, #12]
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	4298      	cmp	r0, r3
 8009362:	bfb8      	it	lt
 8009364:	4618      	movlt	r0, r3
 8009366:	e7a6      	b.n	80092b6 <_printf_i+0x15e>
 8009368:	2301      	movs	r3, #1
 800936a:	4632      	mov	r2, r6
 800936c:	4649      	mov	r1, r9
 800936e:	4640      	mov	r0, r8
 8009370:	47d0      	blx	sl
 8009372:	3001      	adds	r0, #1
 8009374:	d09d      	beq.n	80092b2 <_printf_i+0x15a>
 8009376:	3501      	adds	r5, #1
 8009378:	68e3      	ldr	r3, [r4, #12]
 800937a:	9903      	ldr	r1, [sp, #12]
 800937c:	1a5b      	subs	r3, r3, r1
 800937e:	42ab      	cmp	r3, r5
 8009380:	dcf2      	bgt.n	8009368 <_printf_i+0x210>
 8009382:	e7eb      	b.n	800935c <_printf_i+0x204>
 8009384:	2500      	movs	r5, #0
 8009386:	f104 0619 	add.w	r6, r4, #25
 800938a:	e7f5      	b.n	8009378 <_printf_i+0x220>
 800938c:	0800c6e3 	.word	0x0800c6e3
 8009390:	0800c6f4 	.word	0x0800c6f4

08009394 <std>:
 8009394:	2300      	movs	r3, #0
 8009396:	b510      	push	{r4, lr}
 8009398:	4604      	mov	r4, r0
 800939a:	e9c0 3300 	strd	r3, r3, [r0]
 800939e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a2:	6083      	str	r3, [r0, #8]
 80093a4:	8181      	strh	r1, [r0, #12]
 80093a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80093a8:	81c2      	strh	r2, [r0, #14]
 80093aa:	6183      	str	r3, [r0, #24]
 80093ac:	4619      	mov	r1, r3
 80093ae:	2208      	movs	r2, #8
 80093b0:	305c      	adds	r0, #92	@ 0x5c
 80093b2:	f000 f944 	bl	800963e <memset>
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <std+0x58>)
 80093b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <std+0x5c>)
 80093bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093be:	4b0d      	ldr	r3, [pc, #52]	@ (80093f4 <std+0x60>)
 80093c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093c2:	4b0d      	ldr	r3, [pc, #52]	@ (80093f8 <std+0x64>)
 80093c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80093c6:	4b0d      	ldr	r3, [pc, #52]	@ (80093fc <std+0x68>)
 80093c8:	6224      	str	r4, [r4, #32]
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d006      	beq.n	80093dc <std+0x48>
 80093ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093d2:	4294      	cmp	r4, r2
 80093d4:	d002      	beq.n	80093dc <std+0x48>
 80093d6:	33d0      	adds	r3, #208	@ 0xd0
 80093d8:	429c      	cmp	r4, r3
 80093da:	d105      	bne.n	80093e8 <std+0x54>
 80093dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e4:	f000 b9c6 	b.w	8009774 <__retarget_lock_init_recursive>
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	bf00      	nop
 80093ec:	08009585 	.word	0x08009585
 80093f0:	080095a7 	.word	0x080095a7
 80093f4:	080095df 	.word	0x080095df
 80093f8:	08009603 	.word	0x08009603
 80093fc:	20007108 	.word	0x20007108

08009400 <stdio_exit_handler>:
 8009400:	4a02      	ldr	r2, [pc, #8]	@ (800940c <stdio_exit_handler+0xc>)
 8009402:	4903      	ldr	r1, [pc, #12]	@ (8009410 <stdio_exit_handler+0x10>)
 8009404:	4803      	ldr	r0, [pc, #12]	@ (8009414 <stdio_exit_handler+0x14>)
 8009406:	f000 b869 	b.w	80094dc <_fwalk_sglue>
 800940a:	bf00      	nop
 800940c:	20000018 	.word	0x20000018
 8009410:	0800b0f5 	.word	0x0800b0f5
 8009414:	20000028 	.word	0x20000028

08009418 <cleanup_stdio>:
 8009418:	6841      	ldr	r1, [r0, #4]
 800941a:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <cleanup_stdio+0x34>)
 800941c:	4299      	cmp	r1, r3
 800941e:	b510      	push	{r4, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	d001      	beq.n	8009428 <cleanup_stdio+0x10>
 8009424:	f001 fe66 	bl	800b0f4 <_fflush_r>
 8009428:	68a1      	ldr	r1, [r4, #8]
 800942a:	4b09      	ldr	r3, [pc, #36]	@ (8009450 <cleanup_stdio+0x38>)
 800942c:	4299      	cmp	r1, r3
 800942e:	d002      	beq.n	8009436 <cleanup_stdio+0x1e>
 8009430:	4620      	mov	r0, r4
 8009432:	f001 fe5f 	bl	800b0f4 <_fflush_r>
 8009436:	68e1      	ldr	r1, [r4, #12]
 8009438:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <cleanup_stdio+0x3c>)
 800943a:	4299      	cmp	r1, r3
 800943c:	d004      	beq.n	8009448 <cleanup_stdio+0x30>
 800943e:	4620      	mov	r0, r4
 8009440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009444:	f001 be56 	b.w	800b0f4 <_fflush_r>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	bf00      	nop
 800944c:	20007108 	.word	0x20007108
 8009450:	20007170 	.word	0x20007170
 8009454:	200071d8 	.word	0x200071d8

08009458 <global_stdio_init.part.0>:
 8009458:	b510      	push	{r4, lr}
 800945a:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <global_stdio_init.part.0+0x30>)
 800945c:	4c0b      	ldr	r4, [pc, #44]	@ (800948c <global_stdio_init.part.0+0x34>)
 800945e:	4a0c      	ldr	r2, [pc, #48]	@ (8009490 <global_stdio_init.part.0+0x38>)
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	4620      	mov	r0, r4
 8009464:	2200      	movs	r2, #0
 8009466:	2104      	movs	r1, #4
 8009468:	f7ff ff94 	bl	8009394 <std>
 800946c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009470:	2201      	movs	r2, #1
 8009472:	2109      	movs	r1, #9
 8009474:	f7ff ff8e 	bl	8009394 <std>
 8009478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800947c:	2202      	movs	r2, #2
 800947e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009482:	2112      	movs	r1, #18
 8009484:	f7ff bf86 	b.w	8009394 <std>
 8009488:	20007240 	.word	0x20007240
 800948c:	20007108 	.word	0x20007108
 8009490:	08009401 	.word	0x08009401

08009494 <__sfp_lock_acquire>:
 8009494:	4801      	ldr	r0, [pc, #4]	@ (800949c <__sfp_lock_acquire+0x8>)
 8009496:	f000 b96e 	b.w	8009776 <__retarget_lock_acquire_recursive>
 800949a:	bf00      	nop
 800949c:	20007249 	.word	0x20007249

080094a0 <__sfp_lock_release>:
 80094a0:	4801      	ldr	r0, [pc, #4]	@ (80094a8 <__sfp_lock_release+0x8>)
 80094a2:	f000 b969 	b.w	8009778 <__retarget_lock_release_recursive>
 80094a6:	bf00      	nop
 80094a8:	20007249 	.word	0x20007249

080094ac <__sinit>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	f7ff fff0 	bl	8009494 <__sfp_lock_acquire>
 80094b4:	6a23      	ldr	r3, [r4, #32]
 80094b6:	b11b      	cbz	r3, 80094c0 <__sinit+0x14>
 80094b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094bc:	f7ff bff0 	b.w	80094a0 <__sfp_lock_release>
 80094c0:	4b04      	ldr	r3, [pc, #16]	@ (80094d4 <__sinit+0x28>)
 80094c2:	6223      	str	r3, [r4, #32]
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <__sinit+0x2c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1f5      	bne.n	80094b8 <__sinit+0xc>
 80094cc:	f7ff ffc4 	bl	8009458 <global_stdio_init.part.0>
 80094d0:	e7f2      	b.n	80094b8 <__sinit+0xc>
 80094d2:	bf00      	nop
 80094d4:	08009419 	.word	0x08009419
 80094d8:	20007240 	.word	0x20007240

080094dc <_fwalk_sglue>:
 80094dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e0:	4607      	mov	r7, r0
 80094e2:	4688      	mov	r8, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	2600      	movs	r6, #0
 80094e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094ec:	f1b9 0901 	subs.w	r9, r9, #1
 80094f0:	d505      	bpl.n	80094fe <_fwalk_sglue+0x22>
 80094f2:	6824      	ldr	r4, [r4, #0]
 80094f4:	2c00      	cmp	r4, #0
 80094f6:	d1f7      	bne.n	80094e8 <_fwalk_sglue+0xc>
 80094f8:	4630      	mov	r0, r6
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	89ab      	ldrh	r3, [r5, #12]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d907      	bls.n	8009514 <_fwalk_sglue+0x38>
 8009504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009508:	3301      	adds	r3, #1
 800950a:	d003      	beq.n	8009514 <_fwalk_sglue+0x38>
 800950c:	4629      	mov	r1, r5
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	4306      	orrs	r6, r0
 8009514:	3568      	adds	r5, #104	@ 0x68
 8009516:	e7e9      	b.n	80094ec <_fwalk_sglue+0x10>

08009518 <sniprintf>:
 8009518:	b40c      	push	{r2, r3}
 800951a:	b530      	push	{r4, r5, lr}
 800951c:	4b18      	ldr	r3, [pc, #96]	@ (8009580 <sniprintf+0x68>)
 800951e:	1e0c      	subs	r4, r1, #0
 8009520:	681d      	ldr	r5, [r3, #0]
 8009522:	b09d      	sub	sp, #116	@ 0x74
 8009524:	da08      	bge.n	8009538 <sniprintf+0x20>
 8009526:	238b      	movs	r3, #139	@ 0x8b
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	f04f 30ff 	mov.w	r0, #4294967295
 800952e:	b01d      	add	sp, #116	@ 0x74
 8009530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009534:	b002      	add	sp, #8
 8009536:	4770      	bx	lr
 8009538:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800953c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009546:	bf14      	ite	ne
 8009548:	f104 33ff 	addne.w	r3, r4, #4294967295
 800954c:	4623      	moveq	r3, r4
 800954e:	9304      	str	r3, [sp, #16]
 8009550:	9307      	str	r3, [sp, #28]
 8009552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009556:	9002      	str	r0, [sp, #8]
 8009558:	9006      	str	r0, [sp, #24]
 800955a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800955e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009560:	ab21      	add	r3, sp, #132	@ 0x84
 8009562:	a902      	add	r1, sp, #8
 8009564:	4628      	mov	r0, r5
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	f001 fc44 	bl	800adf4 <_svfiprintf_r>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	bfbc      	itt	lt
 8009570:	238b      	movlt	r3, #139	@ 0x8b
 8009572:	602b      	strlt	r3, [r5, #0]
 8009574:	2c00      	cmp	r4, #0
 8009576:	d0da      	beq.n	800952e <sniprintf+0x16>
 8009578:	9b02      	ldr	r3, [sp, #8]
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
 800957e:	e7d6      	b.n	800952e <sniprintf+0x16>
 8009580:	20000024 	.word	0x20000024

08009584 <__sread>:
 8009584:	b510      	push	{r4, lr}
 8009586:	460c      	mov	r4, r1
 8009588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958c:	f000 f8a4 	bl	80096d8 <_read_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	bfab      	itete	ge
 8009594:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009596:	89a3      	ldrhlt	r3, [r4, #12]
 8009598:	181b      	addge	r3, r3, r0
 800959a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800959e:	bfac      	ite	ge
 80095a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095a2:	81a3      	strhlt	r3, [r4, #12]
 80095a4:	bd10      	pop	{r4, pc}

080095a6 <__swrite>:
 80095a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095aa:	461f      	mov	r7, r3
 80095ac:	898b      	ldrh	r3, [r1, #12]
 80095ae:	05db      	lsls	r3, r3, #23
 80095b0:	4605      	mov	r5, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	4616      	mov	r6, r2
 80095b6:	d505      	bpl.n	80095c4 <__swrite+0x1e>
 80095b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095bc:	2302      	movs	r3, #2
 80095be:	2200      	movs	r2, #0
 80095c0:	f000 f878 	bl	80096b4 <_lseek_r>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	4632      	mov	r2, r6
 80095d2:	463b      	mov	r3, r7
 80095d4:	4628      	mov	r0, r5
 80095d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095da:	f000 b88f 	b.w	80096fc <_write_r>

080095de <__sseek>:
 80095de:	b510      	push	{r4, lr}
 80095e0:	460c      	mov	r4, r1
 80095e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e6:	f000 f865 	bl	80096b4 <_lseek_r>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	bf15      	itete	ne
 80095f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80095f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095fa:	81a3      	strheq	r3, [r4, #12]
 80095fc:	bf18      	it	ne
 80095fe:	81a3      	strhne	r3, [r4, #12]
 8009600:	bd10      	pop	{r4, pc}

08009602 <__sclose>:
 8009602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009606:	f000 b845 	b.w	8009694 <_close_r>

0800960a <memmove>:
 800960a:	4288      	cmp	r0, r1
 800960c:	b510      	push	{r4, lr}
 800960e:	eb01 0402 	add.w	r4, r1, r2
 8009612:	d902      	bls.n	800961a <memmove+0x10>
 8009614:	4284      	cmp	r4, r0
 8009616:	4623      	mov	r3, r4
 8009618:	d807      	bhi.n	800962a <memmove+0x20>
 800961a:	1e43      	subs	r3, r0, #1
 800961c:	42a1      	cmp	r1, r4
 800961e:	d008      	beq.n	8009632 <memmove+0x28>
 8009620:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009624:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009628:	e7f8      	b.n	800961c <memmove+0x12>
 800962a:	4402      	add	r2, r0
 800962c:	4601      	mov	r1, r0
 800962e:	428a      	cmp	r2, r1
 8009630:	d100      	bne.n	8009634 <memmove+0x2a>
 8009632:	bd10      	pop	{r4, pc}
 8009634:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009638:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800963c:	e7f7      	b.n	800962e <memmove+0x24>

0800963e <memset>:
 800963e:	4402      	add	r2, r0
 8009640:	4603      	mov	r3, r0
 8009642:	4293      	cmp	r3, r2
 8009644:	d100      	bne.n	8009648 <memset+0xa>
 8009646:	4770      	bx	lr
 8009648:	f803 1b01 	strb.w	r1, [r3], #1
 800964c:	e7f9      	b.n	8009642 <memset+0x4>

0800964e <strchr>:
 800964e:	b2c9      	uxtb	r1, r1
 8009650:	4603      	mov	r3, r0
 8009652:	4618      	mov	r0, r3
 8009654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009658:	b112      	cbz	r2, 8009660 <strchr+0x12>
 800965a:	428a      	cmp	r2, r1
 800965c:	d1f9      	bne.n	8009652 <strchr+0x4>
 800965e:	4770      	bx	lr
 8009660:	2900      	cmp	r1, #0
 8009662:	bf18      	it	ne
 8009664:	2000      	movne	r0, #0
 8009666:	4770      	bx	lr

08009668 <strncmp>:
 8009668:	b510      	push	{r4, lr}
 800966a:	b16a      	cbz	r2, 8009688 <strncmp+0x20>
 800966c:	3901      	subs	r1, #1
 800966e:	1884      	adds	r4, r0, r2
 8009670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009674:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009678:	429a      	cmp	r2, r3
 800967a:	d103      	bne.n	8009684 <strncmp+0x1c>
 800967c:	42a0      	cmp	r0, r4
 800967e:	d001      	beq.n	8009684 <strncmp+0x1c>
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1f5      	bne.n	8009670 <strncmp+0x8>
 8009684:	1ad0      	subs	r0, r2, r3
 8009686:	bd10      	pop	{r4, pc}
 8009688:	4610      	mov	r0, r2
 800968a:	e7fc      	b.n	8009686 <strncmp+0x1e>

0800968c <_localeconv_r>:
 800968c:	4800      	ldr	r0, [pc, #0]	@ (8009690 <_localeconv_r+0x4>)
 800968e:	4770      	bx	lr
 8009690:	20000164 	.word	0x20000164

08009694 <_close_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d06      	ldr	r5, [pc, #24]	@ (80096b0 <_close_r+0x1c>)
 8009698:	2300      	movs	r3, #0
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	602b      	str	r3, [r5, #0]
 80096a0:	f7f8 fe6e 	bl	8002380 <_close>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_close_r+0x1a>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_close_r+0x1a>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20007244 	.word	0x20007244

080096b4 <_lseek_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	@ (80096d4 <_lseek_r+0x20>)
 80096b8:	4604      	mov	r4, r0
 80096ba:	4608      	mov	r0, r1
 80096bc:	4611      	mov	r1, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f8 fe83 	bl	80023ce <_lseek>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_lseek_r+0x1e>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_lseek_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20007244 	.word	0x20007244

080096d8 <_read_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4d07      	ldr	r5, [pc, #28]	@ (80096f8 <_read_r+0x20>)
 80096dc:	4604      	mov	r4, r0
 80096de:	4608      	mov	r0, r1
 80096e0:	4611      	mov	r1, r2
 80096e2:	2200      	movs	r2, #0
 80096e4:	602a      	str	r2, [r5, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f7f8 fe11 	bl	800230e <_read>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_read_r+0x1e>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_read_r+0x1e>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	20007244 	.word	0x20007244

080096fc <_write_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d07      	ldr	r5, [pc, #28]	@ (800971c <_write_r+0x20>)
 8009700:	4604      	mov	r4, r0
 8009702:	4608      	mov	r0, r1
 8009704:	4611      	mov	r1, r2
 8009706:	2200      	movs	r2, #0
 8009708:	602a      	str	r2, [r5, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	f7f8 fe1c 	bl	8002348 <_write>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_write_r+0x1e>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	b103      	cbz	r3, 800971a <_write_r+0x1e>
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	20007244 	.word	0x20007244

08009720 <__errno>:
 8009720:	4b01      	ldr	r3, [pc, #4]	@ (8009728 <__errno+0x8>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000024 	.word	0x20000024

0800972c <__libc_init_array>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4d0d      	ldr	r5, [pc, #52]	@ (8009764 <__libc_init_array+0x38>)
 8009730:	4c0d      	ldr	r4, [pc, #52]	@ (8009768 <__libc_init_array+0x3c>)
 8009732:	1b64      	subs	r4, r4, r5
 8009734:	10a4      	asrs	r4, r4, #2
 8009736:	2600      	movs	r6, #0
 8009738:	42a6      	cmp	r6, r4
 800973a:	d109      	bne.n	8009750 <__libc_init_array+0x24>
 800973c:	4d0b      	ldr	r5, [pc, #44]	@ (800976c <__libc_init_array+0x40>)
 800973e:	4c0c      	ldr	r4, [pc, #48]	@ (8009770 <__libc_init_array+0x44>)
 8009740:	f002 f84e 	bl	800b7e0 <_init>
 8009744:	1b64      	subs	r4, r4, r5
 8009746:	10a4      	asrs	r4, r4, #2
 8009748:	2600      	movs	r6, #0
 800974a:	42a6      	cmp	r6, r4
 800974c:	d105      	bne.n	800975a <__libc_init_array+0x2e>
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	f855 3b04 	ldr.w	r3, [r5], #4
 8009754:	4798      	blx	r3
 8009756:	3601      	adds	r6, #1
 8009758:	e7ee      	b.n	8009738 <__libc_init_array+0xc>
 800975a:	f855 3b04 	ldr.w	r3, [r5], #4
 800975e:	4798      	blx	r3
 8009760:	3601      	adds	r6, #1
 8009762:	e7f2      	b.n	800974a <__libc_init_array+0x1e>
 8009764:	0800c948 	.word	0x0800c948
 8009768:	0800c948 	.word	0x0800c948
 800976c:	0800c948 	.word	0x0800c948
 8009770:	0800c94c 	.word	0x0800c94c

08009774 <__retarget_lock_init_recursive>:
 8009774:	4770      	bx	lr

08009776 <__retarget_lock_acquire_recursive>:
 8009776:	4770      	bx	lr

08009778 <__retarget_lock_release_recursive>:
 8009778:	4770      	bx	lr

0800977a <memcpy>:
 800977a:	440a      	add	r2, r1
 800977c:	4291      	cmp	r1, r2
 800977e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009782:	d100      	bne.n	8009786 <memcpy+0xc>
 8009784:	4770      	bx	lr
 8009786:	b510      	push	{r4, lr}
 8009788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009790:	4291      	cmp	r1, r2
 8009792:	d1f9      	bne.n	8009788 <memcpy+0xe>
 8009794:	bd10      	pop	{r4, pc}

08009796 <quorem>:
 8009796:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	6903      	ldr	r3, [r0, #16]
 800979c:	690c      	ldr	r4, [r1, #16]
 800979e:	42a3      	cmp	r3, r4
 80097a0:	4607      	mov	r7, r0
 80097a2:	db7e      	blt.n	80098a2 <quorem+0x10c>
 80097a4:	3c01      	subs	r4, #1
 80097a6:	f101 0814 	add.w	r8, r1, #20
 80097aa:	00a3      	lsls	r3, r4, #2
 80097ac:	f100 0514 	add.w	r5, r0, #20
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097c0:	3301      	adds	r3, #1
 80097c2:	429a      	cmp	r2, r3
 80097c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80097cc:	d32e      	bcc.n	800982c <quorem+0x96>
 80097ce:	f04f 0a00 	mov.w	sl, #0
 80097d2:	46c4      	mov	ip, r8
 80097d4:	46ae      	mov	lr, r5
 80097d6:	46d3      	mov	fp, sl
 80097d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097dc:	b298      	uxth	r0, r3
 80097de:	fb06 a000 	mla	r0, r6, r0, sl
 80097e2:	0c02      	lsrs	r2, r0, #16
 80097e4:	0c1b      	lsrs	r3, r3, #16
 80097e6:	fb06 2303 	mla	r3, r6, r3, r2
 80097ea:	f8de 2000 	ldr.w	r2, [lr]
 80097ee:	b280      	uxth	r0, r0
 80097f0:	b292      	uxth	r2, r2
 80097f2:	1a12      	subs	r2, r2, r0
 80097f4:	445a      	add	r2, fp
 80097f6:	f8de 0000 	ldr.w	r0, [lr]
 80097fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097fe:	b29b      	uxth	r3, r3
 8009800:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009804:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009808:	b292      	uxth	r2, r2
 800980a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800980e:	45e1      	cmp	r9, ip
 8009810:	f84e 2b04 	str.w	r2, [lr], #4
 8009814:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009818:	d2de      	bcs.n	80097d8 <quorem+0x42>
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	58eb      	ldr	r3, [r5, r3]
 800981e:	b92b      	cbnz	r3, 800982c <quorem+0x96>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	3b04      	subs	r3, #4
 8009824:	429d      	cmp	r5, r3
 8009826:	461a      	mov	r2, r3
 8009828:	d32f      	bcc.n	800988a <quorem+0xf4>
 800982a:	613c      	str	r4, [r7, #16]
 800982c:	4638      	mov	r0, r7
 800982e:	f001 f97d 	bl	800ab2c <__mcmp>
 8009832:	2800      	cmp	r0, #0
 8009834:	db25      	blt.n	8009882 <quorem+0xec>
 8009836:	4629      	mov	r1, r5
 8009838:	2000      	movs	r0, #0
 800983a:	f858 2b04 	ldr.w	r2, [r8], #4
 800983e:	f8d1 c000 	ldr.w	ip, [r1]
 8009842:	fa1f fe82 	uxth.w	lr, r2
 8009846:	fa1f f38c 	uxth.w	r3, ip
 800984a:	eba3 030e 	sub.w	r3, r3, lr
 800984e:	4403      	add	r3, r0
 8009850:	0c12      	lsrs	r2, r2, #16
 8009852:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009856:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800985a:	b29b      	uxth	r3, r3
 800985c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009860:	45c1      	cmp	r9, r8
 8009862:	f841 3b04 	str.w	r3, [r1], #4
 8009866:	ea4f 4022 	mov.w	r0, r2, asr #16
 800986a:	d2e6      	bcs.n	800983a <quorem+0xa4>
 800986c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009874:	b922      	cbnz	r2, 8009880 <quorem+0xea>
 8009876:	3b04      	subs	r3, #4
 8009878:	429d      	cmp	r5, r3
 800987a:	461a      	mov	r2, r3
 800987c:	d30b      	bcc.n	8009896 <quorem+0x100>
 800987e:	613c      	str	r4, [r7, #16]
 8009880:	3601      	adds	r6, #1
 8009882:	4630      	mov	r0, r6
 8009884:	b003      	add	sp, #12
 8009886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988a:	6812      	ldr	r2, [r2, #0]
 800988c:	3b04      	subs	r3, #4
 800988e:	2a00      	cmp	r2, #0
 8009890:	d1cb      	bne.n	800982a <quorem+0x94>
 8009892:	3c01      	subs	r4, #1
 8009894:	e7c6      	b.n	8009824 <quorem+0x8e>
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	3b04      	subs	r3, #4
 800989a:	2a00      	cmp	r2, #0
 800989c:	d1ef      	bne.n	800987e <quorem+0xe8>
 800989e:	3c01      	subs	r4, #1
 80098a0:	e7ea      	b.n	8009878 <quorem+0xe2>
 80098a2:	2000      	movs	r0, #0
 80098a4:	e7ee      	b.n	8009884 <quorem+0xee>
	...

080098a8 <_dtoa_r>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	69c7      	ldr	r7, [r0, #28]
 80098ae:	b097      	sub	sp, #92	@ 0x5c
 80098b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80098b4:	ec55 4b10 	vmov	r4, r5, d0
 80098b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80098ba:	9107      	str	r1, [sp, #28]
 80098bc:	4681      	mov	r9, r0
 80098be:	920c      	str	r2, [sp, #48]	@ 0x30
 80098c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80098c2:	b97f      	cbnz	r7, 80098e4 <_dtoa_r+0x3c>
 80098c4:	2010      	movs	r0, #16
 80098c6:	f000 fe09 	bl	800a4dc <malloc>
 80098ca:	4602      	mov	r2, r0
 80098cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80098d0:	b920      	cbnz	r0, 80098dc <_dtoa_r+0x34>
 80098d2:	4ba9      	ldr	r3, [pc, #676]	@ (8009b78 <_dtoa_r+0x2d0>)
 80098d4:	21ef      	movs	r1, #239	@ 0xef
 80098d6:	48a9      	ldr	r0, [pc, #676]	@ (8009b7c <_dtoa_r+0x2d4>)
 80098d8:	f001 fc44 	bl	800b164 <__assert_func>
 80098dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80098e0:	6007      	str	r7, [r0, #0]
 80098e2:	60c7      	str	r7, [r0, #12]
 80098e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098e8:	6819      	ldr	r1, [r3, #0]
 80098ea:	b159      	cbz	r1, 8009904 <_dtoa_r+0x5c>
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	604a      	str	r2, [r1, #4]
 80098f0:	2301      	movs	r3, #1
 80098f2:	4093      	lsls	r3, r2
 80098f4:	608b      	str	r3, [r1, #8]
 80098f6:	4648      	mov	r0, r9
 80098f8:	f000 fee6 	bl	800a6c8 <_Bfree>
 80098fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	1e2b      	subs	r3, r5, #0
 8009906:	bfb9      	ittee	lt
 8009908:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800990c:	9305      	strlt	r3, [sp, #20]
 800990e:	2300      	movge	r3, #0
 8009910:	6033      	strge	r3, [r6, #0]
 8009912:	9f05      	ldr	r7, [sp, #20]
 8009914:	4b9a      	ldr	r3, [pc, #616]	@ (8009b80 <_dtoa_r+0x2d8>)
 8009916:	bfbc      	itt	lt
 8009918:	2201      	movlt	r2, #1
 800991a:	6032      	strlt	r2, [r6, #0]
 800991c:	43bb      	bics	r3, r7
 800991e:	d112      	bne.n	8009946 <_dtoa_r+0x9e>
 8009920:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009922:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800992c:	4323      	orrs	r3, r4
 800992e:	f000 855a 	beq.w	800a3e6 <_dtoa_r+0xb3e>
 8009932:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009934:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009b94 <_dtoa_r+0x2ec>
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 855c 	beq.w	800a3f6 <_dtoa_r+0xb4e>
 800993e:	f10a 0303 	add.w	r3, sl, #3
 8009942:	f000 bd56 	b.w	800a3f2 <_dtoa_r+0xb4a>
 8009946:	ed9d 7b04 	vldr	d7, [sp, #16]
 800994a:	2200      	movs	r2, #0
 800994c:	ec51 0b17 	vmov	r0, r1, d7
 8009950:	2300      	movs	r3, #0
 8009952:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009956:	f7f7 f8d7 	bl	8000b08 <__aeabi_dcmpeq>
 800995a:	4680      	mov	r8, r0
 800995c:	b158      	cbz	r0, 8009976 <_dtoa_r+0xce>
 800995e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009960:	2301      	movs	r3, #1
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009966:	b113      	cbz	r3, 800996e <_dtoa_r+0xc6>
 8009968:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800996a:	4b86      	ldr	r3, [pc, #536]	@ (8009b84 <_dtoa_r+0x2dc>)
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009b98 <_dtoa_r+0x2f0>
 8009972:	f000 bd40 	b.w	800a3f6 <_dtoa_r+0xb4e>
 8009976:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800997a:	aa14      	add	r2, sp, #80	@ 0x50
 800997c:	a915      	add	r1, sp, #84	@ 0x54
 800997e:	4648      	mov	r0, r9
 8009980:	f001 f984 	bl	800ac8c <__d2b>
 8009984:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009988:	9002      	str	r0, [sp, #8]
 800998a:	2e00      	cmp	r6, #0
 800998c:	d078      	beq.n	8009a80 <_dtoa_r+0x1d8>
 800998e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009990:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800999c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80099a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80099a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80099a8:	4619      	mov	r1, r3
 80099aa:	2200      	movs	r2, #0
 80099ac:	4b76      	ldr	r3, [pc, #472]	@ (8009b88 <_dtoa_r+0x2e0>)
 80099ae:	f7f6 fc8b 	bl	80002c8 <__aeabi_dsub>
 80099b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009b60 <_dtoa_r+0x2b8>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fe3e 	bl	8000638 <__aeabi_dmul>
 80099bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009b68 <_dtoa_r+0x2c0>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fc83 	bl	80002cc <__adddf3>
 80099c6:	4604      	mov	r4, r0
 80099c8:	4630      	mov	r0, r6
 80099ca:	460d      	mov	r5, r1
 80099cc:	f7f6 fdca 	bl	8000564 <__aeabi_i2d>
 80099d0:	a367      	add	r3, pc, #412	@ (adr r3, 8009b70 <_dtoa_r+0x2c8>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fe2f 	bl	8000638 <__aeabi_dmul>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f6 fc73 	bl	80002cc <__adddf3>
 80099e6:	4604      	mov	r4, r0
 80099e8:	460d      	mov	r5, r1
 80099ea:	f7f7 f8d5 	bl	8000b98 <__aeabi_d2iz>
 80099ee:	2200      	movs	r2, #0
 80099f0:	4607      	mov	r7, r0
 80099f2:	2300      	movs	r3, #0
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f7 f890 	bl	8000b1c <__aeabi_dcmplt>
 80099fc:	b140      	cbz	r0, 8009a10 <_dtoa_r+0x168>
 80099fe:	4638      	mov	r0, r7
 8009a00:	f7f6 fdb0 	bl	8000564 <__aeabi_i2d>
 8009a04:	4622      	mov	r2, r4
 8009a06:	462b      	mov	r3, r5
 8009a08:	f7f7 f87e 	bl	8000b08 <__aeabi_dcmpeq>
 8009a0c:	b900      	cbnz	r0, 8009a10 <_dtoa_r+0x168>
 8009a0e:	3f01      	subs	r7, #1
 8009a10:	2f16      	cmp	r7, #22
 8009a12:	d852      	bhi.n	8009aba <_dtoa_r+0x212>
 8009a14:	4b5d      	ldr	r3, [pc, #372]	@ (8009b8c <_dtoa_r+0x2e4>)
 8009a16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a22:	f7f7 f87b 	bl	8000b1c <__aeabi_dcmplt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d049      	beq.n	8009abe <_dtoa_r+0x216>
 8009a2a:	3f01      	subs	r7, #1
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a32:	1b9b      	subs	r3, r3, r6
 8009a34:	1e5a      	subs	r2, r3, #1
 8009a36:	bf45      	ittet	mi
 8009a38:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a3c:	9300      	strmi	r3, [sp, #0]
 8009a3e:	2300      	movpl	r3, #0
 8009a40:	2300      	movmi	r3, #0
 8009a42:	9206      	str	r2, [sp, #24]
 8009a44:	bf54      	ite	pl
 8009a46:	9300      	strpl	r3, [sp, #0]
 8009a48:	9306      	strmi	r3, [sp, #24]
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	db39      	blt.n	8009ac2 <_dtoa_r+0x21a>
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	970d      	str	r7, [sp, #52]	@ 0x34
 8009a52:	443b      	add	r3, r7
 8009a54:	9306      	str	r3, [sp, #24]
 8009a56:	2300      	movs	r3, #0
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	9b07      	ldr	r3, [sp, #28]
 8009a5c:	2b09      	cmp	r3, #9
 8009a5e:	d863      	bhi.n	8009b28 <_dtoa_r+0x280>
 8009a60:	2b05      	cmp	r3, #5
 8009a62:	bfc4      	itt	gt
 8009a64:	3b04      	subgt	r3, #4
 8009a66:	9307      	strgt	r3, [sp, #28]
 8009a68:	9b07      	ldr	r3, [sp, #28]
 8009a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8009a6e:	bfcc      	ite	gt
 8009a70:	2400      	movgt	r4, #0
 8009a72:	2401      	movle	r4, #1
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d863      	bhi.n	8009b40 <_dtoa_r+0x298>
 8009a78:	e8df f003 	tbb	[pc, r3]
 8009a7c:	2b375452 	.word	0x2b375452
 8009a80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009a84:	441e      	add	r6, r3
 8009a86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	bfc1      	itttt	gt
 8009a8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a92:	409f      	lslgt	r7, r3
 8009a94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a9c:	bfd6      	itet	le
 8009a9e:	f1c3 0320 	rsble	r3, r3, #32
 8009aa2:	ea47 0003 	orrgt.w	r0, r7, r3
 8009aa6:	fa04 f003 	lslle.w	r0, r4, r3
 8009aaa:	f7f6 fd4b 	bl	8000544 <__aeabi_ui2d>
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ab4:	3e01      	subs	r6, #1
 8009ab6:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ab8:	e776      	b.n	80099a8 <_dtoa_r+0x100>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7b7      	b.n	8009a2e <_dtoa_r+0x186>
 8009abe:	9010      	str	r0, [sp, #64]	@ 0x40
 8009ac0:	e7b6      	b.n	8009a30 <_dtoa_r+0x188>
 8009ac2:	9b00      	ldr	r3, [sp, #0]
 8009ac4:	1bdb      	subs	r3, r3, r7
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	427b      	negs	r3, r7
 8009aca:	9308      	str	r3, [sp, #32]
 8009acc:	2300      	movs	r3, #0
 8009ace:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ad0:	e7c3      	b.n	8009a5a <_dtoa_r+0x1b2>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ad8:	eb07 0b03 	add.w	fp, r7, r3
 8009adc:	f10b 0301 	add.w	r3, fp, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	9303      	str	r3, [sp, #12]
 8009ae4:	bfb8      	it	lt
 8009ae6:	2301      	movlt	r3, #1
 8009ae8:	e006      	b.n	8009af8 <_dtoa_r+0x250>
 8009aea:	2301      	movs	r3, #1
 8009aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dd28      	ble.n	8009b46 <_dtoa_r+0x29e>
 8009af4:	469b      	mov	fp, r3
 8009af6:	9303      	str	r3, [sp, #12]
 8009af8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009afc:	2100      	movs	r1, #0
 8009afe:	2204      	movs	r2, #4
 8009b00:	f102 0514 	add.w	r5, r2, #20
 8009b04:	429d      	cmp	r5, r3
 8009b06:	d926      	bls.n	8009b56 <_dtoa_r+0x2ae>
 8009b08:	6041      	str	r1, [r0, #4]
 8009b0a:	4648      	mov	r0, r9
 8009b0c:	f000 fd9c 	bl	800a648 <_Balloc>
 8009b10:	4682      	mov	sl, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d142      	bne.n	8009b9c <_dtoa_r+0x2f4>
 8009b16:	4b1e      	ldr	r3, [pc, #120]	@ (8009b90 <_dtoa_r+0x2e8>)
 8009b18:	4602      	mov	r2, r0
 8009b1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b1e:	e6da      	b.n	80098d6 <_dtoa_r+0x2e>
 8009b20:	2300      	movs	r3, #0
 8009b22:	e7e3      	b.n	8009aec <_dtoa_r+0x244>
 8009b24:	2300      	movs	r3, #0
 8009b26:	e7d5      	b.n	8009ad4 <_dtoa_r+0x22c>
 8009b28:	2401      	movs	r4, #1
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9307      	str	r3, [sp, #28]
 8009b2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009b30:	f04f 3bff 	mov.w	fp, #4294967295
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b3a:	2312      	movs	r3, #18
 8009b3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b3e:	e7db      	b.n	8009af8 <_dtoa_r+0x250>
 8009b40:	2301      	movs	r3, #1
 8009b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b44:	e7f4      	b.n	8009b30 <_dtoa_r+0x288>
 8009b46:	f04f 0b01 	mov.w	fp, #1
 8009b4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b4e:	465b      	mov	r3, fp
 8009b50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009b54:	e7d0      	b.n	8009af8 <_dtoa_r+0x250>
 8009b56:	3101      	adds	r1, #1
 8009b58:	0052      	lsls	r2, r2, #1
 8009b5a:	e7d1      	b.n	8009b00 <_dtoa_r+0x258>
 8009b5c:	f3af 8000 	nop.w
 8009b60:	636f4361 	.word	0x636f4361
 8009b64:	3fd287a7 	.word	0x3fd287a7
 8009b68:	8b60c8b3 	.word	0x8b60c8b3
 8009b6c:	3fc68a28 	.word	0x3fc68a28
 8009b70:	509f79fb 	.word	0x509f79fb
 8009b74:	3fd34413 	.word	0x3fd34413
 8009b78:	0800c712 	.word	0x0800c712
 8009b7c:	0800c729 	.word	0x0800c729
 8009b80:	7ff00000 	.word	0x7ff00000
 8009b84:	0800c6e2 	.word	0x0800c6e2
 8009b88:	3ff80000 	.word	0x3ff80000
 8009b8c:	0800c878 	.word	0x0800c878
 8009b90:	0800c781 	.word	0x0800c781
 8009b94:	0800c70e 	.word	0x0800c70e
 8009b98:	0800c6e1 	.word	0x0800c6e1
 8009b9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ba0:	6018      	str	r0, [r3, #0]
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	2b0e      	cmp	r3, #14
 8009ba6:	f200 80a1 	bhi.w	8009cec <_dtoa_r+0x444>
 8009baa:	2c00      	cmp	r4, #0
 8009bac:	f000 809e 	beq.w	8009cec <_dtoa_r+0x444>
 8009bb0:	2f00      	cmp	r7, #0
 8009bb2:	dd33      	ble.n	8009c1c <_dtoa_r+0x374>
 8009bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8009e28 <_dtoa_r+0x580>)
 8009bb6:	f007 020f 	and.w	r2, r7, #15
 8009bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bbe:	ed93 7b00 	vldr	d7, [r3]
 8009bc2:	05f8      	lsls	r0, r7, #23
 8009bc4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009bc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009bcc:	d516      	bpl.n	8009bfc <_dtoa_r+0x354>
 8009bce:	4b97      	ldr	r3, [pc, #604]	@ (8009e2c <_dtoa_r+0x584>)
 8009bd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bd8:	f7f6 fe58 	bl	800088c <__aeabi_ddiv>
 8009bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009be0:	f004 040f 	and.w	r4, r4, #15
 8009be4:	2603      	movs	r6, #3
 8009be6:	4d91      	ldr	r5, [pc, #580]	@ (8009e2c <_dtoa_r+0x584>)
 8009be8:	b954      	cbnz	r4, 8009c00 <_dtoa_r+0x358>
 8009bea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bf2:	f7f6 fe4b 	bl	800088c <__aeabi_ddiv>
 8009bf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bfa:	e028      	b.n	8009c4e <_dtoa_r+0x3a6>
 8009bfc:	2602      	movs	r6, #2
 8009bfe:	e7f2      	b.n	8009be6 <_dtoa_r+0x33e>
 8009c00:	07e1      	lsls	r1, r4, #31
 8009c02:	d508      	bpl.n	8009c16 <_dtoa_r+0x36e>
 8009c04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c0c:	f7f6 fd14 	bl	8000638 <__aeabi_dmul>
 8009c10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c14:	3601      	adds	r6, #1
 8009c16:	1064      	asrs	r4, r4, #1
 8009c18:	3508      	adds	r5, #8
 8009c1a:	e7e5      	b.n	8009be8 <_dtoa_r+0x340>
 8009c1c:	f000 80af 	beq.w	8009d7e <_dtoa_r+0x4d6>
 8009c20:	427c      	negs	r4, r7
 8009c22:	4b81      	ldr	r3, [pc, #516]	@ (8009e28 <_dtoa_r+0x580>)
 8009c24:	4d81      	ldr	r5, [pc, #516]	@ (8009e2c <_dtoa_r+0x584>)
 8009c26:	f004 020f 	and.w	r2, r4, #15
 8009c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c36:	f7f6 fcff 	bl	8000638 <__aeabi_dmul>
 8009c3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c3e:	1124      	asrs	r4, r4, #4
 8009c40:	2300      	movs	r3, #0
 8009c42:	2602      	movs	r6, #2
 8009c44:	2c00      	cmp	r4, #0
 8009c46:	f040 808f 	bne.w	8009d68 <_dtoa_r+0x4c0>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1d3      	bne.n	8009bf6 <_dtoa_r+0x34e>
 8009c4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 8094 	beq.w	8009d82 <_dtoa_r+0x4da>
 8009c5a:	4b75      	ldr	r3, [pc, #468]	@ (8009e30 <_dtoa_r+0x588>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7f6 ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f000 808b 	beq.w	8009d82 <_dtoa_r+0x4da>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8087 	beq.w	8009d82 <_dtoa_r+0x4da>
 8009c74:	f1bb 0f00 	cmp.w	fp, #0
 8009c78:	dd34      	ble.n	8009ce4 <_dtoa_r+0x43c>
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8009e34 <_dtoa_r+0x58c>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 fcd9 	bl	8000638 <__aeabi_dmul>
 8009c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c8a:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c8e:	3601      	adds	r6, #1
 8009c90:	465c      	mov	r4, fp
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7f6 fc66 	bl	8000564 <__aeabi_i2d>
 8009c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c9c:	f7f6 fccc 	bl	8000638 <__aeabi_dmul>
 8009ca0:	4b65      	ldr	r3, [pc, #404]	@ (8009e38 <_dtoa_r+0x590>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f7f6 fb12 	bl	80002cc <__adddf3>
 8009ca8:	4605      	mov	r5, r0
 8009caa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d16a      	bne.n	8009d88 <_dtoa_r+0x4e0>
 8009cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cb6:	4b61      	ldr	r3, [pc, #388]	@ (8009e3c <_dtoa_r+0x594>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f7f6 fb05 	bl	80002c8 <__aeabi_dsub>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	4633      	mov	r3, r6
 8009cca:	f7f6 ff45 	bl	8000b58 <__aeabi_dcmpgt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f040 8298 	bne.w	800a204 <_dtoa_r+0x95c>
 8009cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cd8:	462a      	mov	r2, r5
 8009cda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cde:	f7f6 ff1d 	bl	8000b1c <__aeabi_dcmplt>
 8009ce2:	bb38      	cbnz	r0, 8009d34 <_dtoa_r+0x48c>
 8009ce4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009ce8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f2c0 8157 	blt.w	8009fa2 <_dtoa_r+0x6fa>
 8009cf4:	2f0e      	cmp	r7, #14
 8009cf6:	f300 8154 	bgt.w	8009fa2 <_dtoa_r+0x6fa>
 8009cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8009e28 <_dtoa_r+0x580>)
 8009cfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d00:	ed93 7b00 	vldr	d7, [r3]
 8009d04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	ed8d 7b00 	vstr	d7, [sp]
 8009d0c:	f280 80e5 	bge.w	8009eda <_dtoa_r+0x632>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f300 80e1 	bgt.w	8009eda <_dtoa_r+0x632>
 8009d18:	d10c      	bne.n	8009d34 <_dtoa_r+0x48c>
 8009d1a:	4b48      	ldr	r3, [pc, #288]	@ (8009e3c <_dtoa_r+0x594>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	ec51 0b17 	vmov	r0, r1, d7
 8009d22:	f7f6 fc89 	bl	8000638 <__aeabi_dmul>
 8009d26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d2a:	f7f6 ff0b 	bl	8000b44 <__aeabi_dcmpge>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f000 8266 	beq.w	800a200 <_dtoa_r+0x958>
 8009d34:	2400      	movs	r4, #0
 8009d36:	4625      	mov	r5, r4
 8009d38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d3a:	4656      	mov	r6, sl
 8009d3c:	ea6f 0803 	mvn.w	r8, r3
 8009d40:	2700      	movs	r7, #0
 8009d42:	4621      	mov	r1, r4
 8009d44:	4648      	mov	r0, r9
 8009d46:	f000 fcbf 	bl	800a6c8 <_Bfree>
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	f000 80bd 	beq.w	8009eca <_dtoa_r+0x622>
 8009d50:	b12f      	cbz	r7, 8009d5e <_dtoa_r+0x4b6>
 8009d52:	42af      	cmp	r7, r5
 8009d54:	d003      	beq.n	8009d5e <_dtoa_r+0x4b6>
 8009d56:	4639      	mov	r1, r7
 8009d58:	4648      	mov	r0, r9
 8009d5a:	f000 fcb5 	bl	800a6c8 <_Bfree>
 8009d5e:	4629      	mov	r1, r5
 8009d60:	4648      	mov	r0, r9
 8009d62:	f000 fcb1 	bl	800a6c8 <_Bfree>
 8009d66:	e0b0      	b.n	8009eca <_dtoa_r+0x622>
 8009d68:	07e2      	lsls	r2, r4, #31
 8009d6a:	d505      	bpl.n	8009d78 <_dtoa_r+0x4d0>
 8009d6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d70:	f7f6 fc62 	bl	8000638 <__aeabi_dmul>
 8009d74:	3601      	adds	r6, #1
 8009d76:	2301      	movs	r3, #1
 8009d78:	1064      	asrs	r4, r4, #1
 8009d7a:	3508      	adds	r5, #8
 8009d7c:	e762      	b.n	8009c44 <_dtoa_r+0x39c>
 8009d7e:	2602      	movs	r6, #2
 8009d80:	e765      	b.n	8009c4e <_dtoa_r+0x3a6>
 8009d82:	9c03      	ldr	r4, [sp, #12]
 8009d84:	46b8      	mov	r8, r7
 8009d86:	e784      	b.n	8009c92 <_dtoa_r+0x3ea>
 8009d88:	4b27      	ldr	r3, [pc, #156]	@ (8009e28 <_dtoa_r+0x580>)
 8009d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d94:	4454      	add	r4, sl
 8009d96:	2900      	cmp	r1, #0
 8009d98:	d054      	beq.n	8009e44 <_dtoa_r+0x59c>
 8009d9a:	4929      	ldr	r1, [pc, #164]	@ (8009e40 <_dtoa_r+0x598>)
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	f7f6 fd75 	bl	800088c <__aeabi_ddiv>
 8009da2:	4633      	mov	r3, r6
 8009da4:	462a      	mov	r2, r5
 8009da6:	f7f6 fa8f 	bl	80002c8 <__aeabi_dsub>
 8009daa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009dae:	4656      	mov	r6, sl
 8009db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009db4:	f7f6 fef0 	bl	8000b98 <__aeabi_d2iz>
 8009db8:	4605      	mov	r5, r0
 8009dba:	f7f6 fbd3 	bl	8000564 <__aeabi_i2d>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc6:	f7f6 fa7f 	bl	80002c8 <__aeabi_dsub>
 8009dca:	3530      	adds	r5, #48	@ 0x30
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009dd4:	f806 5b01 	strb.w	r5, [r6], #1
 8009dd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ddc:	f7f6 fe9e 	bl	8000b1c <__aeabi_dcmplt>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d172      	bne.n	8009eca <_dtoa_r+0x622>
 8009de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de8:	4911      	ldr	r1, [pc, #68]	@ (8009e30 <_dtoa_r+0x588>)
 8009dea:	2000      	movs	r0, #0
 8009dec:	f7f6 fa6c 	bl	80002c8 <__aeabi_dsub>
 8009df0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009df4:	f7f6 fe92 	bl	8000b1c <__aeabi_dcmplt>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	f040 80b4 	bne.w	8009f66 <_dtoa_r+0x6be>
 8009dfe:	42a6      	cmp	r6, r4
 8009e00:	f43f af70 	beq.w	8009ce4 <_dtoa_r+0x43c>
 8009e04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e08:	4b0a      	ldr	r3, [pc, #40]	@ (8009e34 <_dtoa_r+0x58c>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f7f6 fc14 	bl	8000638 <__aeabi_dmul>
 8009e10:	4b08      	ldr	r3, [pc, #32]	@ (8009e34 <_dtoa_r+0x58c>)
 8009e12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e16:	2200      	movs	r2, #0
 8009e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e1c:	f7f6 fc0c 	bl	8000638 <__aeabi_dmul>
 8009e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e24:	e7c4      	b.n	8009db0 <_dtoa_r+0x508>
 8009e26:	bf00      	nop
 8009e28:	0800c878 	.word	0x0800c878
 8009e2c:	0800c850 	.word	0x0800c850
 8009e30:	3ff00000 	.word	0x3ff00000
 8009e34:	40240000 	.word	0x40240000
 8009e38:	401c0000 	.word	0x401c0000
 8009e3c:	40140000 	.word	0x40140000
 8009e40:	3fe00000 	.word	0x3fe00000
 8009e44:	4631      	mov	r1, r6
 8009e46:	4628      	mov	r0, r5
 8009e48:	f7f6 fbf6 	bl	8000638 <__aeabi_dmul>
 8009e4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009e52:	4656      	mov	r6, sl
 8009e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e58:	f7f6 fe9e 	bl	8000b98 <__aeabi_d2iz>
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	f7f6 fb81 	bl	8000564 <__aeabi_i2d>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e6a:	f7f6 fa2d 	bl	80002c8 <__aeabi_dsub>
 8009e6e:	3530      	adds	r5, #48	@ 0x30
 8009e70:	f806 5b01 	strb.w	r5, [r6], #1
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	42a6      	cmp	r6, r4
 8009e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	d124      	bne.n	8009ece <_dtoa_r+0x626>
 8009e84:	4baf      	ldr	r3, [pc, #700]	@ (800a144 <_dtoa_r+0x89c>)
 8009e86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e8a:	f7f6 fa1f 	bl	80002cc <__adddf3>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e96:	f7f6 fe5f 	bl	8000b58 <__aeabi_dcmpgt>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d163      	bne.n	8009f66 <_dtoa_r+0x6be>
 8009e9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ea2:	49a8      	ldr	r1, [pc, #672]	@ (800a144 <_dtoa_r+0x89c>)
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f7f6 fa0f 	bl	80002c8 <__aeabi_dsub>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb2:	f7f6 fe33 	bl	8000b1c <__aeabi_dcmplt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f af14 	beq.w	8009ce4 <_dtoa_r+0x43c>
 8009ebc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009ebe:	1e73      	subs	r3, r6, #1
 8009ec0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ec2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ec6:	2b30      	cmp	r3, #48	@ 0x30
 8009ec8:	d0f8      	beq.n	8009ebc <_dtoa_r+0x614>
 8009eca:	4647      	mov	r7, r8
 8009ecc:	e03b      	b.n	8009f46 <_dtoa_r+0x69e>
 8009ece:	4b9e      	ldr	r3, [pc, #632]	@ (800a148 <_dtoa_r+0x8a0>)
 8009ed0:	f7f6 fbb2 	bl	8000638 <__aeabi_dmul>
 8009ed4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ed8:	e7bc      	b.n	8009e54 <_dtoa_r+0x5ac>
 8009eda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009ede:	4656      	mov	r6, sl
 8009ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fcd0 	bl	800088c <__aeabi_ddiv>
 8009eec:	f7f6 fe54 	bl	8000b98 <__aeabi_d2iz>
 8009ef0:	4680      	mov	r8, r0
 8009ef2:	f7f6 fb37 	bl	8000564 <__aeabi_i2d>
 8009ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009efa:	f7f6 fb9d 	bl	8000638 <__aeabi_dmul>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4620      	mov	r0, r4
 8009f04:	4629      	mov	r1, r5
 8009f06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f0a:	f7f6 f9dd 	bl	80002c8 <__aeabi_dsub>
 8009f0e:	f806 4b01 	strb.w	r4, [r6], #1
 8009f12:	9d03      	ldr	r5, [sp, #12]
 8009f14:	eba6 040a 	sub.w	r4, r6, sl
 8009f18:	42a5      	cmp	r5, r4
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	d133      	bne.n	8009f88 <_dtoa_r+0x6e0>
 8009f20:	f7f6 f9d4 	bl	80002cc <__adddf3>
 8009f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	f7f6 fe14 	bl	8000b58 <__aeabi_dcmpgt>
 8009f30:	b9c0      	cbnz	r0, 8009f64 <_dtoa_r+0x6bc>
 8009f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8009f3e:	b110      	cbz	r0, 8009f46 <_dtoa_r+0x69e>
 8009f40:	f018 0f01 	tst.w	r8, #1
 8009f44:	d10e      	bne.n	8009f64 <_dtoa_r+0x6bc>
 8009f46:	9902      	ldr	r1, [sp, #8]
 8009f48:	4648      	mov	r0, r9
 8009f4a:	f000 fbbd 	bl	800a6c8 <_Bfree>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	7033      	strb	r3, [r6, #0]
 8009f52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f54:	3701      	adds	r7, #1
 8009f56:	601f      	str	r7, [r3, #0]
 8009f58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 824b 	beq.w	800a3f6 <_dtoa_r+0xb4e>
 8009f60:	601e      	str	r6, [r3, #0]
 8009f62:	e248      	b.n	800a3f6 <_dtoa_r+0xb4e>
 8009f64:	46b8      	mov	r8, r7
 8009f66:	4633      	mov	r3, r6
 8009f68:	461e      	mov	r6, r3
 8009f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f6e:	2a39      	cmp	r2, #57	@ 0x39
 8009f70:	d106      	bne.n	8009f80 <_dtoa_r+0x6d8>
 8009f72:	459a      	cmp	sl, r3
 8009f74:	d1f8      	bne.n	8009f68 <_dtoa_r+0x6c0>
 8009f76:	2230      	movs	r2, #48	@ 0x30
 8009f78:	f108 0801 	add.w	r8, r8, #1
 8009f7c:	f88a 2000 	strb.w	r2, [sl]
 8009f80:	781a      	ldrb	r2, [r3, #0]
 8009f82:	3201      	adds	r2, #1
 8009f84:	701a      	strb	r2, [r3, #0]
 8009f86:	e7a0      	b.n	8009eca <_dtoa_r+0x622>
 8009f88:	4b6f      	ldr	r3, [pc, #444]	@ (800a148 <_dtoa_r+0x8a0>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f7f6 fb54 	bl	8000638 <__aeabi_dmul>
 8009f90:	2200      	movs	r2, #0
 8009f92:	2300      	movs	r3, #0
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	f7f6 fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d09f      	beq.n	8009ee0 <_dtoa_r+0x638>
 8009fa0:	e7d1      	b.n	8009f46 <_dtoa_r+0x69e>
 8009fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa4:	2a00      	cmp	r2, #0
 8009fa6:	f000 80ea 	beq.w	800a17e <_dtoa_r+0x8d6>
 8009faa:	9a07      	ldr	r2, [sp, #28]
 8009fac:	2a01      	cmp	r2, #1
 8009fae:	f300 80cd 	bgt.w	800a14c <_dtoa_r+0x8a4>
 8009fb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	f000 80c1 	beq.w	800a13c <_dtoa_r+0x894>
 8009fba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009fbe:	9c08      	ldr	r4, [sp, #32]
 8009fc0:	9e00      	ldr	r6, [sp, #0]
 8009fc2:	9a00      	ldr	r2, [sp, #0]
 8009fc4:	441a      	add	r2, r3
 8009fc6:	9200      	str	r2, [sp, #0]
 8009fc8:	9a06      	ldr	r2, [sp, #24]
 8009fca:	2101      	movs	r1, #1
 8009fcc:	441a      	add	r2, r3
 8009fce:	4648      	mov	r0, r9
 8009fd0:	9206      	str	r2, [sp, #24]
 8009fd2:	f000 fc2d 	bl	800a830 <__i2b>
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	b166      	cbz	r6, 8009ff4 <_dtoa_r+0x74c>
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dd09      	ble.n	8009ff4 <_dtoa_r+0x74c>
 8009fe0:	42b3      	cmp	r3, r6
 8009fe2:	9a00      	ldr	r2, [sp, #0]
 8009fe4:	bfa8      	it	ge
 8009fe6:	4633      	movge	r3, r6
 8009fe8:	1ad2      	subs	r2, r2, r3
 8009fea:	9200      	str	r2, [sp, #0]
 8009fec:	9a06      	ldr	r2, [sp, #24]
 8009fee:	1af6      	subs	r6, r6, r3
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	9306      	str	r3, [sp, #24]
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	b30b      	cbz	r3, 800a03c <_dtoa_r+0x794>
 8009ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 80c6 	beq.w	800a18c <_dtoa_r+0x8e4>
 800a000:	2c00      	cmp	r4, #0
 800a002:	f000 80c0 	beq.w	800a186 <_dtoa_r+0x8de>
 800a006:	4629      	mov	r1, r5
 800a008:	4622      	mov	r2, r4
 800a00a:	4648      	mov	r0, r9
 800a00c:	f000 fcc8 	bl	800a9a0 <__pow5mult>
 800a010:	9a02      	ldr	r2, [sp, #8]
 800a012:	4601      	mov	r1, r0
 800a014:	4605      	mov	r5, r0
 800a016:	4648      	mov	r0, r9
 800a018:	f000 fc20 	bl	800a85c <__multiply>
 800a01c:	9902      	ldr	r1, [sp, #8]
 800a01e:	4680      	mov	r8, r0
 800a020:	4648      	mov	r0, r9
 800a022:	f000 fb51 	bl	800a6c8 <_Bfree>
 800a026:	9b08      	ldr	r3, [sp, #32]
 800a028:	1b1b      	subs	r3, r3, r4
 800a02a:	9308      	str	r3, [sp, #32]
 800a02c:	f000 80b1 	beq.w	800a192 <_dtoa_r+0x8ea>
 800a030:	9a08      	ldr	r2, [sp, #32]
 800a032:	4641      	mov	r1, r8
 800a034:	4648      	mov	r0, r9
 800a036:	f000 fcb3 	bl	800a9a0 <__pow5mult>
 800a03a:	9002      	str	r0, [sp, #8]
 800a03c:	2101      	movs	r1, #1
 800a03e:	4648      	mov	r0, r9
 800a040:	f000 fbf6 	bl	800a830 <__i2b>
 800a044:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a046:	4604      	mov	r4, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 81d8 	beq.w	800a3fe <_dtoa_r+0xb56>
 800a04e:	461a      	mov	r2, r3
 800a050:	4601      	mov	r1, r0
 800a052:	4648      	mov	r0, r9
 800a054:	f000 fca4 	bl	800a9a0 <__pow5mult>
 800a058:	9b07      	ldr	r3, [sp, #28]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	4604      	mov	r4, r0
 800a05e:	f300 809f 	bgt.w	800a1a0 <_dtoa_r+0x8f8>
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f040 8097 	bne.w	800a198 <_dtoa_r+0x8f0>
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a070:	2b00      	cmp	r3, #0
 800a072:	f040 8093 	bne.w	800a19c <_dtoa_r+0x8f4>
 800a076:	9b05      	ldr	r3, [sp, #20]
 800a078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a07c:	0d1b      	lsrs	r3, r3, #20
 800a07e:	051b      	lsls	r3, r3, #20
 800a080:	b133      	cbz	r3, 800a090 <_dtoa_r+0x7e8>
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	3301      	adds	r3, #1
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	9b06      	ldr	r3, [sp, #24]
 800a08a:	3301      	adds	r3, #1
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	2301      	movs	r3, #1
 800a090:	9308      	str	r3, [sp, #32]
 800a092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 81b8 	beq.w	800a40a <_dtoa_r+0xb62>
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0a0:	6918      	ldr	r0, [r3, #16]
 800a0a2:	f000 fb79 	bl	800a798 <__hi0bits>
 800a0a6:	f1c0 0020 	rsb	r0, r0, #32
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	4418      	add	r0, r3
 800a0ae:	f010 001f 	ands.w	r0, r0, #31
 800a0b2:	f000 8082 	beq.w	800a1ba <_dtoa_r+0x912>
 800a0b6:	f1c0 0320 	rsb	r3, r0, #32
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	dd73      	ble.n	800a1a6 <_dtoa_r+0x8fe>
 800a0be:	9b00      	ldr	r3, [sp, #0]
 800a0c0:	f1c0 001c 	rsb	r0, r0, #28
 800a0c4:	4403      	add	r3, r0
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	9b06      	ldr	r3, [sp, #24]
 800a0ca:	4403      	add	r3, r0
 800a0cc:	4406      	add	r6, r0
 800a0ce:	9306      	str	r3, [sp, #24]
 800a0d0:	9b00      	ldr	r3, [sp, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dd05      	ble.n	800a0e2 <_dtoa_r+0x83a>
 800a0d6:	9902      	ldr	r1, [sp, #8]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4648      	mov	r0, r9
 800a0dc:	f000 fcba 	bl	800aa54 <__lshift>
 800a0e0:	9002      	str	r0, [sp, #8]
 800a0e2:	9b06      	ldr	r3, [sp, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd05      	ble.n	800a0f4 <_dtoa_r+0x84c>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4648      	mov	r0, r9
 800a0ee:	f000 fcb1 	bl	800aa54 <__lshift>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d061      	beq.n	800a1be <_dtoa_r+0x916>
 800a0fa:	9802      	ldr	r0, [sp, #8]
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f000 fd15 	bl	800ab2c <__mcmp>
 800a102:	2800      	cmp	r0, #0
 800a104:	da5b      	bge.n	800a1be <_dtoa_r+0x916>
 800a106:	2300      	movs	r3, #0
 800a108:	9902      	ldr	r1, [sp, #8]
 800a10a:	220a      	movs	r2, #10
 800a10c:	4648      	mov	r0, r9
 800a10e:	f000 fafd 	bl	800a70c <__multadd>
 800a112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a114:	9002      	str	r0, [sp, #8]
 800a116:	f107 38ff 	add.w	r8, r7, #4294967295
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8177 	beq.w	800a40e <_dtoa_r+0xb66>
 800a120:	4629      	mov	r1, r5
 800a122:	2300      	movs	r3, #0
 800a124:	220a      	movs	r2, #10
 800a126:	4648      	mov	r0, r9
 800a128:	f000 faf0 	bl	800a70c <__multadd>
 800a12c:	f1bb 0f00 	cmp.w	fp, #0
 800a130:	4605      	mov	r5, r0
 800a132:	dc6f      	bgt.n	800a214 <_dtoa_r+0x96c>
 800a134:	9b07      	ldr	r3, [sp, #28]
 800a136:	2b02      	cmp	r3, #2
 800a138:	dc49      	bgt.n	800a1ce <_dtoa_r+0x926>
 800a13a:	e06b      	b.n	800a214 <_dtoa_r+0x96c>
 800a13c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a13e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a142:	e73c      	b.n	8009fbe <_dtoa_r+0x716>
 800a144:	3fe00000 	.word	0x3fe00000
 800a148:	40240000 	.word	0x40240000
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	1e5c      	subs	r4, r3, #1
 800a150:	9b08      	ldr	r3, [sp, #32]
 800a152:	42a3      	cmp	r3, r4
 800a154:	db09      	blt.n	800a16a <_dtoa_r+0x8c2>
 800a156:	1b1c      	subs	r4, r3, r4
 800a158:	9b03      	ldr	r3, [sp, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f6bf af30 	bge.w	8009fc0 <_dtoa_r+0x718>
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	9a03      	ldr	r2, [sp, #12]
 800a164:	1a9e      	subs	r6, r3, r2
 800a166:	2300      	movs	r3, #0
 800a168:	e72b      	b.n	8009fc2 <_dtoa_r+0x71a>
 800a16a:	9b08      	ldr	r3, [sp, #32]
 800a16c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a16e:	9408      	str	r4, [sp, #32]
 800a170:	1ae3      	subs	r3, r4, r3
 800a172:	441a      	add	r2, r3
 800a174:	9e00      	ldr	r6, [sp, #0]
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	920d      	str	r2, [sp, #52]	@ 0x34
 800a17a:	2400      	movs	r4, #0
 800a17c:	e721      	b.n	8009fc2 <_dtoa_r+0x71a>
 800a17e:	9c08      	ldr	r4, [sp, #32]
 800a180:	9e00      	ldr	r6, [sp, #0]
 800a182:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a184:	e728      	b.n	8009fd8 <_dtoa_r+0x730>
 800a186:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a18a:	e751      	b.n	800a030 <_dtoa_r+0x788>
 800a18c:	9a08      	ldr	r2, [sp, #32]
 800a18e:	9902      	ldr	r1, [sp, #8]
 800a190:	e750      	b.n	800a034 <_dtoa_r+0x78c>
 800a192:	f8cd 8008 	str.w	r8, [sp, #8]
 800a196:	e751      	b.n	800a03c <_dtoa_r+0x794>
 800a198:	2300      	movs	r3, #0
 800a19a:	e779      	b.n	800a090 <_dtoa_r+0x7e8>
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	e777      	b.n	800a090 <_dtoa_r+0x7e8>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9308      	str	r3, [sp, #32]
 800a1a4:	e779      	b.n	800a09a <_dtoa_r+0x7f2>
 800a1a6:	d093      	beq.n	800a0d0 <_dtoa_r+0x828>
 800a1a8:	9a00      	ldr	r2, [sp, #0]
 800a1aa:	331c      	adds	r3, #28
 800a1ac:	441a      	add	r2, r3
 800a1ae:	9200      	str	r2, [sp, #0]
 800a1b0:	9a06      	ldr	r2, [sp, #24]
 800a1b2:	441a      	add	r2, r3
 800a1b4:	441e      	add	r6, r3
 800a1b6:	9206      	str	r2, [sp, #24]
 800a1b8:	e78a      	b.n	800a0d0 <_dtoa_r+0x828>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	e7f4      	b.n	800a1a8 <_dtoa_r+0x900>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	46b8      	mov	r8, r7
 800a1c4:	dc20      	bgt.n	800a208 <_dtoa_r+0x960>
 800a1c6:	469b      	mov	fp, r3
 800a1c8:	9b07      	ldr	r3, [sp, #28]
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	dd1e      	ble.n	800a20c <_dtoa_r+0x964>
 800a1ce:	f1bb 0f00 	cmp.w	fp, #0
 800a1d2:	f47f adb1 	bne.w	8009d38 <_dtoa_r+0x490>
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	465b      	mov	r3, fp
 800a1da:	2205      	movs	r2, #5
 800a1dc:	4648      	mov	r0, r9
 800a1de:	f000 fa95 	bl	800a70c <__multadd>
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	9802      	ldr	r0, [sp, #8]
 800a1e8:	f000 fca0 	bl	800ab2c <__mcmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f77f ada3 	ble.w	8009d38 <_dtoa_r+0x490>
 800a1f2:	4656      	mov	r6, sl
 800a1f4:	2331      	movs	r3, #49	@ 0x31
 800a1f6:	f806 3b01 	strb.w	r3, [r6], #1
 800a1fa:	f108 0801 	add.w	r8, r8, #1
 800a1fe:	e59f      	b.n	8009d40 <_dtoa_r+0x498>
 800a200:	9c03      	ldr	r4, [sp, #12]
 800a202:	46b8      	mov	r8, r7
 800a204:	4625      	mov	r5, r4
 800a206:	e7f4      	b.n	800a1f2 <_dtoa_r+0x94a>
 800a208:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 8101 	beq.w	800a416 <_dtoa_r+0xb6e>
 800a214:	2e00      	cmp	r6, #0
 800a216:	dd05      	ble.n	800a224 <_dtoa_r+0x97c>
 800a218:	4629      	mov	r1, r5
 800a21a:	4632      	mov	r2, r6
 800a21c:	4648      	mov	r0, r9
 800a21e:	f000 fc19 	bl	800aa54 <__lshift>
 800a222:	4605      	mov	r5, r0
 800a224:	9b08      	ldr	r3, [sp, #32]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d05c      	beq.n	800a2e4 <_dtoa_r+0xa3c>
 800a22a:	6869      	ldr	r1, [r5, #4]
 800a22c:	4648      	mov	r0, r9
 800a22e:	f000 fa0b 	bl	800a648 <_Balloc>
 800a232:	4606      	mov	r6, r0
 800a234:	b928      	cbnz	r0, 800a242 <_dtoa_r+0x99a>
 800a236:	4b82      	ldr	r3, [pc, #520]	@ (800a440 <_dtoa_r+0xb98>)
 800a238:	4602      	mov	r2, r0
 800a23a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a23e:	f7ff bb4a 	b.w	80098d6 <_dtoa_r+0x2e>
 800a242:	692a      	ldr	r2, [r5, #16]
 800a244:	3202      	adds	r2, #2
 800a246:	0092      	lsls	r2, r2, #2
 800a248:	f105 010c 	add.w	r1, r5, #12
 800a24c:	300c      	adds	r0, #12
 800a24e:	f7ff fa94 	bl	800977a <memcpy>
 800a252:	2201      	movs	r2, #1
 800a254:	4631      	mov	r1, r6
 800a256:	4648      	mov	r0, r9
 800a258:	f000 fbfc 	bl	800aa54 <__lshift>
 800a25c:	f10a 0301 	add.w	r3, sl, #1
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	eb0a 030b 	add.w	r3, sl, fp
 800a266:	9308      	str	r3, [sp, #32]
 800a268:	9b04      	ldr	r3, [sp, #16]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	462f      	mov	r7, r5
 800a270:	9306      	str	r3, [sp, #24]
 800a272:	4605      	mov	r5, r0
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	9802      	ldr	r0, [sp, #8]
 800a278:	4621      	mov	r1, r4
 800a27a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a27e:	f7ff fa8a 	bl	8009796 <quorem>
 800a282:	4603      	mov	r3, r0
 800a284:	3330      	adds	r3, #48	@ 0x30
 800a286:	9003      	str	r0, [sp, #12]
 800a288:	4639      	mov	r1, r7
 800a28a:	9802      	ldr	r0, [sp, #8]
 800a28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a28e:	f000 fc4d 	bl	800ab2c <__mcmp>
 800a292:	462a      	mov	r2, r5
 800a294:	9004      	str	r0, [sp, #16]
 800a296:	4621      	mov	r1, r4
 800a298:	4648      	mov	r0, r9
 800a29a:	f000 fc63 	bl	800ab64 <__mdiff>
 800a29e:	68c2      	ldr	r2, [r0, #12]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	bb02      	cbnz	r2, 800a2e8 <_dtoa_r+0xa40>
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	9802      	ldr	r0, [sp, #8]
 800a2aa:	f000 fc3f 	bl	800ab2c <__mcmp>
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4648      	mov	r0, r9
 800a2b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ba:	f000 fa05 	bl	800a6c8 <_Bfree>
 800a2be:	9b07      	ldr	r3, [sp, #28]
 800a2c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2c2:	9e00      	ldr	r6, [sp, #0]
 800a2c4:	ea42 0103 	orr.w	r1, r2, r3
 800a2c8:	9b06      	ldr	r3, [sp, #24]
 800a2ca:	4319      	orrs	r1, r3
 800a2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ce:	d10d      	bne.n	800a2ec <_dtoa_r+0xa44>
 800a2d0:	2b39      	cmp	r3, #57	@ 0x39
 800a2d2:	d027      	beq.n	800a324 <_dtoa_r+0xa7c>
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	2a00      	cmp	r2, #0
 800a2d8:	dd01      	ble.n	800a2de <_dtoa_r+0xa36>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	3331      	adds	r3, #49	@ 0x31
 800a2de:	f88b 3000 	strb.w	r3, [fp]
 800a2e2:	e52e      	b.n	8009d42 <_dtoa_r+0x49a>
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	e7b9      	b.n	800a25c <_dtoa_r+0x9b4>
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	e7e2      	b.n	800a2b2 <_dtoa_r+0xa0a>
 800a2ec:	9904      	ldr	r1, [sp, #16]
 800a2ee:	2900      	cmp	r1, #0
 800a2f0:	db04      	blt.n	800a2fc <_dtoa_r+0xa54>
 800a2f2:	9807      	ldr	r0, [sp, #28]
 800a2f4:	4301      	orrs	r1, r0
 800a2f6:	9806      	ldr	r0, [sp, #24]
 800a2f8:	4301      	orrs	r1, r0
 800a2fa:	d120      	bne.n	800a33e <_dtoa_r+0xa96>
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	ddee      	ble.n	800a2de <_dtoa_r+0xa36>
 800a300:	9902      	ldr	r1, [sp, #8]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2201      	movs	r2, #1
 800a306:	4648      	mov	r0, r9
 800a308:	f000 fba4 	bl	800aa54 <__lshift>
 800a30c:	4621      	mov	r1, r4
 800a30e:	9002      	str	r0, [sp, #8]
 800a310:	f000 fc0c 	bl	800ab2c <__mcmp>
 800a314:	2800      	cmp	r0, #0
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	dc02      	bgt.n	800a320 <_dtoa_r+0xa78>
 800a31a:	d1e0      	bne.n	800a2de <_dtoa_r+0xa36>
 800a31c:	07da      	lsls	r2, r3, #31
 800a31e:	d5de      	bpl.n	800a2de <_dtoa_r+0xa36>
 800a320:	2b39      	cmp	r3, #57	@ 0x39
 800a322:	d1da      	bne.n	800a2da <_dtoa_r+0xa32>
 800a324:	2339      	movs	r3, #57	@ 0x39
 800a326:	f88b 3000 	strb.w	r3, [fp]
 800a32a:	4633      	mov	r3, r6
 800a32c:	461e      	mov	r6, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a334:	2a39      	cmp	r2, #57	@ 0x39
 800a336:	d04e      	beq.n	800a3d6 <_dtoa_r+0xb2e>
 800a338:	3201      	adds	r2, #1
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e501      	b.n	8009d42 <_dtoa_r+0x49a>
 800a33e:	2a00      	cmp	r2, #0
 800a340:	dd03      	ble.n	800a34a <_dtoa_r+0xaa2>
 800a342:	2b39      	cmp	r3, #57	@ 0x39
 800a344:	d0ee      	beq.n	800a324 <_dtoa_r+0xa7c>
 800a346:	3301      	adds	r3, #1
 800a348:	e7c9      	b.n	800a2de <_dtoa_r+0xa36>
 800a34a:	9a00      	ldr	r2, [sp, #0]
 800a34c:	9908      	ldr	r1, [sp, #32]
 800a34e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a352:	428a      	cmp	r2, r1
 800a354:	d028      	beq.n	800a3a8 <_dtoa_r+0xb00>
 800a356:	9902      	ldr	r1, [sp, #8]
 800a358:	2300      	movs	r3, #0
 800a35a:	220a      	movs	r2, #10
 800a35c:	4648      	mov	r0, r9
 800a35e:	f000 f9d5 	bl	800a70c <__multadd>
 800a362:	42af      	cmp	r7, r5
 800a364:	9002      	str	r0, [sp, #8]
 800a366:	f04f 0300 	mov.w	r3, #0
 800a36a:	f04f 020a 	mov.w	r2, #10
 800a36e:	4639      	mov	r1, r7
 800a370:	4648      	mov	r0, r9
 800a372:	d107      	bne.n	800a384 <_dtoa_r+0xadc>
 800a374:	f000 f9ca 	bl	800a70c <__multadd>
 800a378:	4607      	mov	r7, r0
 800a37a:	4605      	mov	r5, r0
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	3301      	adds	r3, #1
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	e777      	b.n	800a274 <_dtoa_r+0x9cc>
 800a384:	f000 f9c2 	bl	800a70c <__multadd>
 800a388:	4629      	mov	r1, r5
 800a38a:	4607      	mov	r7, r0
 800a38c:	2300      	movs	r3, #0
 800a38e:	220a      	movs	r2, #10
 800a390:	4648      	mov	r0, r9
 800a392:	f000 f9bb 	bl	800a70c <__multadd>
 800a396:	4605      	mov	r5, r0
 800a398:	e7f0      	b.n	800a37c <_dtoa_r+0xad4>
 800a39a:	f1bb 0f00 	cmp.w	fp, #0
 800a39e:	bfcc      	ite	gt
 800a3a0:	465e      	movgt	r6, fp
 800a3a2:	2601      	movle	r6, #1
 800a3a4:	4456      	add	r6, sl
 800a3a6:	2700      	movs	r7, #0
 800a3a8:	9902      	ldr	r1, [sp, #8]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	4648      	mov	r0, r9
 800a3b0:	f000 fb50 	bl	800aa54 <__lshift>
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	9002      	str	r0, [sp, #8]
 800a3b8:	f000 fbb8 	bl	800ab2c <__mcmp>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	dcb4      	bgt.n	800a32a <_dtoa_r+0xa82>
 800a3c0:	d102      	bne.n	800a3c8 <_dtoa_r+0xb20>
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	07db      	lsls	r3, r3, #31
 800a3c6:	d4b0      	bmi.n	800a32a <_dtoa_r+0xa82>
 800a3c8:	4633      	mov	r3, r6
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3d0:	2a30      	cmp	r2, #48	@ 0x30
 800a3d2:	d0fa      	beq.n	800a3ca <_dtoa_r+0xb22>
 800a3d4:	e4b5      	b.n	8009d42 <_dtoa_r+0x49a>
 800a3d6:	459a      	cmp	sl, r3
 800a3d8:	d1a8      	bne.n	800a32c <_dtoa_r+0xa84>
 800a3da:	2331      	movs	r3, #49	@ 0x31
 800a3dc:	f108 0801 	add.w	r8, r8, #1
 800a3e0:	f88a 3000 	strb.w	r3, [sl]
 800a3e4:	e4ad      	b.n	8009d42 <_dtoa_r+0x49a>
 800a3e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a444 <_dtoa_r+0xb9c>
 800a3ec:	b11b      	cbz	r3, 800a3f6 <_dtoa_r+0xb4e>
 800a3ee:	f10a 0308 	add.w	r3, sl, #8
 800a3f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	b017      	add	sp, #92	@ 0x5c
 800a3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fe:	9b07      	ldr	r3, [sp, #28]
 800a400:	2b01      	cmp	r3, #1
 800a402:	f77f ae2e 	ble.w	800a062 <_dtoa_r+0x7ba>
 800a406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	2001      	movs	r0, #1
 800a40c:	e64d      	b.n	800a0aa <_dtoa_r+0x802>
 800a40e:	f1bb 0f00 	cmp.w	fp, #0
 800a412:	f77f aed9 	ble.w	800a1c8 <_dtoa_r+0x920>
 800a416:	4656      	mov	r6, sl
 800a418:	9802      	ldr	r0, [sp, #8]
 800a41a:	4621      	mov	r1, r4
 800a41c:	f7ff f9bb 	bl	8009796 <quorem>
 800a420:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a424:	f806 3b01 	strb.w	r3, [r6], #1
 800a428:	eba6 020a 	sub.w	r2, r6, sl
 800a42c:	4593      	cmp	fp, r2
 800a42e:	ddb4      	ble.n	800a39a <_dtoa_r+0xaf2>
 800a430:	9902      	ldr	r1, [sp, #8]
 800a432:	2300      	movs	r3, #0
 800a434:	220a      	movs	r2, #10
 800a436:	4648      	mov	r0, r9
 800a438:	f000 f968 	bl	800a70c <__multadd>
 800a43c:	9002      	str	r0, [sp, #8]
 800a43e:	e7eb      	b.n	800a418 <_dtoa_r+0xb70>
 800a440:	0800c781 	.word	0x0800c781
 800a444:	0800c705 	.word	0x0800c705

0800a448 <_free_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d041      	beq.n	800a4d4 <_free_r+0x8c>
 800a450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a454:	1f0c      	subs	r4, r1, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfb8      	it	lt
 800a45a:	18e4      	addlt	r4, r4, r3
 800a45c:	f000 f8e8 	bl	800a630 <__malloc_lock>
 800a460:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d8 <_free_r+0x90>)
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	b933      	cbnz	r3, 800a474 <_free_r+0x2c>
 800a466:	6063      	str	r3, [r4, #4]
 800a468:	6014      	str	r4, [r2, #0]
 800a46a:	4628      	mov	r0, r5
 800a46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a470:	f000 b8e4 	b.w	800a63c <__malloc_unlock>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d908      	bls.n	800a48a <_free_r+0x42>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	1821      	adds	r1, r4, r0
 800a47c:	428b      	cmp	r3, r1
 800a47e:	bf01      	itttt	eq
 800a480:	6819      	ldreq	r1, [r3, #0]
 800a482:	685b      	ldreq	r3, [r3, #4]
 800a484:	1809      	addeq	r1, r1, r0
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	e7ed      	b.n	800a466 <_free_r+0x1e>
 800a48a:	461a      	mov	r2, r3
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	b10b      	cbz	r3, 800a494 <_free_r+0x4c>
 800a490:	42a3      	cmp	r3, r4
 800a492:	d9fa      	bls.n	800a48a <_free_r+0x42>
 800a494:	6811      	ldr	r1, [r2, #0]
 800a496:	1850      	adds	r0, r2, r1
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d10b      	bne.n	800a4b4 <_free_r+0x6c>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	4401      	add	r1, r0
 800a4a0:	1850      	adds	r0, r2, r1
 800a4a2:	4283      	cmp	r3, r0
 800a4a4:	6011      	str	r1, [r2, #0]
 800a4a6:	d1e0      	bne.n	800a46a <_free_r+0x22>
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	6053      	str	r3, [r2, #4]
 800a4ae:	4408      	add	r0, r1
 800a4b0:	6010      	str	r0, [r2, #0]
 800a4b2:	e7da      	b.n	800a46a <_free_r+0x22>
 800a4b4:	d902      	bls.n	800a4bc <_free_r+0x74>
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	602b      	str	r3, [r5, #0]
 800a4ba:	e7d6      	b.n	800a46a <_free_r+0x22>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	1821      	adds	r1, r4, r0
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf04      	itt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	bf04      	itt	eq
 800a4cc:	1809      	addeq	r1, r1, r0
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	6054      	str	r4, [r2, #4]
 800a4d2:	e7ca      	b.n	800a46a <_free_r+0x22>
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20007250 	.word	0x20007250

0800a4dc <malloc>:
 800a4dc:	4b02      	ldr	r3, [pc, #8]	@ (800a4e8 <malloc+0xc>)
 800a4de:	4601      	mov	r1, r0
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f000 b825 	b.w	800a530 <_malloc_r>
 800a4e6:	bf00      	nop
 800a4e8:	20000024 	.word	0x20000024

0800a4ec <sbrk_aligned>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a52c <sbrk_aligned+0x40>)
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	6831      	ldr	r1, [r6, #0]
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	b911      	cbnz	r1, 800a4fe <sbrk_aligned+0x12>
 800a4f8:	f000 fe24 	bl	800b144 <_sbrk_r>
 800a4fc:	6030      	str	r0, [r6, #0]
 800a4fe:	4621      	mov	r1, r4
 800a500:	4628      	mov	r0, r5
 800a502:	f000 fe1f 	bl	800b144 <_sbrk_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d103      	bne.n	800a512 <sbrk_aligned+0x26>
 800a50a:	f04f 34ff 	mov.w	r4, #4294967295
 800a50e:	4620      	mov	r0, r4
 800a510:	bd70      	pop	{r4, r5, r6, pc}
 800a512:	1cc4      	adds	r4, r0, #3
 800a514:	f024 0403 	bic.w	r4, r4, #3
 800a518:	42a0      	cmp	r0, r4
 800a51a:	d0f8      	beq.n	800a50e <sbrk_aligned+0x22>
 800a51c:	1a21      	subs	r1, r4, r0
 800a51e:	4628      	mov	r0, r5
 800a520:	f000 fe10 	bl	800b144 <_sbrk_r>
 800a524:	3001      	adds	r0, #1
 800a526:	d1f2      	bne.n	800a50e <sbrk_aligned+0x22>
 800a528:	e7ef      	b.n	800a50a <sbrk_aligned+0x1e>
 800a52a:	bf00      	nop
 800a52c:	2000724c 	.word	0x2000724c

0800a530 <_malloc_r>:
 800a530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a534:	1ccd      	adds	r5, r1, #3
 800a536:	f025 0503 	bic.w	r5, r5, #3
 800a53a:	3508      	adds	r5, #8
 800a53c:	2d0c      	cmp	r5, #12
 800a53e:	bf38      	it	cc
 800a540:	250c      	movcc	r5, #12
 800a542:	2d00      	cmp	r5, #0
 800a544:	4606      	mov	r6, r0
 800a546:	db01      	blt.n	800a54c <_malloc_r+0x1c>
 800a548:	42a9      	cmp	r1, r5
 800a54a:	d904      	bls.n	800a556 <_malloc_r+0x26>
 800a54c:	230c      	movs	r3, #12
 800a54e:	6033      	str	r3, [r6, #0]
 800a550:	2000      	movs	r0, #0
 800a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a62c <_malloc_r+0xfc>
 800a55a:	f000 f869 	bl	800a630 <__malloc_lock>
 800a55e:	f8d8 3000 	ldr.w	r3, [r8]
 800a562:	461c      	mov	r4, r3
 800a564:	bb44      	cbnz	r4, 800a5b8 <_malloc_r+0x88>
 800a566:	4629      	mov	r1, r5
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff ffbf 	bl	800a4ec <sbrk_aligned>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	4604      	mov	r4, r0
 800a572:	d158      	bne.n	800a626 <_malloc_r+0xf6>
 800a574:	f8d8 4000 	ldr.w	r4, [r8]
 800a578:	4627      	mov	r7, r4
 800a57a:	2f00      	cmp	r7, #0
 800a57c:	d143      	bne.n	800a606 <_malloc_r+0xd6>
 800a57e:	2c00      	cmp	r4, #0
 800a580:	d04b      	beq.n	800a61a <_malloc_r+0xea>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	4639      	mov	r1, r7
 800a586:	4630      	mov	r0, r6
 800a588:	eb04 0903 	add.w	r9, r4, r3
 800a58c:	f000 fdda 	bl	800b144 <_sbrk_r>
 800a590:	4581      	cmp	r9, r0
 800a592:	d142      	bne.n	800a61a <_malloc_r+0xea>
 800a594:	6821      	ldr	r1, [r4, #0]
 800a596:	1a6d      	subs	r5, r5, r1
 800a598:	4629      	mov	r1, r5
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ffa6 	bl	800a4ec <sbrk_aligned>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d03a      	beq.n	800a61a <_malloc_r+0xea>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	442b      	add	r3, r5
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	bb62      	cbnz	r2, 800a60c <_malloc_r+0xdc>
 800a5b2:	f8c8 7000 	str.w	r7, [r8]
 800a5b6:	e00f      	b.n	800a5d8 <_malloc_r+0xa8>
 800a5b8:	6822      	ldr	r2, [r4, #0]
 800a5ba:	1b52      	subs	r2, r2, r5
 800a5bc:	d420      	bmi.n	800a600 <_malloc_r+0xd0>
 800a5be:	2a0b      	cmp	r2, #11
 800a5c0:	d917      	bls.n	800a5f2 <_malloc_r+0xc2>
 800a5c2:	1961      	adds	r1, r4, r5
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	6025      	str	r5, [r4, #0]
 800a5c8:	bf18      	it	ne
 800a5ca:	6059      	strne	r1, [r3, #4]
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	bf08      	it	eq
 800a5d0:	f8c8 1000 	streq.w	r1, [r8]
 800a5d4:	5162      	str	r2, [r4, r5]
 800a5d6:	604b      	str	r3, [r1, #4]
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f000 f82f 	bl	800a63c <__malloc_unlock>
 800a5de:	f104 000b 	add.w	r0, r4, #11
 800a5e2:	1d23      	adds	r3, r4, #4
 800a5e4:	f020 0007 	bic.w	r0, r0, #7
 800a5e8:	1ac2      	subs	r2, r0, r3
 800a5ea:	bf1c      	itt	ne
 800a5ec:	1a1b      	subne	r3, r3, r0
 800a5ee:	50a3      	strne	r3, [r4, r2]
 800a5f0:	e7af      	b.n	800a552 <_malloc_r+0x22>
 800a5f2:	6862      	ldr	r2, [r4, #4]
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	bf0c      	ite	eq
 800a5f8:	f8c8 2000 	streq.w	r2, [r8]
 800a5fc:	605a      	strne	r2, [r3, #4]
 800a5fe:	e7eb      	b.n	800a5d8 <_malloc_r+0xa8>
 800a600:	4623      	mov	r3, r4
 800a602:	6864      	ldr	r4, [r4, #4]
 800a604:	e7ae      	b.n	800a564 <_malloc_r+0x34>
 800a606:	463c      	mov	r4, r7
 800a608:	687f      	ldr	r7, [r7, #4]
 800a60a:	e7b6      	b.n	800a57a <_malloc_r+0x4a>
 800a60c:	461a      	mov	r2, r3
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	42a3      	cmp	r3, r4
 800a612:	d1fb      	bne.n	800a60c <_malloc_r+0xdc>
 800a614:	2300      	movs	r3, #0
 800a616:	6053      	str	r3, [r2, #4]
 800a618:	e7de      	b.n	800a5d8 <_malloc_r+0xa8>
 800a61a:	230c      	movs	r3, #12
 800a61c:	6033      	str	r3, [r6, #0]
 800a61e:	4630      	mov	r0, r6
 800a620:	f000 f80c 	bl	800a63c <__malloc_unlock>
 800a624:	e794      	b.n	800a550 <_malloc_r+0x20>
 800a626:	6005      	str	r5, [r0, #0]
 800a628:	e7d6      	b.n	800a5d8 <_malloc_r+0xa8>
 800a62a:	bf00      	nop
 800a62c:	20007250 	.word	0x20007250

0800a630 <__malloc_lock>:
 800a630:	4801      	ldr	r0, [pc, #4]	@ (800a638 <__malloc_lock+0x8>)
 800a632:	f7ff b8a0 	b.w	8009776 <__retarget_lock_acquire_recursive>
 800a636:	bf00      	nop
 800a638:	20007248 	.word	0x20007248

0800a63c <__malloc_unlock>:
 800a63c:	4801      	ldr	r0, [pc, #4]	@ (800a644 <__malloc_unlock+0x8>)
 800a63e:	f7ff b89b 	b.w	8009778 <__retarget_lock_release_recursive>
 800a642:	bf00      	nop
 800a644:	20007248 	.word	0x20007248

0800a648 <_Balloc>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	69c6      	ldr	r6, [r0, #28]
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	b976      	cbnz	r6, 800a670 <_Balloc+0x28>
 800a652:	2010      	movs	r0, #16
 800a654:	f7ff ff42 	bl	800a4dc <malloc>
 800a658:	4602      	mov	r2, r0
 800a65a:	61e0      	str	r0, [r4, #28]
 800a65c:	b920      	cbnz	r0, 800a668 <_Balloc+0x20>
 800a65e:	4b18      	ldr	r3, [pc, #96]	@ (800a6c0 <_Balloc+0x78>)
 800a660:	4818      	ldr	r0, [pc, #96]	@ (800a6c4 <_Balloc+0x7c>)
 800a662:	216b      	movs	r1, #107	@ 0x6b
 800a664:	f000 fd7e 	bl	800b164 <__assert_func>
 800a668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a66c:	6006      	str	r6, [r0, #0]
 800a66e:	60c6      	str	r6, [r0, #12]
 800a670:	69e6      	ldr	r6, [r4, #28]
 800a672:	68f3      	ldr	r3, [r6, #12]
 800a674:	b183      	cbz	r3, 800a698 <_Balloc+0x50>
 800a676:	69e3      	ldr	r3, [r4, #28]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a67e:	b9b8      	cbnz	r0, 800a6b0 <_Balloc+0x68>
 800a680:	2101      	movs	r1, #1
 800a682:	fa01 f605 	lsl.w	r6, r1, r5
 800a686:	1d72      	adds	r2, r6, #5
 800a688:	0092      	lsls	r2, r2, #2
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fd88 	bl	800b1a0 <_calloc_r>
 800a690:	b160      	cbz	r0, 800a6ac <_Balloc+0x64>
 800a692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a696:	e00e      	b.n	800a6b6 <_Balloc+0x6e>
 800a698:	2221      	movs	r2, #33	@ 0x21
 800a69a:	2104      	movs	r1, #4
 800a69c:	4620      	mov	r0, r4
 800a69e:	f000 fd7f 	bl	800b1a0 <_calloc_r>
 800a6a2:	69e3      	ldr	r3, [r4, #28]
 800a6a4:	60f0      	str	r0, [r6, #12]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e4      	bne.n	800a676 <_Balloc+0x2e>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	6802      	ldr	r2, [r0, #0]
 800a6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6bc:	e7f7      	b.n	800a6ae <_Balloc+0x66>
 800a6be:	bf00      	nop
 800a6c0:	0800c712 	.word	0x0800c712
 800a6c4:	0800c792 	.word	0x0800c792

0800a6c8 <_Bfree>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	69c6      	ldr	r6, [r0, #28]
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	b976      	cbnz	r6, 800a6f0 <_Bfree+0x28>
 800a6d2:	2010      	movs	r0, #16
 800a6d4:	f7ff ff02 	bl	800a4dc <malloc>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	61e8      	str	r0, [r5, #28]
 800a6dc:	b920      	cbnz	r0, 800a6e8 <_Bfree+0x20>
 800a6de:	4b09      	ldr	r3, [pc, #36]	@ (800a704 <_Bfree+0x3c>)
 800a6e0:	4809      	ldr	r0, [pc, #36]	@ (800a708 <_Bfree+0x40>)
 800a6e2:	218f      	movs	r1, #143	@ 0x8f
 800a6e4:	f000 fd3e 	bl	800b164 <__assert_func>
 800a6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6ec:	6006      	str	r6, [r0, #0]
 800a6ee:	60c6      	str	r6, [r0, #12]
 800a6f0:	b13c      	cbz	r4, 800a702 <_Bfree+0x3a>
 800a6f2:	69eb      	ldr	r3, [r5, #28]
 800a6f4:	6862      	ldr	r2, [r4, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6fc:	6021      	str	r1, [r4, #0]
 800a6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	0800c712 	.word	0x0800c712
 800a708:	0800c792 	.word	0x0800c792

0800a70c <__multadd>:
 800a70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a710:	690d      	ldr	r5, [r1, #16]
 800a712:	4607      	mov	r7, r0
 800a714:	460c      	mov	r4, r1
 800a716:	461e      	mov	r6, r3
 800a718:	f101 0c14 	add.w	ip, r1, #20
 800a71c:	2000      	movs	r0, #0
 800a71e:	f8dc 3000 	ldr.w	r3, [ip]
 800a722:	b299      	uxth	r1, r3
 800a724:	fb02 6101 	mla	r1, r2, r1, r6
 800a728:	0c1e      	lsrs	r6, r3, #16
 800a72a:	0c0b      	lsrs	r3, r1, #16
 800a72c:	fb02 3306 	mla	r3, r2, r6, r3
 800a730:	b289      	uxth	r1, r1
 800a732:	3001      	adds	r0, #1
 800a734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a738:	4285      	cmp	r5, r0
 800a73a:	f84c 1b04 	str.w	r1, [ip], #4
 800a73e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a742:	dcec      	bgt.n	800a71e <__multadd+0x12>
 800a744:	b30e      	cbz	r6, 800a78a <__multadd+0x7e>
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	42ab      	cmp	r3, r5
 800a74a:	dc19      	bgt.n	800a780 <__multadd+0x74>
 800a74c:	6861      	ldr	r1, [r4, #4]
 800a74e:	4638      	mov	r0, r7
 800a750:	3101      	adds	r1, #1
 800a752:	f7ff ff79 	bl	800a648 <_Balloc>
 800a756:	4680      	mov	r8, r0
 800a758:	b928      	cbnz	r0, 800a766 <__multadd+0x5a>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b0c      	ldr	r3, [pc, #48]	@ (800a790 <__multadd+0x84>)
 800a75e:	480d      	ldr	r0, [pc, #52]	@ (800a794 <__multadd+0x88>)
 800a760:	21ba      	movs	r1, #186	@ 0xba
 800a762:	f000 fcff 	bl	800b164 <__assert_func>
 800a766:	6922      	ldr	r2, [r4, #16]
 800a768:	3202      	adds	r2, #2
 800a76a:	f104 010c 	add.w	r1, r4, #12
 800a76e:	0092      	lsls	r2, r2, #2
 800a770:	300c      	adds	r0, #12
 800a772:	f7ff f802 	bl	800977a <memcpy>
 800a776:	4621      	mov	r1, r4
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff ffa5 	bl	800a6c8 <_Bfree>
 800a77e:	4644      	mov	r4, r8
 800a780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a784:	3501      	adds	r5, #1
 800a786:	615e      	str	r6, [r3, #20]
 800a788:	6125      	str	r5, [r4, #16]
 800a78a:	4620      	mov	r0, r4
 800a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a790:	0800c781 	.word	0x0800c781
 800a794:	0800c792 	.word	0x0800c792

0800a798 <__hi0bits>:
 800a798:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a79c:	4603      	mov	r3, r0
 800a79e:	bf36      	itet	cc
 800a7a0:	0403      	lslcc	r3, r0, #16
 800a7a2:	2000      	movcs	r0, #0
 800a7a4:	2010      	movcc	r0, #16
 800a7a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7aa:	bf3c      	itt	cc
 800a7ac:	021b      	lslcc	r3, r3, #8
 800a7ae:	3008      	addcc	r0, #8
 800a7b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7b4:	bf3c      	itt	cc
 800a7b6:	011b      	lslcc	r3, r3, #4
 800a7b8:	3004      	addcc	r0, #4
 800a7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7be:	bf3c      	itt	cc
 800a7c0:	009b      	lslcc	r3, r3, #2
 800a7c2:	3002      	addcc	r0, #2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	db05      	blt.n	800a7d4 <__hi0bits+0x3c>
 800a7c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a7cc:	f100 0001 	add.w	r0, r0, #1
 800a7d0:	bf08      	it	eq
 800a7d2:	2020      	moveq	r0, #32
 800a7d4:	4770      	bx	lr

0800a7d6 <__lo0bits>:
 800a7d6:	6803      	ldr	r3, [r0, #0]
 800a7d8:	4602      	mov	r2, r0
 800a7da:	f013 0007 	ands.w	r0, r3, #7
 800a7de:	d00b      	beq.n	800a7f8 <__lo0bits+0x22>
 800a7e0:	07d9      	lsls	r1, r3, #31
 800a7e2:	d421      	bmi.n	800a828 <__lo0bits+0x52>
 800a7e4:	0798      	lsls	r0, r3, #30
 800a7e6:	bf49      	itett	mi
 800a7e8:	085b      	lsrmi	r3, r3, #1
 800a7ea:	089b      	lsrpl	r3, r3, #2
 800a7ec:	2001      	movmi	r0, #1
 800a7ee:	6013      	strmi	r3, [r2, #0]
 800a7f0:	bf5c      	itt	pl
 800a7f2:	6013      	strpl	r3, [r2, #0]
 800a7f4:	2002      	movpl	r0, #2
 800a7f6:	4770      	bx	lr
 800a7f8:	b299      	uxth	r1, r3
 800a7fa:	b909      	cbnz	r1, 800a800 <__lo0bits+0x2a>
 800a7fc:	0c1b      	lsrs	r3, r3, #16
 800a7fe:	2010      	movs	r0, #16
 800a800:	b2d9      	uxtb	r1, r3
 800a802:	b909      	cbnz	r1, 800a808 <__lo0bits+0x32>
 800a804:	3008      	adds	r0, #8
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	0719      	lsls	r1, r3, #28
 800a80a:	bf04      	itt	eq
 800a80c:	091b      	lsreq	r3, r3, #4
 800a80e:	3004      	addeq	r0, #4
 800a810:	0799      	lsls	r1, r3, #30
 800a812:	bf04      	itt	eq
 800a814:	089b      	lsreq	r3, r3, #2
 800a816:	3002      	addeq	r0, #2
 800a818:	07d9      	lsls	r1, r3, #31
 800a81a:	d403      	bmi.n	800a824 <__lo0bits+0x4e>
 800a81c:	085b      	lsrs	r3, r3, #1
 800a81e:	f100 0001 	add.w	r0, r0, #1
 800a822:	d003      	beq.n	800a82c <__lo0bits+0x56>
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	4770      	bx	lr
 800a828:	2000      	movs	r0, #0
 800a82a:	4770      	bx	lr
 800a82c:	2020      	movs	r0, #32
 800a82e:	4770      	bx	lr

0800a830 <__i2b>:
 800a830:	b510      	push	{r4, lr}
 800a832:	460c      	mov	r4, r1
 800a834:	2101      	movs	r1, #1
 800a836:	f7ff ff07 	bl	800a648 <_Balloc>
 800a83a:	4602      	mov	r2, r0
 800a83c:	b928      	cbnz	r0, 800a84a <__i2b+0x1a>
 800a83e:	4b05      	ldr	r3, [pc, #20]	@ (800a854 <__i2b+0x24>)
 800a840:	4805      	ldr	r0, [pc, #20]	@ (800a858 <__i2b+0x28>)
 800a842:	f240 1145 	movw	r1, #325	@ 0x145
 800a846:	f000 fc8d 	bl	800b164 <__assert_func>
 800a84a:	2301      	movs	r3, #1
 800a84c:	6144      	str	r4, [r0, #20]
 800a84e:	6103      	str	r3, [r0, #16]
 800a850:	bd10      	pop	{r4, pc}
 800a852:	bf00      	nop
 800a854:	0800c781 	.word	0x0800c781
 800a858:	0800c792 	.word	0x0800c792

0800a85c <__multiply>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	4617      	mov	r7, r2
 800a862:	690a      	ldr	r2, [r1, #16]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	429a      	cmp	r2, r3
 800a868:	bfa8      	it	ge
 800a86a:	463b      	movge	r3, r7
 800a86c:	4689      	mov	r9, r1
 800a86e:	bfa4      	itt	ge
 800a870:	460f      	movge	r7, r1
 800a872:	4699      	movge	r9, r3
 800a874:	693d      	ldr	r5, [r7, #16]
 800a876:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	eb05 060a 	add.w	r6, r5, sl
 800a882:	42b3      	cmp	r3, r6
 800a884:	b085      	sub	sp, #20
 800a886:	bfb8      	it	lt
 800a888:	3101      	addlt	r1, #1
 800a88a:	f7ff fedd 	bl	800a648 <_Balloc>
 800a88e:	b930      	cbnz	r0, 800a89e <__multiply+0x42>
 800a890:	4602      	mov	r2, r0
 800a892:	4b41      	ldr	r3, [pc, #260]	@ (800a998 <__multiply+0x13c>)
 800a894:	4841      	ldr	r0, [pc, #260]	@ (800a99c <__multiply+0x140>)
 800a896:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a89a:	f000 fc63 	bl	800b164 <__assert_func>
 800a89e:	f100 0414 	add.w	r4, r0, #20
 800a8a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a8a6:	4623      	mov	r3, r4
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	4573      	cmp	r3, lr
 800a8ac:	d320      	bcc.n	800a8f0 <__multiply+0x94>
 800a8ae:	f107 0814 	add.w	r8, r7, #20
 800a8b2:	f109 0114 	add.w	r1, r9, #20
 800a8b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a8ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a8be:	9302      	str	r3, [sp, #8]
 800a8c0:	1beb      	subs	r3, r5, r7
 800a8c2:	3b15      	subs	r3, #21
 800a8c4:	f023 0303 	bic.w	r3, r3, #3
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	3715      	adds	r7, #21
 800a8cc:	42bd      	cmp	r5, r7
 800a8ce:	bf38      	it	cc
 800a8d0:	2304      	movcc	r3, #4
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	9b02      	ldr	r3, [sp, #8]
 800a8d6:	9103      	str	r1, [sp, #12]
 800a8d8:	428b      	cmp	r3, r1
 800a8da:	d80c      	bhi.n	800a8f6 <__multiply+0x9a>
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	dd03      	ble.n	800a8e8 <__multiply+0x8c>
 800a8e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d055      	beq.n	800a994 <__multiply+0x138>
 800a8e8:	6106      	str	r6, [r0, #16]
 800a8ea:	b005      	add	sp, #20
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	f843 2b04 	str.w	r2, [r3], #4
 800a8f4:	e7d9      	b.n	800a8aa <__multiply+0x4e>
 800a8f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8fa:	f1ba 0f00 	cmp.w	sl, #0
 800a8fe:	d01f      	beq.n	800a940 <__multiply+0xe4>
 800a900:	46c4      	mov	ip, r8
 800a902:	46a1      	mov	r9, r4
 800a904:	2700      	movs	r7, #0
 800a906:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a90a:	f8d9 3000 	ldr.w	r3, [r9]
 800a90e:	fa1f fb82 	uxth.w	fp, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	fb0a 330b 	mla	r3, sl, fp, r3
 800a918:	443b      	add	r3, r7
 800a91a:	f8d9 7000 	ldr.w	r7, [r9]
 800a91e:	0c12      	lsrs	r2, r2, #16
 800a920:	0c3f      	lsrs	r7, r7, #16
 800a922:	fb0a 7202 	mla	r2, sl, r2, r7
 800a926:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a930:	4565      	cmp	r5, ip
 800a932:	f849 3b04 	str.w	r3, [r9], #4
 800a936:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a93a:	d8e4      	bhi.n	800a906 <__multiply+0xaa>
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	50e7      	str	r7, [r4, r3]
 800a940:	9b03      	ldr	r3, [sp, #12]
 800a942:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a946:	3104      	adds	r1, #4
 800a948:	f1b9 0f00 	cmp.w	r9, #0
 800a94c:	d020      	beq.n	800a990 <__multiply+0x134>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	4647      	mov	r7, r8
 800a952:	46a4      	mov	ip, r4
 800a954:	f04f 0a00 	mov.w	sl, #0
 800a958:	f8b7 b000 	ldrh.w	fp, [r7]
 800a95c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a960:	fb09 220b 	mla	r2, r9, fp, r2
 800a964:	4452      	add	r2, sl
 800a966:	b29b      	uxth	r3, r3
 800a968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a96c:	f84c 3b04 	str.w	r3, [ip], #4
 800a970:	f857 3b04 	ldr.w	r3, [r7], #4
 800a974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a978:	f8bc 3000 	ldrh.w	r3, [ip]
 800a97c:	fb09 330a 	mla	r3, r9, sl, r3
 800a980:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a984:	42bd      	cmp	r5, r7
 800a986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a98a:	d8e5      	bhi.n	800a958 <__multiply+0xfc>
 800a98c:	9a01      	ldr	r2, [sp, #4]
 800a98e:	50a3      	str	r3, [r4, r2]
 800a990:	3404      	adds	r4, #4
 800a992:	e79f      	b.n	800a8d4 <__multiply+0x78>
 800a994:	3e01      	subs	r6, #1
 800a996:	e7a1      	b.n	800a8dc <__multiply+0x80>
 800a998:	0800c781 	.word	0x0800c781
 800a99c:	0800c792 	.word	0x0800c792

0800a9a0 <__pow5mult>:
 800a9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a4:	4615      	mov	r5, r2
 800a9a6:	f012 0203 	ands.w	r2, r2, #3
 800a9aa:	4607      	mov	r7, r0
 800a9ac:	460e      	mov	r6, r1
 800a9ae:	d007      	beq.n	800a9c0 <__pow5mult+0x20>
 800a9b0:	4c25      	ldr	r4, [pc, #148]	@ (800aa48 <__pow5mult+0xa8>)
 800a9b2:	3a01      	subs	r2, #1
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9ba:	f7ff fea7 	bl	800a70c <__multadd>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	10ad      	asrs	r5, r5, #2
 800a9c2:	d03d      	beq.n	800aa40 <__pow5mult+0xa0>
 800a9c4:	69fc      	ldr	r4, [r7, #28]
 800a9c6:	b97c      	cbnz	r4, 800a9e8 <__pow5mult+0x48>
 800a9c8:	2010      	movs	r0, #16
 800a9ca:	f7ff fd87 	bl	800a4dc <malloc>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	61f8      	str	r0, [r7, #28]
 800a9d2:	b928      	cbnz	r0, 800a9e0 <__pow5mult+0x40>
 800a9d4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa4c <__pow5mult+0xac>)
 800a9d6:	481e      	ldr	r0, [pc, #120]	@ (800aa50 <__pow5mult+0xb0>)
 800a9d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9dc:	f000 fbc2 	bl	800b164 <__assert_func>
 800a9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9e4:	6004      	str	r4, [r0, #0]
 800a9e6:	60c4      	str	r4, [r0, #12]
 800a9e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9f0:	b94c      	cbnz	r4, 800aa06 <__pow5mult+0x66>
 800a9f2:	f240 2171 	movw	r1, #625	@ 0x271
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f7ff ff1a 	bl	800a830 <__i2b>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa02:	4604      	mov	r4, r0
 800aa04:	6003      	str	r3, [r0, #0]
 800aa06:	f04f 0900 	mov.w	r9, #0
 800aa0a:	07eb      	lsls	r3, r5, #31
 800aa0c:	d50a      	bpl.n	800aa24 <__pow5mult+0x84>
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4622      	mov	r2, r4
 800aa12:	4638      	mov	r0, r7
 800aa14:	f7ff ff22 	bl	800a85c <__multiply>
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4680      	mov	r8, r0
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f7ff fe53 	bl	800a6c8 <_Bfree>
 800aa22:	4646      	mov	r6, r8
 800aa24:	106d      	asrs	r5, r5, #1
 800aa26:	d00b      	beq.n	800aa40 <__pow5mult+0xa0>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	b938      	cbnz	r0, 800aa3c <__pow5mult+0x9c>
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4638      	mov	r0, r7
 800aa32:	f7ff ff13 	bl	800a85c <__multiply>
 800aa36:	6020      	str	r0, [r4, #0]
 800aa38:	f8c0 9000 	str.w	r9, [r0]
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	e7e4      	b.n	800aa0a <__pow5mult+0x6a>
 800aa40:	4630      	mov	r0, r6
 800aa42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa46:	bf00      	nop
 800aa48:	0800c844 	.word	0x0800c844
 800aa4c:	0800c712 	.word	0x0800c712
 800aa50:	0800c792 	.word	0x0800c792

0800aa54 <__lshift>:
 800aa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	460c      	mov	r4, r1
 800aa5a:	6849      	ldr	r1, [r1, #4]
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	4607      	mov	r7, r0
 800aa66:	4691      	mov	r9, r2
 800aa68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa6c:	f108 0601 	add.w	r6, r8, #1
 800aa70:	42b3      	cmp	r3, r6
 800aa72:	db0b      	blt.n	800aa8c <__lshift+0x38>
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff fde7 	bl	800a648 <_Balloc>
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	b948      	cbnz	r0, 800aa92 <__lshift+0x3e>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b28      	ldr	r3, [pc, #160]	@ (800ab24 <__lshift+0xd0>)
 800aa82:	4829      	ldr	r0, [pc, #164]	@ (800ab28 <__lshift+0xd4>)
 800aa84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa88:	f000 fb6c 	bl	800b164 <__assert_func>
 800aa8c:	3101      	adds	r1, #1
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	e7ee      	b.n	800aa70 <__lshift+0x1c>
 800aa92:	2300      	movs	r3, #0
 800aa94:	f100 0114 	add.w	r1, r0, #20
 800aa98:	f100 0210 	add.w	r2, r0, #16
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	4553      	cmp	r3, sl
 800aaa0:	db33      	blt.n	800ab0a <__lshift+0xb6>
 800aaa2:	6920      	ldr	r0, [r4, #16]
 800aaa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aaa8:	f104 0314 	add.w	r3, r4, #20
 800aaac:	f019 091f 	ands.w	r9, r9, #31
 800aab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aab8:	d02b      	beq.n	800ab12 <__lshift+0xbe>
 800aaba:	f1c9 0e20 	rsb	lr, r9, #32
 800aabe:	468a      	mov	sl, r1
 800aac0:	2200      	movs	r2, #0
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	fa00 f009 	lsl.w	r0, r0, r9
 800aac8:	4310      	orrs	r0, r2
 800aaca:	f84a 0b04 	str.w	r0, [sl], #4
 800aace:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad2:	459c      	cmp	ip, r3
 800aad4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aad8:	d8f3      	bhi.n	800aac2 <__lshift+0x6e>
 800aada:	ebac 0304 	sub.w	r3, ip, r4
 800aade:	3b15      	subs	r3, #21
 800aae0:	f023 0303 	bic.w	r3, r3, #3
 800aae4:	3304      	adds	r3, #4
 800aae6:	f104 0015 	add.w	r0, r4, #21
 800aaea:	4560      	cmp	r0, ip
 800aaec:	bf88      	it	hi
 800aaee:	2304      	movhi	r3, #4
 800aaf0:	50ca      	str	r2, [r1, r3]
 800aaf2:	b10a      	cbz	r2, 800aaf8 <__lshift+0xa4>
 800aaf4:	f108 0602 	add.w	r6, r8, #2
 800aaf8:	3e01      	subs	r6, #1
 800aafa:	4638      	mov	r0, r7
 800aafc:	612e      	str	r6, [r5, #16]
 800aafe:	4621      	mov	r1, r4
 800ab00:	f7ff fde2 	bl	800a6c8 <_Bfree>
 800ab04:	4628      	mov	r0, r5
 800ab06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab0e:	3301      	adds	r3, #1
 800ab10:	e7c5      	b.n	800aa9e <__lshift+0x4a>
 800ab12:	3904      	subs	r1, #4
 800ab14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab1c:	459c      	cmp	ip, r3
 800ab1e:	d8f9      	bhi.n	800ab14 <__lshift+0xc0>
 800ab20:	e7ea      	b.n	800aaf8 <__lshift+0xa4>
 800ab22:	bf00      	nop
 800ab24:	0800c781 	.word	0x0800c781
 800ab28:	0800c792 	.word	0x0800c792

0800ab2c <__mcmp>:
 800ab2c:	690a      	ldr	r2, [r1, #16]
 800ab2e:	4603      	mov	r3, r0
 800ab30:	6900      	ldr	r0, [r0, #16]
 800ab32:	1a80      	subs	r0, r0, r2
 800ab34:	b530      	push	{r4, r5, lr}
 800ab36:	d10e      	bne.n	800ab56 <__mcmp+0x2a>
 800ab38:	3314      	adds	r3, #20
 800ab3a:	3114      	adds	r1, #20
 800ab3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab4c:	4295      	cmp	r5, r2
 800ab4e:	d003      	beq.n	800ab58 <__mcmp+0x2c>
 800ab50:	d205      	bcs.n	800ab5e <__mcmp+0x32>
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295
 800ab56:	bd30      	pop	{r4, r5, pc}
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d3f3      	bcc.n	800ab44 <__mcmp+0x18>
 800ab5c:	e7fb      	b.n	800ab56 <__mcmp+0x2a>
 800ab5e:	2001      	movs	r0, #1
 800ab60:	e7f9      	b.n	800ab56 <__mcmp+0x2a>
	...

0800ab64 <__mdiff>:
 800ab64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	4689      	mov	r9, r1
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4648      	mov	r0, r9
 800ab70:	4614      	mov	r4, r2
 800ab72:	f7ff ffdb 	bl	800ab2c <__mcmp>
 800ab76:	1e05      	subs	r5, r0, #0
 800ab78:	d112      	bne.n	800aba0 <__mdiff+0x3c>
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff fd63 	bl	800a648 <_Balloc>
 800ab82:	4602      	mov	r2, r0
 800ab84:	b928      	cbnz	r0, 800ab92 <__mdiff+0x2e>
 800ab86:	4b3f      	ldr	r3, [pc, #252]	@ (800ac84 <__mdiff+0x120>)
 800ab88:	f240 2137 	movw	r1, #567	@ 0x237
 800ab8c:	483e      	ldr	r0, [pc, #248]	@ (800ac88 <__mdiff+0x124>)
 800ab8e:	f000 fae9 	bl	800b164 <__assert_func>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab98:	4610      	mov	r0, r2
 800ab9a:	b003      	add	sp, #12
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba0:	bfbc      	itt	lt
 800aba2:	464b      	movlt	r3, r9
 800aba4:	46a1      	movlt	r9, r4
 800aba6:	4630      	mov	r0, r6
 800aba8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800abac:	bfba      	itte	lt
 800abae:	461c      	movlt	r4, r3
 800abb0:	2501      	movlt	r5, #1
 800abb2:	2500      	movge	r5, #0
 800abb4:	f7ff fd48 	bl	800a648 <_Balloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	b918      	cbnz	r0, 800abc4 <__mdiff+0x60>
 800abbc:	4b31      	ldr	r3, [pc, #196]	@ (800ac84 <__mdiff+0x120>)
 800abbe:	f240 2145 	movw	r1, #581	@ 0x245
 800abc2:	e7e3      	b.n	800ab8c <__mdiff+0x28>
 800abc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800abc8:	6926      	ldr	r6, [r4, #16]
 800abca:	60c5      	str	r5, [r0, #12]
 800abcc:	f109 0310 	add.w	r3, r9, #16
 800abd0:	f109 0514 	add.w	r5, r9, #20
 800abd4:	f104 0e14 	add.w	lr, r4, #20
 800abd8:	f100 0b14 	add.w	fp, r0, #20
 800abdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abe0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	46d9      	mov	r9, fp
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	9b01      	ldr	r3, [sp, #4]
 800abee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	fa1f f38a 	uxth.w	r3, sl
 800abfc:	4619      	mov	r1, r3
 800abfe:	b283      	uxth	r3, r0
 800ac00:	1acb      	subs	r3, r1, r3
 800ac02:	0c00      	lsrs	r0, r0, #16
 800ac04:	4463      	add	r3, ip
 800ac06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac14:	4576      	cmp	r6, lr
 800ac16:	f849 3b04 	str.w	r3, [r9], #4
 800ac1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac1e:	d8e5      	bhi.n	800abec <__mdiff+0x88>
 800ac20:	1b33      	subs	r3, r6, r4
 800ac22:	3b15      	subs	r3, #21
 800ac24:	f023 0303 	bic.w	r3, r3, #3
 800ac28:	3415      	adds	r4, #21
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	42a6      	cmp	r6, r4
 800ac2e:	bf38      	it	cc
 800ac30:	2304      	movcc	r3, #4
 800ac32:	441d      	add	r5, r3
 800ac34:	445b      	add	r3, fp
 800ac36:	461e      	mov	r6, r3
 800ac38:	462c      	mov	r4, r5
 800ac3a:	4544      	cmp	r4, r8
 800ac3c:	d30e      	bcc.n	800ac5c <__mdiff+0xf8>
 800ac3e:	f108 0103 	add.w	r1, r8, #3
 800ac42:	1b49      	subs	r1, r1, r5
 800ac44:	f021 0103 	bic.w	r1, r1, #3
 800ac48:	3d03      	subs	r5, #3
 800ac4a:	45a8      	cmp	r8, r5
 800ac4c:	bf38      	it	cc
 800ac4e:	2100      	movcc	r1, #0
 800ac50:	440b      	add	r3, r1
 800ac52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac56:	b191      	cbz	r1, 800ac7e <__mdiff+0x11a>
 800ac58:	6117      	str	r7, [r2, #16]
 800ac5a:	e79d      	b.n	800ab98 <__mdiff+0x34>
 800ac5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac60:	46e6      	mov	lr, ip
 800ac62:	0c08      	lsrs	r0, r1, #16
 800ac64:	fa1c fc81 	uxtah	ip, ip, r1
 800ac68:	4471      	add	r1, lr
 800ac6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac6e:	b289      	uxth	r1, r1
 800ac70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac74:	f846 1b04 	str.w	r1, [r6], #4
 800ac78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac7c:	e7dd      	b.n	800ac3a <__mdiff+0xd6>
 800ac7e:	3f01      	subs	r7, #1
 800ac80:	e7e7      	b.n	800ac52 <__mdiff+0xee>
 800ac82:	bf00      	nop
 800ac84:	0800c781 	.word	0x0800c781
 800ac88:	0800c792 	.word	0x0800c792

0800ac8c <__d2b>:
 800ac8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac90:	460f      	mov	r7, r1
 800ac92:	2101      	movs	r1, #1
 800ac94:	ec59 8b10 	vmov	r8, r9, d0
 800ac98:	4616      	mov	r6, r2
 800ac9a:	f7ff fcd5 	bl	800a648 <_Balloc>
 800ac9e:	4604      	mov	r4, r0
 800aca0:	b930      	cbnz	r0, 800acb0 <__d2b+0x24>
 800aca2:	4602      	mov	r2, r0
 800aca4:	4b23      	ldr	r3, [pc, #140]	@ (800ad34 <__d2b+0xa8>)
 800aca6:	4824      	ldr	r0, [pc, #144]	@ (800ad38 <__d2b+0xac>)
 800aca8:	f240 310f 	movw	r1, #783	@ 0x30f
 800acac:	f000 fa5a 	bl	800b164 <__assert_func>
 800acb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb8:	b10d      	cbz	r5, 800acbe <__d2b+0x32>
 800acba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	f1b8 0300 	subs.w	r3, r8, #0
 800acc4:	d023      	beq.n	800ad0e <__d2b+0x82>
 800acc6:	4668      	mov	r0, sp
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	f7ff fd84 	bl	800a7d6 <__lo0bits>
 800acce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acd2:	b1d0      	cbz	r0, 800ad0a <__d2b+0x7e>
 800acd4:	f1c0 0320 	rsb	r3, r0, #32
 800acd8:	fa02 f303 	lsl.w	r3, r2, r3
 800acdc:	430b      	orrs	r3, r1
 800acde:	40c2      	lsrs	r2, r0
 800ace0:	6163      	str	r3, [r4, #20]
 800ace2:	9201      	str	r2, [sp, #4]
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	61a3      	str	r3, [r4, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bf0c      	ite	eq
 800acec:	2201      	moveq	r2, #1
 800acee:	2202      	movne	r2, #2
 800acf0:	6122      	str	r2, [r4, #16]
 800acf2:	b1a5      	cbz	r5, 800ad1e <__d2b+0x92>
 800acf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acf8:	4405      	add	r5, r0
 800acfa:	603d      	str	r5, [r7, #0]
 800acfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad00:	6030      	str	r0, [r6, #0]
 800ad02:	4620      	mov	r0, r4
 800ad04:	b003      	add	sp, #12
 800ad06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	6161      	str	r1, [r4, #20]
 800ad0c:	e7ea      	b.n	800ace4 <__d2b+0x58>
 800ad0e:	a801      	add	r0, sp, #4
 800ad10:	f7ff fd61 	bl	800a7d6 <__lo0bits>
 800ad14:	9b01      	ldr	r3, [sp, #4]
 800ad16:	6163      	str	r3, [r4, #20]
 800ad18:	3020      	adds	r0, #32
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	e7e8      	b.n	800acf0 <__d2b+0x64>
 800ad1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad26:	6038      	str	r0, [r7, #0]
 800ad28:	6918      	ldr	r0, [r3, #16]
 800ad2a:	f7ff fd35 	bl	800a798 <__hi0bits>
 800ad2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad32:	e7e5      	b.n	800ad00 <__d2b+0x74>
 800ad34:	0800c781 	.word	0x0800c781
 800ad38:	0800c792 	.word	0x0800c792

0800ad3c <__ssputs_r>:
 800ad3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad40:	688e      	ldr	r6, [r1, #8]
 800ad42:	461f      	mov	r7, r3
 800ad44:	42be      	cmp	r6, r7
 800ad46:	680b      	ldr	r3, [r1, #0]
 800ad48:	4682      	mov	sl, r0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	4690      	mov	r8, r2
 800ad4e:	d82d      	bhi.n	800adac <__ssputs_r+0x70>
 800ad50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad58:	d026      	beq.n	800ada8 <__ssputs_r+0x6c>
 800ad5a:	6965      	ldr	r5, [r4, #20]
 800ad5c:	6909      	ldr	r1, [r1, #16]
 800ad5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad62:	eba3 0901 	sub.w	r9, r3, r1
 800ad66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad6a:	1c7b      	adds	r3, r7, #1
 800ad6c:	444b      	add	r3, r9
 800ad6e:	106d      	asrs	r5, r5, #1
 800ad70:	429d      	cmp	r5, r3
 800ad72:	bf38      	it	cc
 800ad74:	461d      	movcc	r5, r3
 800ad76:	0553      	lsls	r3, r2, #21
 800ad78:	d527      	bpl.n	800adca <__ssputs_r+0x8e>
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7ff fbd8 	bl	800a530 <_malloc_r>
 800ad80:	4606      	mov	r6, r0
 800ad82:	b360      	cbz	r0, 800adde <__ssputs_r+0xa2>
 800ad84:	6921      	ldr	r1, [r4, #16]
 800ad86:	464a      	mov	r2, r9
 800ad88:	f7fe fcf7 	bl	800977a <memcpy>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	6126      	str	r6, [r4, #16]
 800ad9a:	6165      	str	r5, [r4, #20]
 800ad9c:	444e      	add	r6, r9
 800ad9e:	eba5 0509 	sub.w	r5, r5, r9
 800ada2:	6026      	str	r6, [r4, #0]
 800ada4:	60a5      	str	r5, [r4, #8]
 800ada6:	463e      	mov	r6, r7
 800ada8:	42be      	cmp	r6, r7
 800adaa:	d900      	bls.n	800adae <__ssputs_r+0x72>
 800adac:	463e      	mov	r6, r7
 800adae:	6820      	ldr	r0, [r4, #0]
 800adb0:	4632      	mov	r2, r6
 800adb2:	4641      	mov	r1, r8
 800adb4:	f7fe fc29 	bl	800960a <memmove>
 800adb8:	68a3      	ldr	r3, [r4, #8]
 800adba:	1b9b      	subs	r3, r3, r6
 800adbc:	60a3      	str	r3, [r4, #8]
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	4433      	add	r3, r6
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	2000      	movs	r0, #0
 800adc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adca:	462a      	mov	r2, r5
 800adcc:	f000 fa0e 	bl	800b1ec <_realloc_r>
 800add0:	4606      	mov	r6, r0
 800add2:	2800      	cmp	r0, #0
 800add4:	d1e0      	bne.n	800ad98 <__ssputs_r+0x5c>
 800add6:	6921      	ldr	r1, [r4, #16]
 800add8:	4650      	mov	r0, sl
 800adda:	f7ff fb35 	bl	800a448 <_free_r>
 800adde:	230c      	movs	r3, #12
 800ade0:	f8ca 3000 	str.w	r3, [sl]
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	f04f 30ff 	mov.w	r0, #4294967295
 800adf0:	e7e9      	b.n	800adc6 <__ssputs_r+0x8a>
	...

0800adf4 <_svfiprintf_r>:
 800adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	4698      	mov	r8, r3
 800adfa:	898b      	ldrh	r3, [r1, #12]
 800adfc:	061b      	lsls	r3, r3, #24
 800adfe:	b09d      	sub	sp, #116	@ 0x74
 800ae00:	4607      	mov	r7, r0
 800ae02:	460d      	mov	r5, r1
 800ae04:	4614      	mov	r4, r2
 800ae06:	d510      	bpl.n	800ae2a <_svfiprintf_r+0x36>
 800ae08:	690b      	ldr	r3, [r1, #16]
 800ae0a:	b973      	cbnz	r3, 800ae2a <_svfiprintf_r+0x36>
 800ae0c:	2140      	movs	r1, #64	@ 0x40
 800ae0e:	f7ff fb8f 	bl	800a530 <_malloc_r>
 800ae12:	6028      	str	r0, [r5, #0]
 800ae14:	6128      	str	r0, [r5, #16]
 800ae16:	b930      	cbnz	r0, 800ae26 <_svfiprintf_r+0x32>
 800ae18:	230c      	movs	r3, #12
 800ae1a:	603b      	str	r3, [r7, #0]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	b01d      	add	sp, #116	@ 0x74
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae26:	2340      	movs	r3, #64	@ 0x40
 800ae28:	616b      	str	r3, [r5, #20]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae2e:	2320      	movs	r3, #32
 800ae30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae38:	2330      	movs	r3, #48	@ 0x30
 800ae3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afd8 <_svfiprintf_r+0x1e4>
 800ae3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae42:	f04f 0901 	mov.w	r9, #1
 800ae46:	4623      	mov	r3, r4
 800ae48:	469a      	mov	sl, r3
 800ae4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae4e:	b10a      	cbz	r2, 800ae54 <_svfiprintf_r+0x60>
 800ae50:	2a25      	cmp	r2, #37	@ 0x25
 800ae52:	d1f9      	bne.n	800ae48 <_svfiprintf_r+0x54>
 800ae54:	ebba 0b04 	subs.w	fp, sl, r4
 800ae58:	d00b      	beq.n	800ae72 <_svfiprintf_r+0x7e>
 800ae5a:	465b      	mov	r3, fp
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff ff6b 	bl	800ad3c <__ssputs_r>
 800ae66:	3001      	adds	r0, #1
 800ae68:	f000 80a7 	beq.w	800afba <_svfiprintf_r+0x1c6>
 800ae6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae6e:	445a      	add	r2, fp
 800ae70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae72:	f89a 3000 	ldrb.w	r3, [sl]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 809f 	beq.w	800afba <_svfiprintf_r+0x1c6>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae86:	f10a 0a01 	add.w	sl, sl, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9307      	str	r3, [sp, #28]
 800ae8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae92:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae94:	4654      	mov	r4, sl
 800ae96:	2205      	movs	r2, #5
 800ae98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9c:	484e      	ldr	r0, [pc, #312]	@ (800afd8 <_svfiprintf_r+0x1e4>)
 800ae9e:	f7f5 f9b7 	bl	8000210 <memchr>
 800aea2:	9a04      	ldr	r2, [sp, #16]
 800aea4:	b9d8      	cbnz	r0, 800aede <_svfiprintf_r+0xea>
 800aea6:	06d0      	lsls	r0, r2, #27
 800aea8:	bf44      	itt	mi
 800aeaa:	2320      	movmi	r3, #32
 800aeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb0:	0711      	lsls	r1, r2, #28
 800aeb2:	bf44      	itt	mi
 800aeb4:	232b      	movmi	r3, #43	@ 0x2b
 800aeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeba:	f89a 3000 	ldrb.w	r3, [sl]
 800aebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec0:	d015      	beq.n	800aeee <_svfiprintf_r+0xfa>
 800aec2:	9a07      	ldr	r2, [sp, #28]
 800aec4:	4654      	mov	r4, sl
 800aec6:	2000      	movs	r0, #0
 800aec8:	f04f 0c0a 	mov.w	ip, #10
 800aecc:	4621      	mov	r1, r4
 800aece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed2:	3b30      	subs	r3, #48	@ 0x30
 800aed4:	2b09      	cmp	r3, #9
 800aed6:	d94b      	bls.n	800af70 <_svfiprintf_r+0x17c>
 800aed8:	b1b0      	cbz	r0, 800af08 <_svfiprintf_r+0x114>
 800aeda:	9207      	str	r2, [sp, #28]
 800aedc:	e014      	b.n	800af08 <_svfiprintf_r+0x114>
 800aede:	eba0 0308 	sub.w	r3, r0, r8
 800aee2:	fa09 f303 	lsl.w	r3, r9, r3
 800aee6:	4313      	orrs	r3, r2
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	46a2      	mov	sl, r4
 800aeec:	e7d2      	b.n	800ae94 <_svfiprintf_r+0xa0>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	1d19      	adds	r1, r3, #4
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	9103      	str	r1, [sp, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bfbb      	ittet	lt
 800aefa:	425b      	neglt	r3, r3
 800aefc:	f042 0202 	orrlt.w	r2, r2, #2
 800af00:	9307      	strge	r3, [sp, #28]
 800af02:	9307      	strlt	r3, [sp, #28]
 800af04:	bfb8      	it	lt
 800af06:	9204      	strlt	r2, [sp, #16]
 800af08:	7823      	ldrb	r3, [r4, #0]
 800af0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af0c:	d10a      	bne.n	800af24 <_svfiprintf_r+0x130>
 800af0e:	7863      	ldrb	r3, [r4, #1]
 800af10:	2b2a      	cmp	r3, #42	@ 0x2a
 800af12:	d132      	bne.n	800af7a <_svfiprintf_r+0x186>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	1d1a      	adds	r2, r3, #4
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	9203      	str	r2, [sp, #12]
 800af1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af20:	3402      	adds	r4, #2
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afe8 <_svfiprintf_r+0x1f4>
 800af28:	7821      	ldrb	r1, [r4, #0]
 800af2a:	2203      	movs	r2, #3
 800af2c:	4650      	mov	r0, sl
 800af2e:	f7f5 f96f 	bl	8000210 <memchr>
 800af32:	b138      	cbz	r0, 800af44 <_svfiprintf_r+0x150>
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	eba0 000a 	sub.w	r0, r0, sl
 800af3a:	2240      	movs	r2, #64	@ 0x40
 800af3c:	4082      	lsls	r2, r0
 800af3e:	4313      	orrs	r3, r2
 800af40:	3401      	adds	r4, #1
 800af42:	9304      	str	r3, [sp, #16]
 800af44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af48:	4824      	ldr	r0, [pc, #144]	@ (800afdc <_svfiprintf_r+0x1e8>)
 800af4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af4e:	2206      	movs	r2, #6
 800af50:	f7f5 f95e 	bl	8000210 <memchr>
 800af54:	2800      	cmp	r0, #0
 800af56:	d036      	beq.n	800afc6 <_svfiprintf_r+0x1d2>
 800af58:	4b21      	ldr	r3, [pc, #132]	@ (800afe0 <_svfiprintf_r+0x1ec>)
 800af5a:	bb1b      	cbnz	r3, 800afa4 <_svfiprintf_r+0x1b0>
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	3307      	adds	r3, #7
 800af60:	f023 0307 	bic.w	r3, r3, #7
 800af64:	3308      	adds	r3, #8
 800af66:	9303      	str	r3, [sp, #12]
 800af68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af6a:	4433      	add	r3, r6
 800af6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af6e:	e76a      	b.n	800ae46 <_svfiprintf_r+0x52>
 800af70:	fb0c 3202 	mla	r2, ip, r2, r3
 800af74:	460c      	mov	r4, r1
 800af76:	2001      	movs	r0, #1
 800af78:	e7a8      	b.n	800aecc <_svfiprintf_r+0xd8>
 800af7a:	2300      	movs	r3, #0
 800af7c:	3401      	adds	r4, #1
 800af7e:	9305      	str	r3, [sp, #20]
 800af80:	4619      	mov	r1, r3
 800af82:	f04f 0c0a 	mov.w	ip, #10
 800af86:	4620      	mov	r0, r4
 800af88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af8c:	3a30      	subs	r2, #48	@ 0x30
 800af8e:	2a09      	cmp	r2, #9
 800af90:	d903      	bls.n	800af9a <_svfiprintf_r+0x1a6>
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0c6      	beq.n	800af24 <_svfiprintf_r+0x130>
 800af96:	9105      	str	r1, [sp, #20]
 800af98:	e7c4      	b.n	800af24 <_svfiprintf_r+0x130>
 800af9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af9e:	4604      	mov	r4, r0
 800afa0:	2301      	movs	r3, #1
 800afa2:	e7f0      	b.n	800af86 <_svfiprintf_r+0x192>
 800afa4:	ab03      	add	r3, sp, #12
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	462a      	mov	r2, r5
 800afaa:	4b0e      	ldr	r3, [pc, #56]	@ (800afe4 <_svfiprintf_r+0x1f0>)
 800afac:	a904      	add	r1, sp, #16
 800afae:	4638      	mov	r0, r7
 800afb0:	f7fd fe3a 	bl	8008c28 <_printf_float>
 800afb4:	1c42      	adds	r2, r0, #1
 800afb6:	4606      	mov	r6, r0
 800afb8:	d1d6      	bne.n	800af68 <_svfiprintf_r+0x174>
 800afba:	89ab      	ldrh	r3, [r5, #12]
 800afbc:	065b      	lsls	r3, r3, #25
 800afbe:	f53f af2d 	bmi.w	800ae1c <_svfiprintf_r+0x28>
 800afc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afc4:	e72c      	b.n	800ae20 <_svfiprintf_r+0x2c>
 800afc6:	ab03      	add	r3, sp, #12
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	462a      	mov	r2, r5
 800afcc:	4b05      	ldr	r3, [pc, #20]	@ (800afe4 <_svfiprintf_r+0x1f0>)
 800afce:	a904      	add	r1, sp, #16
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7fe f8c1 	bl	8009158 <_printf_i>
 800afd6:	e7ed      	b.n	800afb4 <_svfiprintf_r+0x1c0>
 800afd8:	0800c7eb 	.word	0x0800c7eb
 800afdc:	0800c7f5 	.word	0x0800c7f5
 800afe0:	08008c29 	.word	0x08008c29
 800afe4:	0800ad3d 	.word	0x0800ad3d
 800afe8:	0800c7f1 	.word	0x0800c7f1

0800afec <__sflush_r>:
 800afec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff4:	0716      	lsls	r6, r2, #28
 800aff6:	4605      	mov	r5, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	d454      	bmi.n	800b0a6 <__sflush_r+0xba>
 800affc:	684b      	ldr	r3, [r1, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	dc02      	bgt.n	800b008 <__sflush_r+0x1c>
 800b002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b004:	2b00      	cmp	r3, #0
 800b006:	dd48      	ble.n	800b09a <__sflush_r+0xae>
 800b008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b00a:	2e00      	cmp	r6, #0
 800b00c:	d045      	beq.n	800b09a <__sflush_r+0xae>
 800b00e:	2300      	movs	r3, #0
 800b010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b014:	682f      	ldr	r7, [r5, #0]
 800b016:	6a21      	ldr	r1, [r4, #32]
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	d030      	beq.n	800b07e <__sflush_r+0x92>
 800b01c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	0759      	lsls	r1, r3, #29
 800b022:	d505      	bpl.n	800b030 <__sflush_r+0x44>
 800b024:	6863      	ldr	r3, [r4, #4]
 800b026:	1ad2      	subs	r2, r2, r3
 800b028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b02a:	b10b      	cbz	r3, 800b030 <__sflush_r+0x44>
 800b02c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	2300      	movs	r3, #0
 800b032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b034:	6a21      	ldr	r1, [r4, #32]
 800b036:	4628      	mov	r0, r5
 800b038:	47b0      	blx	r6
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	d106      	bne.n	800b04e <__sflush_r+0x62>
 800b040:	6829      	ldr	r1, [r5, #0]
 800b042:	291d      	cmp	r1, #29
 800b044:	d82b      	bhi.n	800b09e <__sflush_r+0xb2>
 800b046:	4a2a      	ldr	r2, [pc, #168]	@ (800b0f0 <__sflush_r+0x104>)
 800b048:	40ca      	lsrs	r2, r1
 800b04a:	07d6      	lsls	r6, r2, #31
 800b04c:	d527      	bpl.n	800b09e <__sflush_r+0xb2>
 800b04e:	2200      	movs	r2, #0
 800b050:	6062      	str	r2, [r4, #4]
 800b052:	04d9      	lsls	r1, r3, #19
 800b054:	6922      	ldr	r2, [r4, #16]
 800b056:	6022      	str	r2, [r4, #0]
 800b058:	d504      	bpl.n	800b064 <__sflush_r+0x78>
 800b05a:	1c42      	adds	r2, r0, #1
 800b05c:	d101      	bne.n	800b062 <__sflush_r+0x76>
 800b05e:	682b      	ldr	r3, [r5, #0]
 800b060:	b903      	cbnz	r3, 800b064 <__sflush_r+0x78>
 800b062:	6560      	str	r0, [r4, #84]	@ 0x54
 800b064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b066:	602f      	str	r7, [r5, #0]
 800b068:	b1b9      	cbz	r1, 800b09a <__sflush_r+0xae>
 800b06a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b06e:	4299      	cmp	r1, r3
 800b070:	d002      	beq.n	800b078 <__sflush_r+0x8c>
 800b072:	4628      	mov	r0, r5
 800b074:	f7ff f9e8 	bl	800a448 <_free_r>
 800b078:	2300      	movs	r3, #0
 800b07a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b07c:	e00d      	b.n	800b09a <__sflush_r+0xae>
 800b07e:	2301      	movs	r3, #1
 800b080:	4628      	mov	r0, r5
 800b082:	47b0      	blx	r6
 800b084:	4602      	mov	r2, r0
 800b086:	1c50      	adds	r0, r2, #1
 800b088:	d1c9      	bne.n	800b01e <__sflush_r+0x32>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d0c6      	beq.n	800b01e <__sflush_r+0x32>
 800b090:	2b1d      	cmp	r3, #29
 800b092:	d001      	beq.n	800b098 <__sflush_r+0xac>
 800b094:	2b16      	cmp	r3, #22
 800b096:	d11e      	bne.n	800b0d6 <__sflush_r+0xea>
 800b098:	602f      	str	r7, [r5, #0]
 800b09a:	2000      	movs	r0, #0
 800b09c:	e022      	b.n	800b0e4 <__sflush_r+0xf8>
 800b09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a2:	b21b      	sxth	r3, r3
 800b0a4:	e01b      	b.n	800b0de <__sflush_r+0xf2>
 800b0a6:	690f      	ldr	r7, [r1, #16]
 800b0a8:	2f00      	cmp	r7, #0
 800b0aa:	d0f6      	beq.n	800b09a <__sflush_r+0xae>
 800b0ac:	0793      	lsls	r3, r2, #30
 800b0ae:	680e      	ldr	r6, [r1, #0]
 800b0b0:	bf08      	it	eq
 800b0b2:	694b      	ldreq	r3, [r1, #20]
 800b0b4:	600f      	str	r7, [r1, #0]
 800b0b6:	bf18      	it	ne
 800b0b8:	2300      	movne	r3, #0
 800b0ba:	eba6 0807 	sub.w	r8, r6, r7
 800b0be:	608b      	str	r3, [r1, #8]
 800b0c0:	f1b8 0f00 	cmp.w	r8, #0
 800b0c4:	dde9      	ble.n	800b09a <__sflush_r+0xae>
 800b0c6:	6a21      	ldr	r1, [r4, #32]
 800b0c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0ca:	4643      	mov	r3, r8
 800b0cc:	463a      	mov	r2, r7
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	47b0      	blx	r6
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	dc08      	bgt.n	800b0e8 <__sflush_r+0xfc>
 800b0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0de:	81a3      	strh	r3, [r4, #12]
 800b0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e8:	4407      	add	r7, r0
 800b0ea:	eba8 0800 	sub.w	r8, r8, r0
 800b0ee:	e7e7      	b.n	800b0c0 <__sflush_r+0xd4>
 800b0f0:	20400001 	.word	0x20400001

0800b0f4 <_fflush_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	690b      	ldr	r3, [r1, #16]
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	b913      	cbnz	r3, 800b104 <_fflush_r+0x10>
 800b0fe:	2500      	movs	r5, #0
 800b100:	4628      	mov	r0, r5
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	b118      	cbz	r0, 800b10e <_fflush_r+0x1a>
 800b106:	6a03      	ldr	r3, [r0, #32]
 800b108:	b90b      	cbnz	r3, 800b10e <_fflush_r+0x1a>
 800b10a:	f7fe f9cf 	bl	80094ac <__sinit>
 800b10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0f3      	beq.n	800b0fe <_fflush_r+0xa>
 800b116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b118:	07d0      	lsls	r0, r2, #31
 800b11a:	d404      	bmi.n	800b126 <_fflush_r+0x32>
 800b11c:	0599      	lsls	r1, r3, #22
 800b11e:	d402      	bmi.n	800b126 <_fflush_r+0x32>
 800b120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b122:	f7fe fb28 	bl	8009776 <__retarget_lock_acquire_recursive>
 800b126:	4628      	mov	r0, r5
 800b128:	4621      	mov	r1, r4
 800b12a:	f7ff ff5f 	bl	800afec <__sflush_r>
 800b12e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b130:	07da      	lsls	r2, r3, #31
 800b132:	4605      	mov	r5, r0
 800b134:	d4e4      	bmi.n	800b100 <_fflush_r+0xc>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	059b      	lsls	r3, r3, #22
 800b13a:	d4e1      	bmi.n	800b100 <_fflush_r+0xc>
 800b13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b13e:	f7fe fb1b 	bl	8009778 <__retarget_lock_release_recursive>
 800b142:	e7dd      	b.n	800b100 <_fflush_r+0xc>

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d06      	ldr	r5, [pc, #24]	@ (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f7 f94a 	bl	80023e8 <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	20007244 	.word	0x20007244

0800b164 <__assert_func>:
 800b164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b166:	4614      	mov	r4, r2
 800b168:	461a      	mov	r2, r3
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <__assert_func+0x2c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4605      	mov	r5, r0
 800b170:	68d8      	ldr	r0, [r3, #12]
 800b172:	b14c      	cbz	r4, 800b188 <__assert_func+0x24>
 800b174:	4b07      	ldr	r3, [pc, #28]	@ (800b194 <__assert_func+0x30>)
 800b176:	9100      	str	r1, [sp, #0]
 800b178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b17c:	4906      	ldr	r1, [pc, #24]	@ (800b198 <__assert_func+0x34>)
 800b17e:	462b      	mov	r3, r5
 800b180:	f000 f870 	bl	800b264 <fiprintf>
 800b184:	f000 f880 	bl	800b288 <abort>
 800b188:	4b04      	ldr	r3, [pc, #16]	@ (800b19c <__assert_func+0x38>)
 800b18a:	461c      	mov	r4, r3
 800b18c:	e7f3      	b.n	800b176 <__assert_func+0x12>
 800b18e:	bf00      	nop
 800b190:	20000024 	.word	0x20000024
 800b194:	0800c806 	.word	0x0800c806
 800b198:	0800c813 	.word	0x0800c813
 800b19c:	0800c841 	.word	0x0800c841

0800b1a0 <_calloc_r>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	fba1 5402 	umull	r5, r4, r1, r2
 800b1a6:	b934      	cbnz	r4, 800b1b6 <_calloc_r+0x16>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	f7ff f9c1 	bl	800a530 <_malloc_r>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	b928      	cbnz	r0, 800b1be <_calloc_r+0x1e>
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
 800b1b6:	220c      	movs	r2, #12
 800b1b8:	6002      	str	r2, [r0, #0]
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	e7f9      	b.n	800b1b2 <_calloc_r+0x12>
 800b1be:	462a      	mov	r2, r5
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	f7fe fa3c 	bl	800963e <memset>
 800b1c6:	e7f4      	b.n	800b1b2 <_calloc_r+0x12>

0800b1c8 <__ascii_mbtowc>:
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	b901      	cbnz	r1, 800b1ce <__ascii_mbtowc+0x6>
 800b1cc:	a901      	add	r1, sp, #4
 800b1ce:	b142      	cbz	r2, 800b1e2 <__ascii_mbtowc+0x1a>
 800b1d0:	b14b      	cbz	r3, 800b1e6 <__ascii_mbtowc+0x1e>
 800b1d2:	7813      	ldrb	r3, [r2, #0]
 800b1d4:	600b      	str	r3, [r1, #0]
 800b1d6:	7812      	ldrb	r2, [r2, #0]
 800b1d8:	1e10      	subs	r0, r2, #0
 800b1da:	bf18      	it	ne
 800b1dc:	2001      	movne	r0, #1
 800b1de:	b002      	add	sp, #8
 800b1e0:	4770      	bx	lr
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	e7fb      	b.n	800b1de <__ascii_mbtowc+0x16>
 800b1e6:	f06f 0001 	mvn.w	r0, #1
 800b1ea:	e7f8      	b.n	800b1de <__ascii_mbtowc+0x16>

0800b1ec <_realloc_r>:
 800b1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	4614      	mov	r4, r2
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	b921      	cbnz	r1, 800b202 <_realloc_r+0x16>
 800b1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	f7ff b997 	b.w	800a530 <_malloc_r>
 800b202:	b92a      	cbnz	r2, 800b210 <_realloc_r+0x24>
 800b204:	f7ff f920 	bl	800a448 <_free_r>
 800b208:	4625      	mov	r5, r4
 800b20a:	4628      	mov	r0, r5
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	f000 f841 	bl	800b296 <_malloc_usable_size_r>
 800b214:	4284      	cmp	r4, r0
 800b216:	4606      	mov	r6, r0
 800b218:	d802      	bhi.n	800b220 <_realloc_r+0x34>
 800b21a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b21e:	d8f4      	bhi.n	800b20a <_realloc_r+0x1e>
 800b220:	4621      	mov	r1, r4
 800b222:	4638      	mov	r0, r7
 800b224:	f7ff f984 	bl	800a530 <_malloc_r>
 800b228:	4680      	mov	r8, r0
 800b22a:	b908      	cbnz	r0, 800b230 <_realloc_r+0x44>
 800b22c:	4645      	mov	r5, r8
 800b22e:	e7ec      	b.n	800b20a <_realloc_r+0x1e>
 800b230:	42b4      	cmp	r4, r6
 800b232:	4622      	mov	r2, r4
 800b234:	4629      	mov	r1, r5
 800b236:	bf28      	it	cs
 800b238:	4632      	movcs	r2, r6
 800b23a:	f7fe fa9e 	bl	800977a <memcpy>
 800b23e:	4629      	mov	r1, r5
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff f901 	bl	800a448 <_free_r>
 800b246:	e7f1      	b.n	800b22c <_realloc_r+0x40>

0800b248 <__ascii_wctomb>:
 800b248:	4603      	mov	r3, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	b141      	cbz	r1, 800b260 <__ascii_wctomb+0x18>
 800b24e:	2aff      	cmp	r2, #255	@ 0xff
 800b250:	d904      	bls.n	800b25c <__ascii_wctomb+0x14>
 800b252:	228a      	movs	r2, #138	@ 0x8a
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f04f 30ff 	mov.w	r0, #4294967295
 800b25a:	4770      	bx	lr
 800b25c:	700a      	strb	r2, [r1, #0]
 800b25e:	2001      	movs	r0, #1
 800b260:	4770      	bx	lr
	...

0800b264 <fiprintf>:
 800b264:	b40e      	push	{r1, r2, r3}
 800b266:	b503      	push	{r0, r1, lr}
 800b268:	4601      	mov	r1, r0
 800b26a:	ab03      	add	r3, sp, #12
 800b26c:	4805      	ldr	r0, [pc, #20]	@ (800b284 <fiprintf+0x20>)
 800b26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b272:	6800      	ldr	r0, [r0, #0]
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	f000 f83f 	bl	800b2f8 <_vfiprintf_r>
 800b27a:	b002      	add	sp, #8
 800b27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b280:	b003      	add	sp, #12
 800b282:	4770      	bx	lr
 800b284:	20000024 	.word	0x20000024

0800b288 <abort>:
 800b288:	b508      	push	{r3, lr}
 800b28a:	2006      	movs	r0, #6
 800b28c:	f000 fa08 	bl	800b6a0 <raise>
 800b290:	2001      	movs	r0, #1
 800b292:	f7f7 f831 	bl	80022f8 <_exit>

0800b296 <_malloc_usable_size_r>:
 800b296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b29a:	1f18      	subs	r0, r3, #4
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfbc      	itt	lt
 800b2a0:	580b      	ldrlt	r3, [r1, r0]
 800b2a2:	18c0      	addlt	r0, r0, r3
 800b2a4:	4770      	bx	lr

0800b2a6 <__sfputc_r>:
 800b2a6:	6893      	ldr	r3, [r2, #8]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	b410      	push	{r4}
 800b2ae:	6093      	str	r3, [r2, #8]
 800b2b0:	da08      	bge.n	800b2c4 <__sfputc_r+0x1e>
 800b2b2:	6994      	ldr	r4, [r2, #24]
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	db01      	blt.n	800b2bc <__sfputc_r+0x16>
 800b2b8:	290a      	cmp	r1, #10
 800b2ba:	d103      	bne.n	800b2c4 <__sfputc_r+0x1e>
 800b2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2c0:	f000 b932 	b.w	800b528 <__swbuf_r>
 800b2c4:	6813      	ldr	r3, [r2, #0]
 800b2c6:	1c58      	adds	r0, r3, #1
 800b2c8:	6010      	str	r0, [r2, #0]
 800b2ca:	7019      	strb	r1, [r3, #0]
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <__sfputs_r>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460f      	mov	r7, r1
 800b2da:	4614      	mov	r4, r2
 800b2dc:	18d5      	adds	r5, r2, r3
 800b2de:	42ac      	cmp	r4, r5
 800b2e0:	d101      	bne.n	800b2e6 <__sfputs_r+0x12>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e007      	b.n	800b2f6 <__sfputs_r+0x22>
 800b2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ea:	463a      	mov	r2, r7
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f7ff ffda 	bl	800b2a6 <__sfputc_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	d1f3      	bne.n	800b2de <__sfputs_r+0xa>
 800b2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2f8 <_vfiprintf_r>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	b09d      	sub	sp, #116	@ 0x74
 800b300:	4614      	mov	r4, r2
 800b302:	4698      	mov	r8, r3
 800b304:	4606      	mov	r6, r0
 800b306:	b118      	cbz	r0, 800b310 <_vfiprintf_r+0x18>
 800b308:	6a03      	ldr	r3, [r0, #32]
 800b30a:	b90b      	cbnz	r3, 800b310 <_vfiprintf_r+0x18>
 800b30c:	f7fe f8ce 	bl	80094ac <__sinit>
 800b310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b312:	07d9      	lsls	r1, r3, #31
 800b314:	d405      	bmi.n	800b322 <_vfiprintf_r+0x2a>
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	059a      	lsls	r2, r3, #22
 800b31a:	d402      	bmi.n	800b322 <_vfiprintf_r+0x2a>
 800b31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b31e:	f7fe fa2a 	bl	8009776 <__retarget_lock_acquire_recursive>
 800b322:	89ab      	ldrh	r3, [r5, #12]
 800b324:	071b      	lsls	r3, r3, #28
 800b326:	d501      	bpl.n	800b32c <_vfiprintf_r+0x34>
 800b328:	692b      	ldr	r3, [r5, #16]
 800b32a:	b99b      	cbnz	r3, 800b354 <_vfiprintf_r+0x5c>
 800b32c:	4629      	mov	r1, r5
 800b32e:	4630      	mov	r0, r6
 800b330:	f000 f938 	bl	800b5a4 <__swsetup_r>
 800b334:	b170      	cbz	r0, 800b354 <_vfiprintf_r+0x5c>
 800b336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b338:	07dc      	lsls	r4, r3, #31
 800b33a:	d504      	bpl.n	800b346 <_vfiprintf_r+0x4e>
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	b01d      	add	sp, #116	@ 0x74
 800b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	0598      	lsls	r0, r3, #22
 800b34a:	d4f7      	bmi.n	800b33c <_vfiprintf_r+0x44>
 800b34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b34e:	f7fe fa13 	bl	8009778 <__retarget_lock_release_recursive>
 800b352:	e7f3      	b.n	800b33c <_vfiprintf_r+0x44>
 800b354:	2300      	movs	r3, #0
 800b356:	9309      	str	r3, [sp, #36]	@ 0x24
 800b358:	2320      	movs	r3, #32
 800b35a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b362:	2330      	movs	r3, #48	@ 0x30
 800b364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b514 <_vfiprintf_r+0x21c>
 800b368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b36c:	f04f 0901 	mov.w	r9, #1
 800b370:	4623      	mov	r3, r4
 800b372:	469a      	mov	sl, r3
 800b374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b378:	b10a      	cbz	r2, 800b37e <_vfiprintf_r+0x86>
 800b37a:	2a25      	cmp	r2, #37	@ 0x25
 800b37c:	d1f9      	bne.n	800b372 <_vfiprintf_r+0x7a>
 800b37e:	ebba 0b04 	subs.w	fp, sl, r4
 800b382:	d00b      	beq.n	800b39c <_vfiprintf_r+0xa4>
 800b384:	465b      	mov	r3, fp
 800b386:	4622      	mov	r2, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7ff ffa2 	bl	800b2d4 <__sfputs_r>
 800b390:	3001      	adds	r0, #1
 800b392:	f000 80a7 	beq.w	800b4e4 <_vfiprintf_r+0x1ec>
 800b396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b398:	445a      	add	r2, fp
 800b39a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b39c:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 809f 	beq.w	800b4e4 <_vfiprintf_r+0x1ec>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b0:	f10a 0a01 	add.w	sl, sl, #1
 800b3b4:	9304      	str	r3, [sp, #16]
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3be:	4654      	mov	r4, sl
 800b3c0:	2205      	movs	r2, #5
 800b3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c6:	4853      	ldr	r0, [pc, #332]	@ (800b514 <_vfiprintf_r+0x21c>)
 800b3c8:	f7f4 ff22 	bl	8000210 <memchr>
 800b3cc:	9a04      	ldr	r2, [sp, #16]
 800b3ce:	b9d8      	cbnz	r0, 800b408 <_vfiprintf_r+0x110>
 800b3d0:	06d1      	lsls	r1, r2, #27
 800b3d2:	bf44      	itt	mi
 800b3d4:	2320      	movmi	r3, #32
 800b3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3da:	0713      	lsls	r3, r2, #28
 800b3dc:	bf44      	itt	mi
 800b3de:	232b      	movmi	r3, #43	@ 0x2b
 800b3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ea:	d015      	beq.n	800b418 <_vfiprintf_r+0x120>
 800b3ec:	9a07      	ldr	r2, [sp, #28]
 800b3ee:	4654      	mov	r4, sl
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f04f 0c0a 	mov.w	ip, #10
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3fc:	3b30      	subs	r3, #48	@ 0x30
 800b3fe:	2b09      	cmp	r3, #9
 800b400:	d94b      	bls.n	800b49a <_vfiprintf_r+0x1a2>
 800b402:	b1b0      	cbz	r0, 800b432 <_vfiprintf_r+0x13a>
 800b404:	9207      	str	r2, [sp, #28]
 800b406:	e014      	b.n	800b432 <_vfiprintf_r+0x13a>
 800b408:	eba0 0308 	sub.w	r3, r0, r8
 800b40c:	fa09 f303 	lsl.w	r3, r9, r3
 800b410:	4313      	orrs	r3, r2
 800b412:	9304      	str	r3, [sp, #16]
 800b414:	46a2      	mov	sl, r4
 800b416:	e7d2      	b.n	800b3be <_vfiprintf_r+0xc6>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	1d19      	adds	r1, r3, #4
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	9103      	str	r1, [sp, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	bfbb      	ittet	lt
 800b424:	425b      	neglt	r3, r3
 800b426:	f042 0202 	orrlt.w	r2, r2, #2
 800b42a:	9307      	strge	r3, [sp, #28]
 800b42c:	9307      	strlt	r3, [sp, #28]
 800b42e:	bfb8      	it	lt
 800b430:	9204      	strlt	r2, [sp, #16]
 800b432:	7823      	ldrb	r3, [r4, #0]
 800b434:	2b2e      	cmp	r3, #46	@ 0x2e
 800b436:	d10a      	bne.n	800b44e <_vfiprintf_r+0x156>
 800b438:	7863      	ldrb	r3, [r4, #1]
 800b43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b43c:	d132      	bne.n	800b4a4 <_vfiprintf_r+0x1ac>
 800b43e:	9b03      	ldr	r3, [sp, #12]
 800b440:	1d1a      	adds	r2, r3, #4
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	9203      	str	r2, [sp, #12]
 800b446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b44a:	3402      	adds	r4, #2
 800b44c:	9305      	str	r3, [sp, #20]
 800b44e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b524 <_vfiprintf_r+0x22c>
 800b452:	7821      	ldrb	r1, [r4, #0]
 800b454:	2203      	movs	r2, #3
 800b456:	4650      	mov	r0, sl
 800b458:	f7f4 feda 	bl	8000210 <memchr>
 800b45c:	b138      	cbz	r0, 800b46e <_vfiprintf_r+0x176>
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	eba0 000a 	sub.w	r0, r0, sl
 800b464:	2240      	movs	r2, #64	@ 0x40
 800b466:	4082      	lsls	r2, r0
 800b468:	4313      	orrs	r3, r2
 800b46a:	3401      	adds	r4, #1
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b472:	4829      	ldr	r0, [pc, #164]	@ (800b518 <_vfiprintf_r+0x220>)
 800b474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b478:	2206      	movs	r2, #6
 800b47a:	f7f4 fec9 	bl	8000210 <memchr>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d03f      	beq.n	800b502 <_vfiprintf_r+0x20a>
 800b482:	4b26      	ldr	r3, [pc, #152]	@ (800b51c <_vfiprintf_r+0x224>)
 800b484:	bb1b      	cbnz	r3, 800b4ce <_vfiprintf_r+0x1d6>
 800b486:	9b03      	ldr	r3, [sp, #12]
 800b488:	3307      	adds	r3, #7
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	3308      	adds	r3, #8
 800b490:	9303      	str	r3, [sp, #12]
 800b492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b494:	443b      	add	r3, r7
 800b496:	9309      	str	r3, [sp, #36]	@ 0x24
 800b498:	e76a      	b.n	800b370 <_vfiprintf_r+0x78>
 800b49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b49e:	460c      	mov	r4, r1
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	e7a8      	b.n	800b3f6 <_vfiprintf_r+0xfe>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	3401      	adds	r4, #1
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	f04f 0c0a 	mov.w	ip, #10
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b6:	3a30      	subs	r2, #48	@ 0x30
 800b4b8:	2a09      	cmp	r2, #9
 800b4ba:	d903      	bls.n	800b4c4 <_vfiprintf_r+0x1cc>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0c6      	beq.n	800b44e <_vfiprintf_r+0x156>
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	e7c4      	b.n	800b44e <_vfiprintf_r+0x156>
 800b4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7f0      	b.n	800b4b0 <_vfiprintf_r+0x1b8>
 800b4ce:	ab03      	add	r3, sp, #12
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4b12      	ldr	r3, [pc, #72]	@ (800b520 <_vfiprintf_r+0x228>)
 800b4d6:	a904      	add	r1, sp, #16
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7fd fba5 	bl	8008c28 <_printf_float>
 800b4de:	4607      	mov	r7, r0
 800b4e0:	1c78      	adds	r0, r7, #1
 800b4e2:	d1d6      	bne.n	800b492 <_vfiprintf_r+0x19a>
 800b4e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	d405      	bmi.n	800b4f6 <_vfiprintf_r+0x1fe>
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	059a      	lsls	r2, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_vfiprintf_r+0x1fe>
 800b4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4f2:	f7fe f941 	bl	8009778 <__retarget_lock_release_recursive>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	065b      	lsls	r3, r3, #25
 800b4fa:	f53f af1f 	bmi.w	800b33c <_vfiprintf_r+0x44>
 800b4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b500:	e71e      	b.n	800b340 <_vfiprintf_r+0x48>
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462a      	mov	r2, r5
 800b508:	4b05      	ldr	r3, [pc, #20]	@ (800b520 <_vfiprintf_r+0x228>)
 800b50a:	a904      	add	r1, sp, #16
 800b50c:	4630      	mov	r0, r6
 800b50e:	f7fd fe23 	bl	8009158 <_printf_i>
 800b512:	e7e4      	b.n	800b4de <_vfiprintf_r+0x1e6>
 800b514:	0800c7eb 	.word	0x0800c7eb
 800b518:	0800c7f5 	.word	0x0800c7f5
 800b51c:	08008c29 	.word	0x08008c29
 800b520:	0800b2d5 	.word	0x0800b2d5
 800b524:	0800c7f1 	.word	0x0800c7f1

0800b528 <__swbuf_r>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	460e      	mov	r6, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	4605      	mov	r5, r0
 800b530:	b118      	cbz	r0, 800b53a <__swbuf_r+0x12>
 800b532:	6a03      	ldr	r3, [r0, #32]
 800b534:	b90b      	cbnz	r3, 800b53a <__swbuf_r+0x12>
 800b536:	f7fd ffb9 	bl	80094ac <__sinit>
 800b53a:	69a3      	ldr	r3, [r4, #24]
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	071a      	lsls	r2, r3, #28
 800b542:	d501      	bpl.n	800b548 <__swbuf_r+0x20>
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	b943      	cbnz	r3, 800b55a <__swbuf_r+0x32>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 f82a 	bl	800b5a4 <__swsetup_r>
 800b550:	b118      	cbz	r0, 800b55a <__swbuf_r+0x32>
 800b552:	f04f 37ff 	mov.w	r7, #4294967295
 800b556:	4638      	mov	r0, r7
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	1a98      	subs	r0, r3, r2
 800b560:	6963      	ldr	r3, [r4, #20]
 800b562:	b2f6      	uxtb	r6, r6
 800b564:	4283      	cmp	r3, r0
 800b566:	4637      	mov	r7, r6
 800b568:	dc05      	bgt.n	800b576 <__swbuf_r+0x4e>
 800b56a:	4621      	mov	r1, r4
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7ff fdc1 	bl	800b0f4 <_fflush_r>
 800b572:	2800      	cmp	r0, #0
 800b574:	d1ed      	bne.n	800b552 <__swbuf_r+0x2a>
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	3b01      	subs	r3, #1
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	6022      	str	r2, [r4, #0]
 800b582:	701e      	strb	r6, [r3, #0]
 800b584:	6962      	ldr	r2, [r4, #20]
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	429a      	cmp	r2, r3
 800b58a:	d004      	beq.n	800b596 <__swbuf_r+0x6e>
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	07db      	lsls	r3, r3, #31
 800b590:	d5e1      	bpl.n	800b556 <__swbuf_r+0x2e>
 800b592:	2e0a      	cmp	r6, #10
 800b594:	d1df      	bne.n	800b556 <__swbuf_r+0x2e>
 800b596:	4621      	mov	r1, r4
 800b598:	4628      	mov	r0, r5
 800b59a:	f7ff fdab 	bl	800b0f4 <_fflush_r>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d0d9      	beq.n	800b556 <__swbuf_r+0x2e>
 800b5a2:	e7d6      	b.n	800b552 <__swbuf_r+0x2a>

0800b5a4 <__swsetup_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4b29      	ldr	r3, [pc, #164]	@ (800b64c <__swsetup_r+0xa8>)
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	b118      	cbz	r0, 800b5b8 <__swsetup_r+0x14>
 800b5b0:	6a03      	ldr	r3, [r0, #32]
 800b5b2:	b90b      	cbnz	r3, 800b5b8 <__swsetup_r+0x14>
 800b5b4:	f7fd ff7a 	bl	80094ac <__sinit>
 800b5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5bc:	0719      	lsls	r1, r3, #28
 800b5be:	d422      	bmi.n	800b606 <__swsetup_r+0x62>
 800b5c0:	06da      	lsls	r2, r3, #27
 800b5c2:	d407      	bmi.n	800b5d4 <__swsetup_r+0x30>
 800b5c4:	2209      	movs	r2, #9
 800b5c6:	602a      	str	r2, [r5, #0]
 800b5c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d2:	e033      	b.n	800b63c <__swsetup_r+0x98>
 800b5d4:	0758      	lsls	r0, r3, #29
 800b5d6:	d512      	bpl.n	800b5fe <__swsetup_r+0x5a>
 800b5d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5da:	b141      	cbz	r1, 800b5ee <__swsetup_r+0x4a>
 800b5dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	d002      	beq.n	800b5ea <__swsetup_r+0x46>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f7fe ff2f 	bl	800a448 <_free_r>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	6063      	str	r3, [r4, #4]
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	89a3      	ldrh	r3, [r4, #12]
 800b600:	f043 0308 	orr.w	r3, r3, #8
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	b94b      	cbnz	r3, 800b61e <__swsetup_r+0x7a>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b614:	d003      	beq.n	800b61e <__swsetup_r+0x7a>
 800b616:	4621      	mov	r1, r4
 800b618:	4628      	mov	r0, r5
 800b61a:	f000 f883 	bl	800b724 <__smakebuf_r>
 800b61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b622:	f013 0201 	ands.w	r2, r3, #1
 800b626:	d00a      	beq.n	800b63e <__swsetup_r+0x9a>
 800b628:	2200      	movs	r2, #0
 800b62a:	60a2      	str	r2, [r4, #8]
 800b62c:	6962      	ldr	r2, [r4, #20]
 800b62e:	4252      	negs	r2, r2
 800b630:	61a2      	str	r2, [r4, #24]
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	b942      	cbnz	r2, 800b648 <__swsetup_r+0xa4>
 800b636:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b63a:	d1c5      	bne.n	800b5c8 <__swsetup_r+0x24>
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	0799      	lsls	r1, r3, #30
 800b640:	bf58      	it	pl
 800b642:	6962      	ldrpl	r2, [r4, #20]
 800b644:	60a2      	str	r2, [r4, #8]
 800b646:	e7f4      	b.n	800b632 <__swsetup_r+0x8e>
 800b648:	2000      	movs	r0, #0
 800b64a:	e7f7      	b.n	800b63c <__swsetup_r+0x98>
 800b64c:	20000024 	.word	0x20000024

0800b650 <_raise_r>:
 800b650:	291f      	cmp	r1, #31
 800b652:	b538      	push	{r3, r4, r5, lr}
 800b654:	4605      	mov	r5, r0
 800b656:	460c      	mov	r4, r1
 800b658:	d904      	bls.n	800b664 <_raise_r+0x14>
 800b65a:	2316      	movs	r3, #22
 800b65c:	6003      	str	r3, [r0, #0]
 800b65e:	f04f 30ff 	mov.w	r0, #4294967295
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b666:	b112      	cbz	r2, 800b66e <_raise_r+0x1e>
 800b668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b66c:	b94b      	cbnz	r3, 800b682 <_raise_r+0x32>
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 f830 	bl	800b6d4 <_getpid_r>
 800b674:	4622      	mov	r2, r4
 800b676:	4601      	mov	r1, r0
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b67e:	f000 b817 	b.w	800b6b0 <_kill_r>
 800b682:	2b01      	cmp	r3, #1
 800b684:	d00a      	beq.n	800b69c <_raise_r+0x4c>
 800b686:	1c59      	adds	r1, r3, #1
 800b688:	d103      	bne.n	800b692 <_raise_r+0x42>
 800b68a:	2316      	movs	r3, #22
 800b68c:	6003      	str	r3, [r0, #0]
 800b68e:	2001      	movs	r0, #1
 800b690:	e7e7      	b.n	800b662 <_raise_r+0x12>
 800b692:	2100      	movs	r1, #0
 800b694:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b698:	4620      	mov	r0, r4
 800b69a:	4798      	blx	r3
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7e0      	b.n	800b662 <_raise_r+0x12>

0800b6a0 <raise>:
 800b6a0:	4b02      	ldr	r3, [pc, #8]	@ (800b6ac <raise+0xc>)
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f7ff bfd3 	b.w	800b650 <_raise_r>
 800b6aa:	bf00      	nop
 800b6ac:	20000024 	.word	0x20000024

0800b6b0 <_kill_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	@ (800b6d0 <_kill_r+0x20>)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	602b      	str	r3, [r5, #0]
 800b6be:	f7f6 fe0b 	bl	80022d8 <_kill>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	d102      	bne.n	800b6cc <_kill_r+0x1c>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	b103      	cbz	r3, 800b6cc <_kill_r+0x1c>
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20007244 	.word	0x20007244

0800b6d4 <_getpid_r>:
 800b6d4:	f7f6 bdf8 	b.w	80022c8 <_getpid>

0800b6d8 <__swhatbuf_r>:
 800b6d8:	b570      	push	{r4, r5, r6, lr}
 800b6da:	460c      	mov	r4, r1
 800b6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e0:	2900      	cmp	r1, #0
 800b6e2:	b096      	sub	sp, #88	@ 0x58
 800b6e4:	4615      	mov	r5, r2
 800b6e6:	461e      	mov	r6, r3
 800b6e8:	da0d      	bge.n	800b706 <__swhatbuf_r+0x2e>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6f0:	f04f 0100 	mov.w	r1, #0
 800b6f4:	bf14      	ite	ne
 800b6f6:	2340      	movne	r3, #64	@ 0x40
 800b6f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	6031      	str	r1, [r6, #0]
 800b700:	602b      	str	r3, [r5, #0]
 800b702:	b016      	add	sp, #88	@ 0x58
 800b704:	bd70      	pop	{r4, r5, r6, pc}
 800b706:	466a      	mov	r2, sp
 800b708:	f000 f848 	bl	800b79c <_fstat_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	dbec      	blt.n	800b6ea <__swhatbuf_r+0x12>
 800b710:	9901      	ldr	r1, [sp, #4]
 800b712:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b716:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b71a:	4259      	negs	r1, r3
 800b71c:	4159      	adcs	r1, r3
 800b71e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b722:	e7eb      	b.n	800b6fc <__swhatbuf_r+0x24>

0800b724 <__smakebuf_r>:
 800b724:	898b      	ldrh	r3, [r1, #12]
 800b726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b728:	079d      	lsls	r5, r3, #30
 800b72a:	4606      	mov	r6, r0
 800b72c:	460c      	mov	r4, r1
 800b72e:	d507      	bpl.n	800b740 <__smakebuf_r+0x1c>
 800b730:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	6123      	str	r3, [r4, #16]
 800b738:	2301      	movs	r3, #1
 800b73a:	6163      	str	r3, [r4, #20]
 800b73c:	b003      	add	sp, #12
 800b73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b740:	ab01      	add	r3, sp, #4
 800b742:	466a      	mov	r2, sp
 800b744:	f7ff ffc8 	bl	800b6d8 <__swhatbuf_r>
 800b748:	9f00      	ldr	r7, [sp, #0]
 800b74a:	4605      	mov	r5, r0
 800b74c:	4639      	mov	r1, r7
 800b74e:	4630      	mov	r0, r6
 800b750:	f7fe feee 	bl	800a530 <_malloc_r>
 800b754:	b948      	cbnz	r0, 800b76a <__smakebuf_r+0x46>
 800b756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b75a:	059a      	lsls	r2, r3, #22
 800b75c:	d4ee      	bmi.n	800b73c <__smakebuf_r+0x18>
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	f043 0302 	orr.w	r3, r3, #2
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	e7e2      	b.n	800b730 <__smakebuf_r+0xc>
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	6020      	str	r0, [r4, #0]
 800b76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b77a:	b15b      	cbz	r3, 800b794 <__smakebuf_r+0x70>
 800b77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b780:	4630      	mov	r0, r6
 800b782:	f000 f81d 	bl	800b7c0 <_isatty_r>
 800b786:	b128      	cbz	r0, 800b794 <__smakebuf_r+0x70>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f023 0303 	bic.w	r3, r3, #3
 800b78e:	f043 0301 	orr.w	r3, r3, #1
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	431d      	orrs	r5, r3
 800b798:	81a5      	strh	r5, [r4, #12]
 800b79a:	e7cf      	b.n	800b73c <__smakebuf_r+0x18>

0800b79c <_fstat_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d07      	ldr	r5, [pc, #28]	@ (800b7bc <_fstat_r+0x20>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	f7f6 fdf5 	bl	8002398 <_fstat>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d102      	bne.n	800b7b8 <_fstat_r+0x1c>
 800b7b2:	682b      	ldr	r3, [r5, #0]
 800b7b4:	b103      	cbz	r3, 800b7b8 <_fstat_r+0x1c>
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20007244 	.word	0x20007244

0800b7c0 <_isatty_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d06      	ldr	r5, [pc, #24]	@ (800b7dc <_isatty_r+0x1c>)
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	602b      	str	r3, [r5, #0]
 800b7cc:	f7f6 fdf4 	bl	80023b8 <_isatty>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	d102      	bne.n	800b7da <_isatty_r+0x1a>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	b103      	cbz	r3, 800b7da <_isatty_r+0x1a>
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	bd38      	pop	{r3, r4, r5, pc}
 800b7dc:	20007244 	.word	0x20007244

0800b7e0 <_init>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	bf00      	nop
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_fini>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	bf00      	nop
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr
